// UI **********************************************************************************
// *************************************************************************************

const imgOpen = '<img class=tile src=data:image/gif;base64,';
const iconOpen = '<img class=icon src=data:image/gif;base64,';
const imgClose = ' />';

const imgIconGlassS = 'R0lGODlhEAAQAOMIAAAAAHs9AKpVAHd3d5mZmbu7u93d3f//Vf///////////////////////////////yH/C05FVFNDQVBFMi4wAwEAAAAh+QQJBQAPACwAAAAAEAAQAAAEX/A9EMAE2FI7hQ8CKHoCtw1EYSDsJnUDdswYUr6AQMz8bHMdQKF3MOSAG4CBV8BUcDcAoqi5SVzS7OR5LWmzR1zFiEO4us3X9QclZN4G6xYwqNdT59wnxAd5TE9vGk8RACH5BAkFAA8ALAAAAAAQABAAAARh8D0QwATYUjuFDwIoegK3DURhIOwmdQN2zBhSvoBAzPxscx1AoXcw5IAbgIFXwFRwNwCiqLlJXNIDQvO8lqSZ7RFXMeK23U7zdf1BCZm4wTqpDO73lKvzCflBHiZPcVwWEQAh+QQJBQAPACwAAAAAEAAQAAAEYvA9EMAE2FI7hQ8CKHoCtw1EYSDsJnVDdmRI+QICcez8UXMdQKF3MOCAG4CBV8BUbjYAoqixSVxSn+Z5LUkBMwTGOqkYJxMxt9N8XX9QQmZuIJ8GeFSTi/uE/iAeJk9zWxYRACH5BAkFAA8ALAAAAAAQABAAAARh8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCMSh7wfNdYAC72C4/TYAw66AqdhqAARRU5O4oj2N01qKAg5eo61S/GIQLi7TavU9CbKMoTqpDO73VPr2CflBHiZOcXUWEQAh+QQJBQAPACwAAAAAEAAQAAAEY/A9EMAE2FI7hQ8CKHoCtw1EYSDsJnVDJiPlCwjEoe8HzXWAAu9guP02AMOugKnYagAEUVOTuKI9jdNaigIOXqOtUvxiEC4ucwKe+J6EDBhjqE4qg3w+lb59QoAgHiZOMloWEQAh+QQJBQAPACwAAAAAEAAQAAAEZPA9EMAE2FI7hQ8CKHoCtw1EYSDsJnVDJiPlCwjEoQP6QXMdQKGnM9yAG4ChV8BUbDUA4mAM2p5Sn+YpOUp53+NViTlgEK6uoDkxT35QQsaMMdS6lYFen0rfPiGBIB4mWDITTxEAIfkECQUADwAsAAAAABAAEAAABGPwPRDABNhSO4UPAih6ArcNRGEg7CZ1QyYj5QsIxHFkOs11gIJuaLj9NgDDsICp2GoAxKEItDmjB4TGKTFGATut0ZrE7L7cDnOym/ieBLMOY6h1K4N8PuXqfEKAIB4mVzITThEAIfkECQUADwAsAAAAABAAEAAABGPwPRDABNhSO4UPAih6ArcNRGEg7CZ1QyYj5QsIxHFoOs11gIIOoDPcfhuAQXcoYCq2GgBxMAJt0OkBoYFKjlNi+IhVYnZhb8dJRE9rX9x5qIRPKoN8PuXqfEKAIB4mWTJ3FhEAIfkECQUADwAsAAAAABAAEAAABGPwPRDABNhSO4UPAih6ArcNRGEg7CZ1QyYj5QsIxHFoOs11gIIOoDPcfhuAQXcoYCq2GgBxMAJt0OkBoYFKjlNi+IhVYnZhb8dJHE5rX9zZbYBPKoN8PuXqfEKAIB4mWTJ3FhEAIfkECQUADwAsAAAAABAAEAAABGTwPRDABNhSO4UPAih6ArcNRGEg7CZ1QyYj5QsIxIFdB811gMJBNzTcfhuAYXgoYCq2GgBxMAJt0GlPA5UcpwAdAlPzVoxhzLjbcYaH6nKH8GYq5aeBHuXs3j4hgSAeJlkyE1ARACH5BAkFAA8ALAAAAAAQABAAAARh8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCARmAzTXAYVD5mC4+TYAw2FZwFRsNR5RU5O4pAjN01riAYRZo61S/GKy205zyeZVOwS23PA+De6o5vb2CflBHiZPMloWEQAh+QQJBQAPACwAAAAAEAAQAAAEYPA9EMAE2FI7hQ8CKHoCtw1EYSDsJnVDJiPlCwgEZ9P6DRQygMFnqwgPSKBLQgQgDsNOrzJ5IjRUZskJOHCJzMqwi7lmOwWkGsmz4dZqQy0MGNjtqeXtE+qDPCZUQRNUEQAh+QQJBQAPACwAAAAAEAAQAAAEX/A9EMAE2FI7hQ8CKHoCtw1EYSDsJnVDJiPlCwgEZ9P6DRQ9g89WAQgxQJdkCEAchJ1eZeJEaKbLUhNw2A6XlWN3i+0UDuj0gWfDqdOGGhgwqNdTytsnxAd5TFMyVxYRACH5BAkFAA8ALAAAAAAQABAAAARf8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCARn0/oNFD2Dz1YBCCdAl2QIQBg1tWVlgjg4J9NlqQk4cIfSZxfjzHYKh7TaGu0Q1mpD+zSoo4DZ2yfEB3lMUzIaUxEAIfkECQUADwAsAAAAABAAEAAABF7wPRDABNhSO4UPAih6ArcNRGEg7CZ1QyYj5QsIBGfT+g0UPYPPVgEIJ0CXZAhAGDW1ZWXidE6my1ITcNgOpc+DeIvtFMRoMc+GS6MN0StgQKenlLdPaA/ymKYyGlMRACH5BAkFAA8ALAAAAAAQABAAAARd8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCARn0/oNFD2Dz1YBCCdAl2QIQBg1tWVl4nROpstSM+McSp+H8BbbKYTPYZ4Nhz4bolfAYD5PKW+fkB7kMU1lGlMRACH5BAkFAA8ALAAAAAAQABAAAARd8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCARn0/oNFD2Dz1YBCCdAl2QIQBg1tWVl4nROpstSM+McSo2HcNiJ7RTEaJ4NhxYbolfAYD5PKW+fkB7kMU1lGlMRACH5BAkFAA8ALAAAAAAQABAAAARd8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCARn0/oNFD2Dz1YBCCdAl2QIQBg1tWVl4nROpstSM+McSo2HcNiJ7RTEaJ4NhxYbolfAYD5PKW+fkB7kMU1lGlMRACH5BAkFAA8ALAAAAAAQABAAAARd8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCARn0/oNFD2Dz1YBCCdAl2QIQBg1tWVl4nROpstSM+McSo2HcNiJ7RTEaJ4NhxYbolfAYD5PKW+fkB7kMU1lGlMRACH5BAkFAA8ALAAAAAAQABAAAARd8D0QwATYUjuFDwIoegK3DURhIOwmdUMmI+ULCARn0/oNFD2Dz1YBCCdAl2QIQBg1tWVl4nROpstSM+McSo2HcNiJ7RTEaJ4NhxYbolfAYD5PKW+fkB7kMU1lGlMRADs=';
const imgIconGlassF = 'R0lGODlhEAAQAOMIAAAAAHs9AKpVAHd3d+5rDpmZmbu7u93d3f///////////////////////////////yH/C05FVFNDQVBFMi4wAwEAAAAh+QQJAQAPACwAAAAAEAAQAAAEXfA9EMAE2FI7hQ8CKHoCtw2FcSDsJnVDJiPlCwgFZ9P6DRi9g89WAQgnQJdkCEAYNbVlZeJ0TqbLUjPjHEqNhHDYie0YxGieDYcWH6JXwGA+Tylvn5Ae5DFNZRpTEQAh+QQJAQAPACwAAAAAEAAQAAAEXvA9EMAE2FI7hQ8CKHoCtw2FcSDsJnVDJiPlCwgFoe8EzXUAA49wuP02gMPOgKnYagAEUVOTuKLYidNaymKNtkrRhnBxmS+r71mQZQ5VLWBAp6fMt09oD/KYnG5yDxEAOw==';
const imgIconGlassH = 'R0lGODlhEAAQAOMIAAAAAHs9AO4ZDqpVAHd3d5mZmbu7u93d3f///////////////////////////////yH/C05FVFNDQVBFMi4wAwEAAAAh+QQJAgAPACwAAAAAEAAQAAAEX/A9EMAE2FI7hw8DKHoDtxGFcSDsJnUEJswYUr7AUMz8bHMdgKEnOOSAG8CBZ8BUcDcAoqi5SVzS7OR5LWmzR1zFiEO4us3X9QctZN4H6xZAqNdT59wnxAd5TE9vGk8RACH5BAkCAA8ALAAAAAAQABAAAARj8D0QwATYUjuHDwMoegO3EYVxIOwmdUQmI+ULDIWg7wLNdQADT3C4/TaAw86AqdhqAARRU5O4oj2N01qKAgReo61S/GIQLi5zAp74noUMGHOoTiqEfD6Vvn1CgCAeJk4yWhYRACH5BAkCAA8ALAAAAAAQABAAAARj8D0QwATYUjuHDwMoegO3EYVxIOwmdUQmI+ULDIUgaDrNdQCDDqA73H4bwEEnMGAqthoAITACbdCpAKGBSo5TYviIVWJ2YW/HSRxOa1/c2X2ATyqEfD7l6nxCgCAeJlkydxYRACH5BAkCAA8ALAAAAAAQABAAAARf8D0QwATYUjuHDwMoegO3EYVxIOwmdUQmI+ULDAVn0/oNGL2Dz1YBCDFAl2QIQAiEnV5l4kRopstSEyDYDpeVY3eL7RgE6LSAZ8Op04caGECo11PK2yfEB3lMUzJXFhEAIfkECQIADwAsAAAAABAAEAAABF3wPRDABNhSO4cPAyh6A7cRhXEg7CZ1RCYj5QsMBWfT+g0YvYPPVgEIJ0CXZAhAGDW1ZWXidE6my1Iz4xxKjYJw2IntGMRong2HFh+iVwBhPk8pb5+QHuQxTWUaUxEAOw==';
const imgIconGlassU = 'R0lGODlhEAAQAKUAAAAAAAAKPgAOQgAQRgARRQASRgATRwATSQAUSAEURgAVRgAVSQAWSwAXTQEXSwAXTwEYTgIZTwQZTQEaTwEaUQIbUgYbTwMcUwAdVQAZmgYfVwYhWAghVgQiWgojWhEmWgAnmA4oXxEqYRIsYBItZBksXxYyaBs1ans9ABxL0zRS7TZk66pVAHd3d1uD+pmZmbu7u7XB/93d3f///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLBkBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLCoBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLDEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBAJUMCgUs+oXwHqVQDMQQvJJM5sA2ALkQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBMJVMCgUs+oXwHqlXDPXKgVKM5sA2MLlQBBkbHdLADIuDQcwSEVragAzDIB4a4uOBzNKi0KBjikREJeBk4QbKRUhJ5eZTTAdGyAXGhwjdowvGCQgDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBAJUMCgUs+oXwHqVQDMQQvJJM5sA2ALkQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLDEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLCoBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLBkBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGRwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XKhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XMRwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUgJ5eZTTAdGw0gMyAjdowvGCQmDyAaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQACkUs+oXwHqVLAEBSPJJM5sA2GLhSBFkbHdLADIDDSkwSEVragAzDIB4a4uOBzNKi0KBjhMRK5eBk4QbHhUuJ5eZTTAgKSsuMy6fapptGCQmDy4aIjK0Q0UtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUgJ5eZTTAdGw0gMyAjdowvGCQmDyAaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XMRwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XKhwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQAh+QQFBAA/ACwAAAAAEAAQAAAGisDfD4ACDAFII9E4ZDlRLKjUyWIuWy+YbMZdCputBKJQMCgUs+oXwHqVLAEBQvJJM5sA2GLhQBBkbHdLADIDDQcwSEVragAzDIB4a4uOBzNKi0KBjhMREJeBk4QbHhUhJ5eZTTAdGw0XGRwjdowvGCQmDxQaIjJqmkUtwsJZXk1PUclQTlaUSZhGQQA7';
const imgIconGlassP = 'R0lGODlhEAAQAOMHAAAAAHs9AKpVAHd3d5mZmbu7u93d3f///////////////////////////////////yH5BAEBAAgALAAAAAAQABAAAARaECEQwATYUjuFDwIoegK3DURhHOwmdUMmH+ULCARn0/oNFD2Dz1YBCCdAl2QIOBg1tWVl4nROpstSU+McSp87ZQf4WvJsOFnGEL0CBnB4Snn7hO4gj2mqdiMiADs=';
const imgIconWheat = 'R0lGODlhEAAQAOMAAAAAAAAKVg0SrTwJ4F5YOYNvNZF7PqiYU86zWd28ZQAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARl8MkpATCWUgtIORfwiBsBfEbBGVpXGIhxoOR0wnKebYeR4DEDoXVAJHpB0+ZzjCEOs6GtmGimCMrKQFDtFbA7S0GwjRJSJNdTEBCYOuAHovBEEARhzkhW+NY0D2dYfoA2b1mFDxEAOw==';
const imgIconBarley = 'R0lGODlhEAAQAOMAAAAAAF8AAJkAAM0AAFY/OH9PM41iPaZ+U82WWdynZQAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARl8MkpATCWUgtIORfwiBsBfEbBGVpXGIhxoOR0wnKebYeR4DEDoXVAJHpB0+ZzjCEOs6GtmGimCMrKQFDtFbA7S0GwjRJSJNdTEBCYOuAHovBEEARhzkhW+NY0D2dYfoA2b1mFDxEAOw==';
const imgIconOlive = 'R0lGODlhEAAQAKU1AAAAAABlMYxUJlNtXQCMPphrG4x0AHx7AKptLIGAAJt5CaF2GoiDAK11J6aBEqyEGaeICaWLAaGUAF6gf5qaAKqeAKWhJqilAKqqAI+omq2uAHO1lK+xALm2Abq+AL2+Eb3AAMC8Lr/DAMbAPcPIAMjNAMvPAc7SAc/TFNbYE9XYK9jZH9zXUtrcN+LcXOLfOuXlWOroae/pYu7tdvTygv///////////////////////////////////////////yH5BAEKAD8ALAAAAAAQABAAAAZ/wJ9wSCwKAQDjkQgYZJJFwAZ6dCKP0gkVa81OtEbkYPy9RhkHJIDADqiPLJoshAywCYE88hObvVRIFiMJdm0AJSopJyIALjQvKGlqACAiIB0SADAzKyYUVAAXFxUPSCotJSARoAoNCEkAGiQeGAtbb0ccFxACW2EGDgW+SrhDQQA7';
const imgIconDate = 'R0lGODlhEAAQAKUtAAAAADIBBEIKDVMVGloaG18dIV4eH1wgH2skHnwrKn8qLXssKH0tLnwuLn0vL4AuMH00LixVDzJUFzFVFS9XGIc6Mog6MIo7Los9MY0/Mo1BNI5CNY1ENZJCO45EN5NDOJNENz1mF6ROP0puJqJUQKZTQ6VUQ6hVQ7RjUk+IKlWILLtoWGmOMf///////////////////////////////////////////////////////////////////////////yH5BAEKAD8ALAAAAAAQABAAAAZfwJ9wSCwaj8ikcsksAgDNHyAEXT4BlKuWCIioUgDJCED6sCZVoXa1sgBEF0hausAAOCWUBlDCFKoAAhsmIAAeJScdABoOgAMKDw0ACBUZGgQAAWlbAAYMCQdPSltRRUEAOw==';
const imgIconFig = 'R0lGODlhEAAQAMZcAAAAAB8YIyIbKiMbKiUbKSUdLCcdMCgeLiYfLyYgLykgMyohMigiMSshMyoiMyojNSkkMS8iOS8jOkMeMiwlNismNiwmODMkPjMlPDEnOzEpPDgoPjArOzIsPjcrQzMtQDUtQjovHDctQj0tSTsuRz4wTUE1Hj8zPzw0TFQtSTs1S0A3UUQ2VD84T0U2UkE4U0M4UUI5U0g6V0o6W047Vkg/W0lAXExAWU5DY0xHX1ZFZ1NIZlZJZ1dJa1ZMaVtObl1Nc15PcnlSc2lbfGpcfmddfmldfW5gg29pJ3NhhFp2DHJliHJmiHRmiHZpi2SAGH5ukoB5LoBylIt+n45+oI6Ao42Bo3qaH5WHqKaatrGfVbG3mf///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////yH5BAEKAH8ALAAAAAAQABAAAAefgH+CgwBaAIOIiACLUYeJik+RjYuOkJFPSFdXW1uVfwBKoUo3QkqXnYqUpDemT1eeggBDNFRSKaGviQA7TFVZUE48lIo1RkRTWElWMD6eADk2Ii5HTTpLP0UxlQAtKxkkPUAjQTI4KNsqIAseJTMYLBcvG9snFAUNERgEEgYaDs4fHnAYcCAAAwEKYH3qMKFCAgQQLCx69GmRiRDDBgUCADs=';
const imgIconPom = 'R0lGODlhEAAQAMZ9AAAAAJgOFIYbH44ZHIIdHZAZGo8bHYkdIZUbIJ4ZH5saH5ccIYkhKZoeI5oeJZ4dJKcbIqIdJKQdJKEeJqIfJ7YaI6ggKaogKqciKLIfJ7AhKZcpLq0jK64kLLYjLLEnL7MnL7YnMLgnMq4rMr0nMbgpM7grNr0qM7wqN7wrNbssOLstNsMrN8QsN8QuOr8wPL0xPMMwO8oyPsU0QMY1QsM2Qso0QMY3Q8w2RM44RMY8SNE7S8w9SdA8Ss0+SMJBTctATcpCTshFT9FEUtJFU9VGVM5KV81MVc5MWMxNWNRLWdBPW9RSXttSYtNXXt1WZtBbZddZZtdaZ9tZZ9laZ9NdZ9Zga9xfbtVkb91icNRlb95jcdxodNpqd95qdN9rd9ZueN1ueuBue9tzet10geNzf911f9l4gNh5guB4gux3f9t9g9t+h+J8iNqCid6CituDituFi9yNld6NluyLkd+QmdqTl+CTm+OXn+OjqeSmq+ykquOnq////////////yH5BAEKAH8ALAAAAAAQABAAAAexgH+Cg4MAhIeHAHsAhoiEADtqdHeNiYwAARVOlY9RaXhzPixeZZx/AD9Idnx5ZlxiWVucACMmR1hjZ2tkV09tjQAbExcoM0BGTFNUTV96hgAHDhYhMDpJWmhycF11zwILFB8qNUJQYHFsYW/eCxMdJS83QUtVVlJszwwIDxggKTE0eAwposQNsAENInAQccKFjRw9iMwyoECCBg8kWsjAYeoUgQIJIGTwsKKjoEsoCQUCADs=';
const imgIconGrape = 'R0lGODlhEAAQAMIGAAAAAIQAhMgAzDBADFBsFHSYIP///////yH5BAEKAAcALAAAAAAQABAAAAM8eLrc/g7ASORcoCpgHygSEAQdxZ2XSI5owwXCAAhqKZ6jDNurSJMclw8wgBVJkReOVsLsmEhPaNaEBBUJADs=';
const imgIconSword = 'R0lGODlhEAAQAOMIAAAAAKgAAFRUVKhUAPxUVKioqPz8VPz8/KpVAKpVAKpVAKpVAKpVAKpVAKpVAKpVACH5BAEKAAgALAAAAAAQABAAAAQ9EEhEq63iCHA7AsVRcF4FCOFYmqhIrmf6lrG7UrU6Xzlg7JaaYQAMCgyBCWwIIEiKuCeBefswoSYiNkiKAAA7';
const imgIconShield = 'R0lGODlhEAAQAOMNAAAAAERERFRUVGRkZHR0dISEhJiYmKioqLi4uMjIyNjY2Ozs7Pz8/KpVAKpVAKpVACH5BAEKAA8ALAAAAAAQABAAAARs8D1Aq6VymjEKSgsjJgcgAQd3IIjCgAxiTgfhDdY4owRSAIkERSQ71TwCimEBKtIIhBULYFAoDLtaNAkYMBa+bIGAOxxEjMPvFN0CAiJFavaMlpZmupHcBZcygDxmJHqANB5/hoYoiYqLhRIRADs=';
const imgIconRattata = 'R0lGODlhEAAQAMIDAAAAAEA0NFFISLs/QGNjY/+Gh7s/QLs/QCH5BAEKAAcALAAAAAAQABAAAANKeKoA+/AAQlx8s5RqYyMaxXUSJQyDIFLWNBGCurKSPN9OA9jxTL6CQMBWwRQGup2pAzjmNANY4NdKNkkLwEDDxTK21su3K87qHgkAOw==';
const imgIconScroll = 'R0lGODlhEAAQAOMMAAAAAEgAACggDDgsEEg4GFxAHIBULJBgNLRsRLx4TNycYPzIfLs/QLs/QLs/QLs/QCH5BAEKAA8ALAAAAAAQABAAAARc8IG0qq0pA0mvTYIwIMCknOgJJuM2ZXBcEOQjAUUQ5Ple25yDcCj8cXQJZCBh5HgszUlgoaNSo51n86gIdL0KYwlBLps3zuciYTCQJuq1IEErJVIp0KDFifk1DxEAOw=='
const imgIconTrophy = 'R0lGODlhEAAQAMIGAAAAAG1FNG5GNbhvJtOIPv+wLrs/QLs/QCH5BAEKAAcALAAAAAAQABAAAANCeHrQ3mu1QiuFChRiLQdMMXWXNo3kGXLkJkoA62FRPEd4TOwgng+Dnq/GG2YaOx4tE2g6n0KAwGmBMp/YZvTBxSQAADs=';
const imgIconLog = 'R0lGODlhEAAQAOMKAAAAADgAAEgAAFwAAGwAAIAAAJAAAJwQCNBgPNx4SP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAART8MlJq7Ug3wrKMMAmdYYhFCEGEMVxHinVCcYxtEQ8EqdB1DnMh3VA6UaFwOBQPD4yyVYBJSQECr7WEZBI/AxXGCaBSJhqzme3y0yPuAmN6D1/RAAAOw==';
const imgIconBoard = 'R0lGODlhEAAQAMIEAAAAALQ4HNBgPOiQXP///////////////yH5BAEKAAQALAAAAAAQABAAAAM0SLqs0HAB8SKbglqX86jQFATCZ2GkGWEe2LClewlkfHb2iqthlsqSAS13EvI2gOOGAIQkAAA7';
const imgIconStone = 'R0lGODlhEAAQAOMIADsAAGIAAHwAAKAAAMtYWOSFhf+7u//i4v///////////////////////////////yH5BAEKAAgALAAAAAAQABAAAAReEMlJq702aI1lIIZRENsVGAcqGiTnFUespiL5EjBd1GOAAIXBYCQUCAYEpA9AOCaLmuNg2RQEoJuAAPAbGK0bVHDABRTBgYKa5S17tQCzuqnh/uJ2M9Z+MW/4GHh2EQA7';
const imgIconOre = 'R0lGODlhEAAQAIQQACQ7NG00ISpUR4g/JmNbQKVJJjp0Y5RtPcleNU2Neel6Uk+6mPyZgoTixf7Dtsn67P///////////////////////////////////////////////////////////////yH5BAEKABAALAAAAAAQABAAAAV7ICSOZGmeaGoK7CgM8EAKiWGwwqEwDCJDgsUisTAkdAwHQxEQCRqPhvBwQCAUvubAcBjaDgVYAdGEDJZHbnhQaJfPS0R1HQ7YIYHdFUHvKdx4WHxsZw5YBQQAEAAEYWt5PIgGigA1BAN2AVZhNoqLAABleD4DoCqfnhAhADs=';
const imgIconCopper = 'R0lGODlhEAAQAOMIAG00IYpBKZxFKZxOMcFaNud8VvyZgvvDtv///////////////////////////////yH5BAEKAAgALAAAAAAQABAAAARREMlJq704642F2J5AEMEVFsQwEEUphSyqxiQiGLG8FoVhtIIeb8Ty4VSAIOHX86FSgUGysDocV9AAYaq6jgZRAOCVMsxS4jFFMKBuxRkPHBMBADs=';
const imgIconSell = 'R0lGODlhEAAQAMIHACil6iym6S6n6Tq3/FS26970/////wAAACH5BAEKAAcALAAAAAAQABAAAAM2eLDcrW6NSOVsoo5yKxsGFw1kCYadZKwsK35tjMLy+lrmeWuzJ+0ekiOgoRB8DcKBwGw6nYcEADs=';
const imgStaffFarmer = 'R0lGODlhEAAQAIQWAAAAAHwYAFQ8HGxMJLQ4HIBYMLxUAJBgNLRsRKh0TLx4TLyEWOiQAOikfOioaLS00Py4APy8nPzIfPzMsPzYxPz8/P///////////////////////////////////////yH5BAEKAB8ALAAAAAAQABAAAAV14AeM42eeJiCSJJpKLODEL6LKjjMYfDBKNlHEsHAgIJDAhEIpCXkHBIOhXDZPgOF0aggEmDOsIsDjkXIqLCEGaWFJWyQgkRZVHhWYYA9oNOgjD4GCAAUJAnMJDAAVgQCCInwAAouOjzdTI5mMjm8paSONLqMhADs=';
const imgStaffAbacus = 'R0lGODlhEAAQAMIHAAAAAC0EAEYXAF0lAHQ9AKVnANOcDP///yH5BAEKAAcALAAAAAAQABAAAAM/eLrc/g7ISSUDI2tNwA0ACBaAAF4CYKilml5b3H0AKYbn0qYpKbw6HqsHVOyGLk+QRVr9lMbYZqarWCHY7CMBADs=';
const imgStaffLogger = 'R0lGODlhEAAQAIQaAAAAAGwAAIwAAKAAALQAAJwQCARAANwAAKgkFARwAORAAMBMLGRkhAScAOhgALx4TLyEWJSUvMyYCwDkAOioaPy4ACD8IMDE3NTU6Pz0AP///////////////////////yH5BAEKAB8ALAAAAAAQABAAAAWAoNU0FgB85qeu30iaALKcbEtaFWDANWpZD0mlkUjsaCrYo5KZNAwKBQEJGCSEownUcZgmp1fJyGggECg0AERXLJoMFHRyBoNpU3NEBOCaTAAKaQUBABF7dVFThQsIDIYXAAQKApEHDYuNj3Uwl4MmmnyXoQCMhRiQSWknm0g9HyEAOw==';
const imgStaffSawyer = 'R0lGODlhEAAQAIQTAAAAAFgEAJgcAEBAWGhIJLw0AIFMQGRkhJRkPMxgNHR0nNBwAISEtLyEWJSUvOioaLS00PzMsPzYxP///////////////////////////////////////////////////yH5BAEKAB8ALAAAAAAQABAAAAVr4AeM42eeKKmirPoAAcmKT/0WghADKWAviUIgIpHwTCNBYVlIDIlGZAOQY+oCxZcUlsuNArWjSEVylpADw4iZSAAQRwDjUCI3GnCAgcGH8AAECHCCBSMKfXFkhSIQEA5xS2uLY2JjSJUzmSEAOw==';
const imgStaffMason = 'R0lGODlhEAAQAOMPAAAAAAAzWGhIJABvkJRkPACRqXR0nNBwAISEtLyEWDSyzKCgyOioaPzMsPzYxP///yH5BAEKAA8ALAAAAAAQABAAAARf8IE5n72Yasw1AwHFSUz5FcMQAhlgHkoRNI7DWtNQ7IUy0zZcApDiqQK1jxCUSk0CpZtEQ/FVLq4JT6EAEKQkFjWR+Ho0AsJXXQAsFoh4nKqlxA0VwE7bxl39gCOCFxEAOw==';
const imgStaffMiner = 'R0lGODlhEAAQAIQRAAAAAAAFWAAJmAAGvCMYGGZFJDRHzGhIJJRkPHR0nJ5vQISEtLyEWKCgyOioaPzMsPzYxP///////////////////////////////////////////////////////////yH5BAEKAB8ALAAAAAAQABAAAAVv4AcQwPidaEqOJZC+LeAAQfuKiuMowCAINReqtCsoDIPAwygUAQSD6MAQKBQgBSGA8YRGgQEFhHcC8AK/Xymga8Zi1BJsJjUYAIhmefZmFPJvfAAHfwB/AwANiguMjG89MYwJLVEllUNyZVp6N50hADs=';
const imgStaffSmeltr = 'R0lGODlhEAAQAIQVAAAAAFgEAJgcAGhIJLw0AGRkZGJijWRkhHR0nNBwAISEhMiAN7yEWJSUvOioaLi4uMDE3MjIyPzMsPzYxPz8/P///////////////////////////////////////////yH5BAEKAB8ALAAAAAAQABAAAAVw4AeM42eeKKmirOoAAcmKTv0SkRADKWAnBEpAMpnwTKMIYRkcEo1IBiBCqVZjxVcUoHhYKQ/AooQcFR5or+94AhgA3uroxRYhRl0ApME/sAENPAADABR9ZHoNdyIqAARHegCLjo+UkBSAkJopIjMoIQA7';

const iconGlassS = iconOpen + imgIconGlassS + imgClose;
const iconGlassF = iconOpen + imgIconGlassF + imgClose;
const iconGlassH = iconOpen + imgIconGlassH + imgClose;
const iconGlassU = iconOpen + imgIconGlassU + imgClose;
const iconGlassP = iconOpen + imgIconGlassP + imgClose;
const iconWheat = iconOpen + imgIconWheat + imgClose;
const iconBarley = iconOpen + imgIconBarley + imgClose;
const iconOlive = iconOpen + imgIconOlive + imgClose;
const iconDate = iconOpen + imgIconDate + imgClose;
const iconFig = iconOpen + imgIconFig + imgClose;
const iconPom = iconOpen + imgIconPom + imgClose;
const iconGrape = iconOpen + imgIconGrape + imgClose;
const iconSword = iconOpen + imgIconSword + imgClose;
const iconShield = iconOpen + imgIconShield + imgClose;
const iconRattata = iconOpen + imgIconRattata + imgClose;
const iconScroll = iconOpen + imgIconScroll + imgClose;
const iconTrophy = iconOpen + imgIconTrophy + imgClose;
const iconLog = iconOpen + imgIconLog + imgClose;
const iconBoard = iconOpen + imgIconBoard + imgClose;
const iconStone = iconOpen + imgIconStone + imgClose;
const iconOre = iconOpen + imgIconOre + imgClose;
const iconCopper = iconOpen + imgIconCopper + imgClose;
const iconSell = iconOpen + imgIconSell + imgClose;
const iconFarmer = iconOpen + imgStaffFarmer + imgClose;
const iconAbacus = iconOpen + imgStaffAbacus + imgClose;
const iconLogger = iconOpen + imgStaffLogger + imgClose;
const iconSawyer = iconOpen + imgStaffSawyer + imgClose;
const iconMason = iconOpen + imgStaffMason + imgClose;
const iconMiner = iconOpen + imgStaffMiner + imgClose;
const iconSmelter = iconOpen + imgStaffSmeltr + imgClose;

const imgButtonTill = 'R0lGODlhIAAQAKUpAAAAAEgjA1IsCVYvDFwuClovDVowDVwzEWA0D2I2EWM3EmM4EmQ4EmA6Gmw7F2s+GGw+GWk/GWs/GWw/GW1AGW5AGW5AGm9BG3BBG3FEH2dILndIIXNJJX9HH3lOLIBNJH1SLZFlRJRlQItrVJByWrRsRKCgyPzIfPn8/v///////////////////////////////////////////////////////////////////////////////////////////yH5BAEKAD8ALAAAAAAgABAAAAawwB/gRywaj8chkgg4KZdQYeeZLDmjUEBHRDUCrF2s0LENM8HiorbDdpiFaDGA3HE4EG/4Fau1I0IiIXlfe1kaKRohH4cag3FIABspACkbkpRcUYRhkZeVnht5egBUnSMpI5anqaF8JSYmSgAgG4ANDQcGtyK8okIAsUyAGRgkKSjHJBweFplZsLBDABcSEhARJCgoJBUPExQDb8DQT6QCAegEDAsKCQWkfKSc8vTwREEAOw==';
const imgButtonSeed = 'R0lGODlhIAAQAKU5AAAAAC87Ayc9DSc+ByY+DRtDAC89AChCABZIAB5GAB1JAB5KAABbAERsKCSCDCSDBmRwNdF9H9F9INF+IVeqT1KuNFCwPXiiWEi2L1+tSGasPmuqUGewPtaOPU64QB3MGSDKJteTRp6raZG2XPG3QvO9SfW/R/bETffFTffFU/jGTvnHTvjHUvnHT/rHTvvIT/rIVfzJT/jKW/nKXfzKUvjLYPfPcfbPdfjQc////////////////////////////yH5BAEKAD8ALAAAAAAgABAAAAahwJ9wSCwaiRvBccksfjIEISTQrA5BRZGhCQBYv91wjOb9NgZHQGzNjpWtl8Ov4lAI1e11ufsVago/AC+DgzhhXR0hfEwjC0QALpEuNmEREgARADcwb0IUHgxGkJIuXZmZEwAlkTOdQxYYDwh3K7W1NaaYACS2rkUcCbS2tTKHJrUtvkwAKs3Oz84sylwo1dbXKCnTVQAn3t/fi31Fh+XjRUEAOw==';
const imgButtonWater = 'R0lGODlhIAAQAIQcAAAAAIwAACcnQ5QpAKgkFEBAWElJSXpGE15QTZROCQBw/GxeW6pVAMBMLH9vaCCE/NBgPJOEekCU/ImJidx4SKaWj+iQXKqqqny8/OiwkMTExOHh4f///////////////yH5BAEKAB8ALAAAAAAgABAAAAXE4CeO5AeU44muK5CoAPyydDq8AMPEwB3XtN7lcjgwLgbhRsXi/WxO5wBweZYAjUejUWGafKZddXpZXhuWgprr7c1yAEHPKgI80gWMpNCItH1VOxhubRhqGHoKGH5XZHI7EoQpe4gSDwp9BF4mVAKDOwqSJg0FEpYKFhQODZsmF56Rl2NvCKQKqBkOFBCtrgK3ChsaE5IAtRIYEA4Wqb2uQ8ITw3N1CAsICBAUFppBBhPf0yYkMQSYBAHOKd/f6lFAdTwlIQA7';
const imgButtonHarvest = 'R0lGODlhIAAQAIQRAAAAADwQAGUTAGswAJQoAEBAWJk3AFBUcGRkhLxUAKBkPHR0nNBwAOiQAKCgyPzIfOjo8P///////////////////////////////////////////////////////////yH5BAEKAB8ALAAAAAAgABAAAAWd4AcA4miaX6qu7AooD4A4DmTby9ju7kH/wJqN5DoRVQAfcFEwHlOAhnT6FClzOp6oERh0u43qK1ZtRQMJQjptCLPGZF60MVCrBQaBVKyAxcxhXGsCDIWBYnBigXUJhIUMh2YPfX8uUmiOj3tikyMwinUGj4ZoZTpjKEgNeaOCBGUufpVQU1NoarBIMH2IJrcJubpxZnZrwUVaJScqIQA7';
const imgButtonPizza = 'R0lGODlhIAAQAIQYAAAAAB0pLmUuZxtGW5IuFL8lGJA1FbkteZk+o9E6YmZerPZIa9BcH29v2WOA6st+DNeFO0mnu9ukSPitQPuwQPixQ/yxQe3Odv///////////////////////////////yH5BAEKAB8ALAAAAAAgABAAAAW14CeOZFkCKGqOaUs6JyTL6nkIDqI0R+oIJ4ZQSAOQADgd7/GwWIAnSUFyIRAhRhEgtzs0nc4sq0CmEgwMmlbpBQPcR+lFXhVmAd3H2/Lu1z4AF3NkU1ViAEt9YHwHEYdydBJigF4Ti2GOAD1ahIJUk1pfYX0HCgCOWhcFgwWgWhYVly2ad1RUrSuAFLFuEY2Nh4OSua+yLixSuMRaC6NwccPLIgsJl3wiEQosrrkJgLPY2tIkIQA7';

const iconButtonTill = iconOpen + imgButtonTill + imgClose;
const iconButtonSeed = iconOpen + imgButtonSeed + imgClose;
const iconButtonWater = iconOpen + imgButtonWater + imgClose;
const iconButtonHarvest = iconOpen + imgButtonHarvest + imgClose;
const iconButtonPizza = iconOpen + imgButtonPizza + imgClose;

const imgFencePrimH = 'R0lGODlhEAAQAOMKAAAAAGwAAHwMDKoAAARwAKpVAAScANZ1EwTMAAD8AP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARdEBAJEDAgz2xmyhyQTFhwgcURglaGmENBASmIgUCcCQNOF6kDUKYDCgcDAQ8J4OWQTh9KShXIpMZh7potLJPJnCq3pG7NIGVmMMYZTOqdLBDAYCbhE5tC8m10IgARADs=';
const imgFencePrimV = 'R0lGODlhEAAQAOMKAAAAAGwAAHwMDKoAAARwAKpVAAScANZ1EwTMAAD8AP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARfEBAJEBgFUG1mAoY2HFQYgNoUCllwWhpyaldGc9OEAQK5G6dQiMcr7CiICSChxNhgNGXoqEKZaE6OpIO61Hqaj7Z28ZG2qCO4DDjpbGxRZkhb2eioyewYylkpOxYhHxEAOw==';
const imgFenceHoriz = 'R0lGODlhEAAQAOMLAAAAAGwAAARwAIBULKBkPAScAMiEUATMANCQWNycYAD8AMysAMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAAReEAgJDiggz1ymuhygTFgAUhgYmFZ2BGknBYp5TVNCuNplYhiCLnOatIjIZIYwYA6aTIITakggDNiEFotAJKrKsBgp3CGBF8ykDDCRkJYPGxiwxIhzyu92QoFwPBgfEQA7';
const imgFenceVert = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKBkPAScAATMANycYAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARaEAgJChgGUE3mAYSGaSAQlFQ4mhVZBKGYAccJTtMwXPNEnCFVZqWZFCa0C89FKjZXvlLItuRIOqXXcpe0Sk4jA1cQlG7FrChphdkFAxbhGh2a2FaqVCk3K30iADs=';
const imgFenceNW = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKBkPAScAATMANycYAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARbEAgJCiAgz0zmuRxwTFgAUhgYmFZWBGkqBId5TdMwAIOhXSYMpsfzySqbT2bJZOZ00KjuZKhar1VSc7uUmYiGHVMIIvZ2Ju2SWNwJA5ahL3MGTWzsIcpe7IoAEQA7';
const imgFenceNE = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKBkPAScAATMANycYAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARbEAgJCiAgz0zmuRxwTFgAUhgYmFZWBGkqBId5TdMwAIOhXSYMpsfzZSitY4boOuqeOyJRaKhWo76qJqUsdr/O7E4iBA19vZ2JpGSmzQHLObzDTGzMIQqUM4I+EQA7';
const imgFenceSW = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAAScALRsRATMAOioaAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARbEAgJCiAGUD3mAYOGaSAQlFQ4mhVZBKGYAccJThNBXPM0nCFVZqWZFCY0EpFEyu1GuuguZhhmqliDj7lkxgSnkWHnLYWqvN1py1SOzQFLjPsOTYC30m5r38iTEQA7';
const imgFenceSE = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKBkPAScAATMAOioaAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARZEAgJChgGUE3mAYSGaSAQlFQ4mhVZBKGYAccJTtMwXPNEnCFVZqWZWEhI5PGiazpHQYN0SpUWY8msljQy7CTBkpC3O/m2mF0wYMFyvaUJ8FbanUM4TZsGiAAAOw==';
const imgFenceV2W = 'R0lGODlhEAAQAOMLAAAAAGwAAARwAIBULKBkPAScAMiEUATMANCQWNycYAD8AMysAMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAARcEAgJDiAJUF2mAoWGaSAQlFQ4mhV5BKGYAcoJThNBXPNUnCFVZqWZWEgXnotEGDSZvVLBkEAYDDJSSBBDKnc0L3KUAHOlpRFmd/KNZ2tpwCKE7rYsZTpVys1KHxEAOw==';
const imgFenceV2E = 'R0lGODlhEAAQAOMLAAAAAGwAAARwAIBULKBkPAScAMiEUATMANCQWNycYAD8AMysAMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAARfEAgJDiAJUF2mAoWGaSAQlFQ4mhV5BKGYAcoJThNBXPNUnCFVZqWZHCY0knJZ1Ax0T8JgqiudDImswYBAJLC+FnMZE5wwaHJJyNudwqRVOhiwsGW70MS2UqVKOTMlHxEAOw==';
const imgHitchingPostH = 'R0lGODlhEAAQAOMKAAAAAGwAAARwAJZUJ6BkPAScAATMAOCWTeioaAD8AP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAAReEAgJDCggz1xmuhyQTFgAUhgYmFZmBGknBYl5TZM5taSd/cDfykIoGgdGwoCSQTifz4P04gtaSxkCIqgVMgfbDQAMwo5RmSV6Y/kAbJhCwBLjrOIUU5xE4WNwLiAfEQA7';
const imgHitchingPostV = 'R0lGODlhEAAQAOMKAAAAAGwAAARwAJZUJ6BkPAScAATMAOCWTeioaAD8AP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAAReEAgJKgh11jKTJVcyFRdAUsBwVAFmWEZwEmuImZMGEEhKFRjSadfjZQAGjYdYGfQsx+bTJzSVmFaSgGOtGI/Lrvc53GbHPmRp9Cn2WtnAC/N0XqoT+a1JYWtRLyQeEQA7';
const imgLawn = 'R0lGODlhEAAQAMIGAAAAAGwAAARwAAScAATMAAD8AMysAMysACH5BAEKAAcALAAAAAAQABAAAANVCKJAMCCuOFZ5FJQFA2YQFnhORARhpQSF9yyLt5ScB6XhN09b5pYRBkZAw9wALtxQBTnZJJpgSDBiBgXHG4TTQIKC3QvyOQg4UpTq0HvjwoyMyTmaAAA7';
const imgPlinth = 'R0lGODlhEAAQAIQVAAAAAAgICGwAACAgIDQ0NERERARwAFRUVGRkZAScAHR0dISEhATMAJiYmKioqAD8ALi4uMjIyNjY2Ozs7Pz8/MysAMysAMysAMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAB8ALAAAAAAQABAAAAWWIGAAJJmUozkiCjIc5DOeAlkMzuIoRQEINUYpEIFIIpOGRAF41ACngwQymUgoDcfA9EQsIhRKZBpBwEbCA8RxrFIUjgihRFI0IGPKhGJkQklmbXpsExBMJwAHCBGEE2NTDnQAOhIOcRJVVgaIAAOLDkqYVhQ1KQAKlAt7SCZQAkIAlowUJAInJyM1tzMivbe9KUInDwAhADs=';
const imgShrubs1 = 'R0lGODlhEAAQAMIGAAAAAGwAAARwAAScAATMAAD8AMysAMysACH5BAEKAAcALAAAAAAQABAAAANUCKLRA3DBsUoYDpT1ZgRdBxEQQIqLVFJKqa6eWM4L8c6gib8C2T7A2eBRGBYULBFwUDgePS1Q8fgQBJe/ge8HaARIT9jjlMnlqqsLJyBgnxkS8jEBADs=';
const imgShrubs2 = 'R0lGODlhEAAQAMIGAAAAAGwAAARwAAScAATMAAD8AMysAMysACH5BAEKAAcALAAAAAAQABAAAANVCKJAMCCuOFZ5FJQFA2YQFnhORAQhEwHesyzeND0elKarOW25UOaqkMBWsIkymkFRUZFEas4LcNVMDVc+LMYRyygj0tHnUeCFBiMjk8phtJ0TB+SSAAA7';
const imgShrubs3 = 'R0lGODlhEAAQAMIGAAAAAGwAAARwAAScAATMAAD8AMysAMysACH5BAEKAAcALAAAAAAQABAAAANTCKJAMCCuOFZ5FJQFA2YQNjkR4VFTpFaMlwqkB4VDiA0XMW3ZU1wqhgoWzHR6NRFIYZKogJ9ZMCSQ+qgkgOszJBRwp0fAYRt4pyrZg8Ng20aYSwIAOw==';
const imgShrubs4 = 'R0lGODlhEAAQAMIGAAAAAGwAAARwAAScAATMAAD8AMysAMysACH5BAEKAAcALAAAAAAQABAAAANQCKJAMCDKt8qLUDkQLsvYY0VEhy3iOCwssWxYB0Jz9KLiZcL2JPAhiCkzgOAWINnEk0GtJD+JEYr6FQaFI0xFUCkgBQJoMgtTLqwLCOUAAxIAOw==';
const imgTrees = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAACqAFX/Vf///yH5BAEKAAcALAAAAAAQABAAAANQCGCsouA5UExtEYKgircGxISa53XWFUrAkJlgSGgDaxYRi22Kq1GjXQswo8AqmYeAILnhNKziUBGMSIuuz0VEghxlsYz3NDPxlL3kEM1aAxIAOw==';
const imgForest = 'R0lGODlhEAAQAMIHAAAAAIhEAKpVAACPAACqACniKVX/Vf///yH5BAEKAAcALAAAAAAQABAAAANYCGClTiY2AOGM1SoyIO0EZGiKoAzAYHSqR2EMlX5bFTFomnPd6DcBUyMHgikCGiKq46C4ZinCRhJYTACCquj3amZDPtIipuNxDC/uae1gPY8mwBXbdgQBCQA7';
const imgBigTreeNW = 'R0lGODlhEAAQAMIHAAAAAARwAAScAGCcAATMAIDMAAD8AP///yH5BAEKAAcALAAAAAAQABAAAAM9CKFAICCuKJZ5MWsqt4/O503iBpXaQH4DygLtmUbt0C7ybGe517owQCGzyvwKP04waCsMbbkBUuoEIoeaBAA7';
const imgBigTreeNE = 'R0lGODlhEAAQAOMIAAAAABAUBARwAAScAGCcAATMAIDMAAD8AP///////////////////////////////yH5BAEKAAgALAAAAAAQABAAAARIEAgJChggzzx25sAxYV/5kZllruHJruhbTqpJyMCdEcYaxATeSve5EYu5IfJjCO6SOWO05zRQi7xerqndca3bbtKo8xSbY20EADs=';
const imgBigTreeNW2 = 'R0lGODlhEAAQAMIEAAAAAAScAGCcAIDMAP///////////////yH5BAEKAAQALAAAAAAQABAAAAM8CLIKumJENZyg88rmaO0T+HBdGV1laqrqhbIvyVpNTNeuLTLUfAMfGFDUcmw6gVtuUFkkQZII09eRBB0JADs=';
const imgBigTreeNE2 = 'R0lGODlhEAAQAMIFAAAAABAUBARwAGCcAIDMAP///////////yH5BAEKAAcALAAAAAAQABAAAAM3CLowvO5FNuZTLtoLCdlc413gyIFUI16BNBBQHKPhtFWY2mT6Doy2F0z0onxMwlQmIiB9VEVAAgA7';
const imgBigTreeSW = 'R0lGODlhEAAQAMIHAAAAAARwAAScAGCcAATMAIDMAAD8AP///yH5BAEKAAcALAAAAAAQABAAAANJCLowvO5FNqaq5TbNZSuF5YzNEILC9pFfFlwOaD3vST3p4w1vStwVVe5FGZkAqWQuguEhGb8SCPT85XKtJ/Ep6C28qRfRCjAAEgA7';
const imgBigTreeSE = 'R0lGODlhEAAQAMIHAAAAAARwAAScAGCcAATMAIDMAAD8AP///yH5BAEKAAcALAAAAAAQABAAAANTCLMKuqNEVdygc8nmaKlXVFncZX2AgGES1JHSZ14BQDzxSL1hF/4O1SyEmgQEjIxF5JM9IlDHsagRVW4kFW7yUqmwr1RQXBsLaqoamgwo31QGQAIAOw==';
const imgPineTree = 'R0lGODlhEAAQAOMIAAAAAEBYEARwAAScAGSEHATMAJS4LAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARakAAgQAFjUj0CCdiUHVUmAh56atcUBAbwgdPBVeArfdzpxbEUzVLRwFDAl8ZFCEo8qSXth5ShiqimE2hdGptViSlrIEgAzpJRE6xmWp7mzBDLYL3Uk50JBtgiADs=';
const imgDeadTree = 'R0lGODlhEAAQAOMJAAAAAFxAHARwAKBkPAScAMiEUATMAOioaAD8AMysAMysAMysAMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAARgEAgJDCAgz0wmulk4YZwGDmg4hJa6qiWArmsLFG42FO+9p6HP4IAbho7HwiGwK2FmSkBgWsBJOq7qIFAFfI5GVJW4Ejx7OiXZhKQpqzyQZSYbDzCYjYq3w41AEykWBHERADs=';
const imgBareTree = 'R0lGODlhEAAQAOMMAAAAAEdSAARwAJ5HFVJuALxeMQScANR2QQTMAOiSVoy6AAD8AP///////////////yH5BAEKAA8ALAAAAAAQABAAAARnEAgJkLqKAmDmIhcBYsTGAeAojtiGrCKmxBc6k2ygwqAejyjeaqYipoyEwK0n9BEOyVnAp9MVBodDcFNNEgrZxKEgMQCm3gAAnBCTKWg1mZ0dn6aBwjxcMJsnJmtjYFoTfhR6FRx2EQA7';
const imgFullTree = 'R0lGODlhEAAQAOMNAAAAABQbBCk3B0dSAARwAJ5HFVJuALxeMQScANR2QQTMAOiSVoy6AP///////////yH5BAEKAA8ALAAAAAAQABAAAAR1EBAJTGCYAoCmMJghMCNjbFxlMoHhkhizKZYLsiY4quD1Yq1QS6SzfTK2pOtzAxmJtstoNGAOmYaExTQYuLytQyGRqJwA3o/3QF4kDhIEutUaANgLN5zSNdjheGRvKV0DB4BtB3JyEyh3b2xlE4sUhwAKHIMRADs=';
const imgBarePalm = 'R0lGODlhEAAQAMIHAAAAAARwAFCEAAScAATMAHS0AAD8AMysACH5BAEKAAcALAAAAAAQABAAAANQCAMB7EAI1RZcSwLimijF5HwiYCjRFwJh+YwqC4tNSkYgWE7Sx+Y6nIjX6hkhjuIQctRAThyJbkiDTGHBB4mYAqFYzla3YC2tmOTRl7zgXBIAOw==';
const imgFullPalm = 'R0lGODlhEAAQAOMJAAAAAARwAFCEAAScAATMAHS0AMysAAD8AO/cddoODNoODNoODNoODNoODNoODNoODCH5BAEKAA8ALAAAAAAQABAAAARaEAwQALVACFknnpMGIFYlFMVmnZuBHGN2pkCqlsY617payawMCnXLaU61ITGDyGWEx6gIU4uuMNapJUeQEVUiF+arW15YG6QGJbHYtqJ1Yaxy3YTYNs/V/UQAADs=';
const imgBareFig = 'R0lGODlhEAAQAOMIAAAAAChAAARwAAScAGCcAATMAIDMAAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARGEAgJ6qjUzoO7xZcnFmJJgJNZYufpEa7ptrIBtPFd0TthwCmWbWeDVQI3Hytp1C2Vvt/EiMP9Pkzob3hJRWE4yqVLvAI4EQA7';
const imgFullFig = 'R0lGODlhEAAQAOMMAAAAAGYArmYWnihAAH4ttwRwAJpD2AScAGCcAATMAIDMAAD8AP///////////////yH5BAEKAA8ALAAAAAAQABAAAARiEBQJ6qnUzgWEwdhlgYHXfUACmlXQIuEElJ8HVwSKIQHs7r8TCHGD5TA0ogKQI84qJtdt1kTIfohlJdu7DQCII/NDDG+Pgaa0OSH2wG/lTxQ2HOvai4ynSH/eExd6W303HBEAOw==';
const imgBarePom = 'R0lGODlhEAAQAOMLAAAAAFxAHARwAKBkPAScAACqAMiEUATMAOioaAD8AFX/VcysAMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAARnEAgJjrqKAkBmKlcBYsTGAeAojth2rCKmxBc6Y7QiqDC4xyNUbzVTFVPHguDmG/4KBuVM8NvtBgGDQbixKgsDLcIwkJSo30kYMS5T0GrAWks+UQWDctiAGJTOJhtheVoUfxR5FRx1EQA7';
const imgFullPom = 'R0lGODlhEAAQAOMMAAAAAARwAOUijqBkPAScAACqAP9Vs8iEUATMAOioaAD8AFX/VcysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAAR0EAQJ0LpLTADIVMVVCNhCcB0QhkvhYobAIaPLxi+ptpgrkAGWzRULvliCgsH2UyZDy9aP59NIgUOXsXAoBFoBY7Ew+B1UI4mmOTgcEoeB5BT2egHtBFxOqU/keW5xKQEaA4BuCQMndCgcbYduFIwUhxUdgxEAOw==';
const imgStump = 'R0lGODlhEAAQAOMLAAAAAGwAAC4cA00yDgRwAKBkPAScAMiEUATMAOioaAD8AMysAMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAARkEBAJEDAgz2ymuhygTFgAUhgYmFaGBGknBYp5TZM5taSJxanTbjPKGF1HyulwQIFKxsNg0NTIMBapYNv8hChaQeJQkPyeAPIhMS47cenCmkm+BCxn+bpwzlHkBXpOGBOBFRd1EQA7';
const imgStumps = 'R0lGODlhEAAQAMIAAAAAAGwAAARwAKpVAAScAATMAAD8AAAAACH5BAEUAAcALAAAAAAQABAAAANFCCoKvO0ZQJpTYcBbbQCZ1YRCYHyjlkIECqoPBQlxLFp2+HLjyvwtVeEist0UQUcHA5PpkDjAxFJpDY3LCOhC2nVjT0UCADs=';
const imgRocks = 'R0lGODlhEAAQAOMOAAAAADsAFlQAAGwAAIAAANwAAANfAARwAFVVVQScAATMAP+BJ6qqqgD8AP///////yH5BAENAA8ALAAAAAAQABAAAARtEBwJFEggz5xmu1logANIjUOxAKOVKcOYpcsqdyxAEMCwqJwSBhAQ7HopTWUTIBhDGZmI2MwwHFEQRgpAIBxYCW6kKnS/YOjEVzN7r9ihj7b6Iq7KQYp2xoNQeiUZXiwYW1AsUhMThyMyIxgfEQA7';
const imgWell = 'R0lGODlhEAAQAIQQAAAAAAAAiAAApAAAwGwAAARwAAScAIiIiJCQkATMAJaWlp+fn6mpqbOzswD8AL+/v8ysAMysAMysAMysAMysAMysAMysAMysAMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKABAALAAAAAAQABAAAAVkIJAAhQgQQFqmBmoAL0y6p0zacbmKRHvqr5VBN0rVbr6YkbFIoW4JXaohCCiMRaPxMRAsDrWX6wl4NBgIFqEwlD2ZzuOxQJbT3TAUbaSXxUYOTjQtIzGGBD0yJTRrikiOK4U1IQA7';
const imgCobblestoneW = 'R0lGODlhEAAQAOMKAAAAAEAAAGgAAGwAAHwAAKAAALQAANwAAKpVAOhgAP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARZEKAghAkm51A6AJhxBGQZHOgAml03lhKggm0x2sH3qVx7j4iY5IQ6JE7Hj2m5HNZGleiF96RELblJ0RjSAFdMprJywVWHZM7NF+CludvkJB0mubGEPKHciQAAOw==';
const imgCobblestoneE = 'R0lGODlhEAAQAOMKAAAAAEAAAGgAAGwAAHwAAKAAALQAANwAAKpVAOhgAP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARbsJwghAkm5zAAOglmTEFpAsBgrkUrBR7gttM8Iej82rAnHcAQMAjDvVbI3gAU4KFwOICJh+h0jJMh85nKkZLX56tyeVW5Y0tzguqkmOTAFooyxZPiSZzAJ1xiEQA7';
const imgCobblestoneEdgeW = 'R0lGODlhEAAQAOMJAAAAAEAAAGgAAGwAAKAAALQAANwAAKpVAOhgAP///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARaEJwgRAkl50A6AFhhBGQZGOgAml03lhKggi0x2sH3qVx7j4eY5IQyIE7Hj2m5HNZGO5mM9wwcVMFBcFI05qSzIHP8DasGPVcuKI2lcWEhqJu8gmXj+DaaBUQAADs=';
const imgCobblestoneEdgeE = 'R0lGODlhEAAQAOMJAAAAAEAAAGgAAGwAAKAAALQAANwAAKpVAOhgAP///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARakJggRAkl5zDAMQhWTEFpAsBgrkQrBR7gttM8Hej82rAnGcAQMAjDvVbI3gAU4KFwOICJd+h0oNIh85lCoZKlK9eaat46sajXrEShB9DAFhtzS0/omJiOxUUAADs=';
const imgRoughPathL = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANXCAMBBQRIIWG11tDY2lIS1zzS0kCUEBhnVDUUuXkg5GJx9VknWVYRgcxCOLVCkWDkUwg0XBTDD+QkbCoCVytoeZw+PYCU8fxiXMWAa9AhXlPmlOQRkSYAADs=';
const imgRoughPathR = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANXCKJQQCCuAMYyL0KzRgwQE0IBVUUFqC2C6TET4zDRAI1h5nkLwGkAUyQoAQpmuyEJ+FjyMilKKMZsgRaQl+fWFLlEw4bvQyYEHCPgCxK7YYfbDAt18iQAADs=';
const imgPathHoriz = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANVCKJQQCCuSJZ5FJgFA2YQFnhOVARhpQSG9wzAAM9yHMF2dO96X+suWODn6xkBQd0PZ2MyfbOYrEbDQa4QTgMJ6jkuSM814EhRRleG+KFdaLOMLeSSAAA7';
const imgPathVert = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANWCKIz8M89sgwEcoIAyBMZJhZQEXjbww1ctyzNJRKc52XhUiyAEWID0oUnSjlsnc0P4xFQksXYw6IRtSIfJOHnIHEWN+wqUOsEhLLNKQnDiV7JraxsSQAAOw==';
const imgPathCross = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKpVAAScAACqAATMAAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARSEAg5BgAVX0Dm0dZlEUDAXVOoAsZmBERoYsMcW7i44asuhrSfTwdcmTKapG+VAwVnl2OQCRpxmrSWaUJKqgImEiFgwM0sYLFEuZpwr+xBAfCJAAA7';
const imgPathN2W = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKpVAAScAACqAATMAAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARaEAg5wKgWAzIPsB82EECwfYIYfsYHGAFxfaZVy5UKVkSdu5rKxKABhSotFy1omZBkxpnlKSGtdB1grlJwugTUJ8nbMnldLU/J9Ay0rPBA7DRhb7wT71jCOnkiADs=';
const imgPathN2WMountain = 'R0lGODlhEAAQAOMLAAAAAGgAAGwAANwAAGs2AIBCAwRwAKpVAAScAATMAAD8AP///////////////////yH5BAENAA8ALAAAAAAQABAAAARgEBh5wKm2gC2B2pgGEBMQIJsRbsQWBAOQCMi1CSwOVljLpTrezzSIpTAsE4xo5AiQQ47Q4iP9AlJLsvOK2Q4axKT0Q5lRJZhxguIklDE1ACF4t8mcUwdnHnc2Zh0lfhMRADs=';
const imgPathN2E = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKpVAAScAACqAATMAAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARaEAg5BrjWXjIP0NpHAAEwSuT1VYChGgGRqV9pThO7Yus4hirgBOD5GIM21DEFNDF3wc9kBNPpVCdBIFDYZSw+02hScpWmNFdx6yQEXKf4Nkxuo3Ft1BBOBEQAADs=';
const imgPathS2W = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANXCKJQQCCuSJZ5FJgFA2YQFnhOVARhpQSG9wwwMMiN9HjzHMFzuJS7CG0GlOloRs4rKDxCBKGmLqfZUZtCCWR7NTo8yhhyMMIQAqUjbLRlqIMLJWFqhVwSADs=';
const imgPathS2E = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANVCKJQQCCuSJZ5FJgFA2YQFnhOVARhpQSG9yyLN0XDANRQCtU0PW03m60XYTx4t56tEywmi5xnk/jhDZVLzFXokGmpgxGGEHBsbaMcQ+i0wcZIK+SSAAA7';
const imgPathV2W = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANSCKIz8AG4R5Z5b1IQyROaJBZYEXhiJKmE04iYSKhhFi9kVjd5ijk0gAf1i0k8Ao8r9npcRBqVTTEU7gCkyEJpiwwCHWGgZwRXFy+vaLG1GjeXBAA7';
const imgPathV2E = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANMCKIz8M89sgwEcoIAyBMZJhZQEXjixXXL0jzr63heFkILYNyOJOWi1UUTuIl+nUiEl0wJG68kgQlTJAccW44WIA0np6TLJmpJjUlLAgA7';
const imgPathH2N = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AMysACH5BAEKAAcALAAAAAAQABAAAANTCKIzAA0+QJaR7jkCAn1LJgLFVARE5kHDmjqwNsGjrGXsbcv46EWSoG0Uw+RWj1+OiNl8CJwFp+SRTkiAS8fDIQRKnA8lgPosuBTrwhpVPMBZQAIAOw==';
const imgPathH2S = 'R0lGODlhEAAQAOMIAAAAAGwAAARwAKpVAAScAACqAATMAAD8AMysAMysAMysAMysAMysAMysAMysAMysACH5BAEKAAgALAAAAAAQABAAAARYEAgJDCAgz0zmuRxwTFgAUhgYmFZmBGknBYd5DQOQ53rW4xleLygE6njCnw8JMBmZy6B0Nz02fdcdVakFEbZHi4kkHQ5W3oBhZ8utMJhJUTohf4fHgggQAQA7';
const imgGrapeTrellisFull = 'R0lGODlhEAAQAMIGAAAAAIQAhMgAzPwA/AiEAMBMLP///////yH5BAEKAAcALAAAAAAQABAAAANUCFHQQAQwAQNlI7w2oyzgx4BhKDnbiQICo0CR23iu5TAQinuB9vQPT0QQrBEfspeqoVmgbDLCgkQSVV3J20pTyKV2DmIkUDkOpGRCVMukOJkKlS8BADs=';
const imgGrapeTrellisEmpty = 'R0lGODlhEAAQAOMJAAAAAGwAAPwA/ARwAAiEAMBMLAScAATMAAD8AP///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARaEIwCwAGEAIqJGQQlVNoGGGWhUuvWqhVHxlU9mGSGG4G3GzWK7nATaoCBWY4EBIUqQOATisFJPlaqTLPqurwcWS0r2eiqpvOpivJVBL7M9jSp3EAGzp1WQQAiADs=';
const imgGrapeTrellisEdgeE = 'R0lGODlhEAAQAOMJAAAAAGwAAPwA/ARwAAiEAMBMLAScAATMAAD8AP///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARmEIwCCAEG6KExp1dFIFwWAEWaiuZ5dGiXSQFyYhcICMArYacMBTOzbHqfH0Zz8Wl4TMLAV8IRhiLicmAYXDWB4BGhUa0C3eVmhj1aXqccbFcBhK3RuSGcEdoJGUYZHBwxP149S2QRADs=';
const imgGrapeTrellisEdgeS = 'R0lGODlhEAAQAOMJAAAAAGwAAPwA/ARwAAiEAMBMLAScAATMAAD8AP///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARiEIACyAGGTFm1oAZHEGA1UWehrqyEci4MDJs0XpTQhZyRybfBCEHDAAKai4imm11GPWPApvEReDOjBMmjIaDdQMBAw16NIV82dJmWYRfEdpoOXHh4cTpLx7xpbyGAEncAchEAOw==';
const imgGrapeTrellisPostNW = 'R0lGODlhEAAQAOMKAAAAAGwAAJwQCPwA/ARwALQ4HAiEAMBMLAScAATMAP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARfEJADQALGAIoNIgY1VNoGIOWhUuvWqhVHxlUNckWmcUjgmYJDoUbJWAimzGFUKnVmpFAFccLIdKaOASmrBK+uFUw8ptWIZ8nGiKGxqxrUrzIwDJW1+MQr9HCQSFkAQREAOw==';
const imgGrapeTrellisPostNE = 'R0lGODlhEAAQAOMLAAAAAGwAAJwQCPwA/ARwALQ4HAiEAMBMLAScAATMAAD8AP///////////////////yH5BAEKAA8ALAAAAAAQABAAAARnEJADjAEIaKIxp1dlKFwWAEeaiuaZdChcEYFyYhZYDMArYacMRXAoaCyb3kdD5Il8GqcIYDSUcAbKMWvEWrOawIXYRapWN/KFkIl1kJbL6aLt8Ay8KnIqI2NiYhlwBn5uHAQXCSFEEQA7';
const imgGrapeTrellisPostSW = 'R0lGODlhEAAQAOMLAAAAAGwAAJwQCPwA/ARwALQ4HAiEAMBMLAScAATMAAD8AP///////////////////yH5BAEKAA8ALAAAAAAQABAAAARnEIADTALITFn1oJpkGBRSTRR6rGwrpdwbAwTJjRc1dBl3FKGbpTZ67UaWGHInKXQ4pkxARHIaejSMUPCjaky0wBTABVaiWkRGIyhOCdobQAHYWTGBCxhM7prgU1FwI2VpWXAACSFcEQA7';
const imgGrapeTrellisPostSE = 'R0lGODlhEAAQAOMLAAAAAGwAAJwQCPwA/ARwALQ4HAiEAMBMLAScAATMAAD8AP///////////////////yH5BAEKAA8ALAAAAAAQABAAAARtEJADQAKoSo0IoEaVKV4WfEdKiUBwXtpaGQYRKCdGGGABGLDSCRECCA4+1ibh+RkPgx8NpqFpAL4aZkvM0ZAimjaTCISOSetW4qqgQ4SMHEM8W0+la0gBiGYxARcZa08+GR5DOlJoXBtNCUVHEQA7';
const imgGateN = 'R0lGODlhEAAQAOMKAAAAAGoDAxNwFX5VMJ5lQB2cIcWFVSjMLuWpbjL8PP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARhEAgJDiAIUF1mAoWGaSAQlFQ4mhV5BKGYAckJThNBXPNUnCEVYjfTTCykAWKwc5F0OiVmNwoirsvMFNCLyWRNkphguPCagiBoxB6yfDzxufQ7rMbuUG7WKe3gBUobFiEfEQA7';
const imgGateM = 'R0lGODlhEAAQAOMLAAAAAGoDAxNwFX5VMKdWFJ5lQB2cIcWFVSjMLuWpbjL8PP///////////////////yH5BAEKAA8ALAAAAAAQABAAAARjEAg5DjAgz2ymAkVyAcqEBaNUWGOAIhmABEYoSYGCXgRAELZfr+fLEIPGmNK3iu16gV9sICIunSCRkWgdUotXaS849ElHNa1JBkCtbbBPG4UxBBDNlJ02mnwvaxNraTdsGB8RADs=';
const imgGateS = 'R0lGODlhEAAQAOMKAAAAAGoDAxNwFX5VMJ5lQB2cISjMLtmdZeWpbjL8PP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARiEAhJECggz1xmAtUFJBMWiNJgicFpZIARFKEWJOc1TSFxaJcTBuMjAH6wyQsGGhhhSxBhaiyCfsODVls9GJECDBNmHZu7z7BoeL0aTyWmL2MdBl5EpFs0yc1FRnEYPHoYHxEAOw==';
const imgSignpostW = 'R0lGODlhEAAQAOMLAAAAAGwAAARwAMBMLAScALRsRNx4SATMANycYAD8APzIfP///////////////////yH5BAEKAA8ALAAAAAAQABAAAARhEAgJDiAgz0xmuhyQTFgAZpkCBqaVWYYBKIgUJOa1xQNQFJqLCYMZGHo1DOWw+Rh7KBdqA3gGiSuUFSTonGbVY+YTQtHC0C4Ie7aaSKhUxkoMWJRxOmWo0xrgGBMbdyIAEQA7';
const imgSignpostE = 'R0lGODlhEAAQAOMLAAAAAGwAAARwAMBMLAScALRsRNx4SATMANycYAD8APzIfP///////////////////yH5BAEKAA8ALAAAAAAQABAAAARmEAgJDiAgz0xmulmWTFgAhpiSBaaVWYaRKQgQJOa1xQOgFAUKwYTBDGS0mqay+fR+SldoM0MESaBSCMqRdE4zYOjTXfkQtZ43e6IBDD0TNjQDHHvFgAUDvoMmRDohR1gYExt7AB8RADs=';
const imgLogCampNW = 'R0lGODlhEAAQAOMOAAAAAEgAAFwAAGwAAGoDA4AAAJAAAHwYAJwQCBNwFcBMLB2cISjMLjL8PP///////yH5BAEKAA8ALAAAAAAQABAAAASFECQJGFggz7xmuxzQBIEwECAQqOQiGAYwFEVFkMMyDAEh0IDCBEaY0XY7mAGzIP0KyoPCOSk0jgJSCaBQDACGBG4A6+4ytWbREOhmDlDYRJcdHDLdAIJ0+ZpobgAHSCA1BghfQQZQBQpVMlk0BTxPHDdgMHFaJhgJO3oDWQFIMykZp6inEQA7';
const imgLogCampN = 'R0lGODlhEAAQAIQXAAAAAEgAAFwAAGwAAGoDA4AAAJAAAJwQCHtNJBNwFXZRN3dRN3hRN3pRN2FgYGZfX8BMLGpoaB2cIYKBgYaBgYODgzL8PP///////////////////////////////////yH5BAEKAB8ALAAAAAAQABAAAAV9IBAABVlIJSAEo5QAljAURm2wAjAAUj2yuNpgVigICKyhg4ErFoe2AeU5HNiMQEHRBgzIiAWKY5GtWg2F5NlQdZYNE4eiGa2uzMPAgVWADAQCFQ8NTgVmEDpbBwNeNI47aIYCEYOGjU9YAlc+OIwBVRUOf2pDhqWmCGY2BiEAOw==';
const imgLogCampNE = 'R0lGODlhEAAQAIQRAAAAADgAAEgAAFwAAFgEAGwAAIAAAGgIAJAAAHwYAJwQCKgkFLQ4HBNwFcBMLB2cISjMLv///////////////////////////////////////////////////////////yH5BAEKAB8ALAAAAAAQABAAAAVzINCIAAQ8QDqmT5G+cAwYgFLcip3nwQ0EAYIQOCQSUgzGYplcHpbLVOJAnVYTWOoB4Og6El4v2AFA1GyFXHp3KwgEXG+yywj7DolUVU+dGVw5KTuCOQMuMog0aGtrPIdGBEZAQZEATUxKC09QUlpWeFifIQA7';
const imgLogCampW = 'R0lGODlhEAAQAIQYAAAAAEgAAFwAAGwAAIAAAJAAAEglAkwkAFY2EGw8DHxMGGBgYIhcLGxsbJxoDJhwQB2cIbCAEKiEWMSUGLiYcNisIMiwkOzIKP///////////////////////////////yH5BAEUAB8ALAAAAAAQABAAAAWMIHBEDmmW5SFZ4zFFbwwflEQdznRUF+/3qlskUtn1jrwgbgL8/WgjIvBArVJvuePBwuh6GayhT2V5mM+PpdZmUbjfrbEEoQDY71QG9aICIBoEAwMNAwdoVDYACwUNBQsDAFxfFhRuAQsECgQACmUIAGZtAAEKAQIDEJwJCQYAq3WCgpupd7UAAwW5BSEAOw==';
const imgLogCampM = 'R0lGODlhEAAQAIQcAAAAACQAAAAAiAAApAAAwEgAAFwAAGwAAIAAAJAAAJwQCE0qBENDQ2pDFFBQUHxMGExcKHZRN3pRN2BgYHhcXGxsbHx8fKiEWIyMjJycnKysrMiwkP///////////////yH5BAEUAB8ALAAAAAAQABAAAAWbIFAcCCKVSJIYRXtsokGqSZBp8nFcj6gUlUIAMyBoSAhAD3iYHAIWwSCDKTUAlYTzgWAEKhaMRXVZTAoPQ+lRc0wCBQOPWzqwWoGA7rUcHSgqeyhLMgktBRFxKSoAADose3sFPwUlFQYyFSiaOhUHnhMIWU6XEwmjTQlcEwarCBAFoRAIXCxsKhAqBbAyLjqTdr46CILEJJE0CSEAOw==';
const imgLogCampE = 'R0lGODlhEAAQAOMOAAAAADgAAEgAAFwAAFgEAGwAAIAAAGgIAJAAAHwYAJwQCKgkFLQ4HMBMLP///////yH5BAEKAA8ALAAAAAAQABAAAARqELTZEqW2gQKUKoUXeh9nIBLFMBNLGQNwJIA810d+gKhXkz8FAFYrGo+c0mjkCXAAgQBhGqVWCbXVYqtdHLZcQEI3ziXO5UNqkrlkADHRklQaoi6r1qVgkNFsfzoHAgJJQh0+iBsgfUeOEQA7';
const imgLogCampSW = 'R0lGODlhEAAQAOMLAAAAADgAAFgEAGwAAGgIAHwYAJwQCKgkFLQ4HBNwFcBMLP///////////////////yH5BAEKAA8ALAAAAAAQABAAAARkECRAaahYgoCK2tvFeYDBEYqBmQgKDMKBGgpBwfKHo4NSqDtdrFDolV7DQumU+lBYLmiKYFu2hLlBCxiLDpu/0nd58NCOpvLHRDAjKmxS2lx7BtTIbIHAzeV5NX0uG1cUVYQoEQA7';
const imgLogCampS = 'R0lGODlhEAAQAIQYAAAAAEgAAFwAAGwAAGoDA4AAAGgIAJAAAHwYAJwQCGtFLnlFLn5FLrQ4HBNwFWNcXGhcXHJcXMBMLB2cIX14eIl4eCjMLjL8PP///////////////////////////////yH5BAEKAB8ALAAAAAAQABAAAAWRYBAMhVCUxXFAlDICQyDEqirOw5AAQJDItwMjF1kkJIbeCCgrVE4DCWJHguYGtShgZxLUAo+W4MgDFAYCkeyqMyR5WNU1UlkMGoadUmmqHacABAMwAw4xCWFkOwQEEw5mBYaFCQ1lExMAj5gFZjpIZQAWABc8Dg4FEwMIeaCYABOMmFGsr6+ambgAb4+PobWkIQA7';
const imgLogCampSE = 'R0lGODlhEAAQAOMPAAAAAEgAAFwAAGwAAGoDA4AAAJAAAJwQCHNFLhNwFWhcXB2cIYR4eCjMLjL8PP///yH5BAEKAA8ALAAAAAAQABAAAAR7MIRRKrg34TVGEJQhGhJHAIUYHJIkiENzFULbdS5RANwwUpXbYHGitQSVUQvQ6FSCNZfsIipIOr/EkHf0tQILwQKQWCBuNeFA45gVEAKtLlEYZxYKxjDFCfCYAEUGCwUDFzJtgSdjRDJ2jwQEjGSBfwsaYxqYf5qHf20RADs=';
const imgRiverEndW = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARjEAwJDjAgz2wmuhyATEYRgBQGFEBwWtkRqJ0UIGxRTyd7sINHQVjC6IwPYTK5KUyGw+UyB5BalxdT9Loc6CoBKBdlmkGrSRZmDfxSSZmYaOVaXQIWGse1ppzWcBNwGIJyGB8RADs=';
const imgRiverEndE = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARhEAwJDjAgz2xmuRyATFgAUl9RmhZQHMF3eQFiXk/huZU7qKaHsDDkYSgHoXKYc1k+y2gxJa3qDFUlcQuIbpm5HzFHbmIsJurQgnAFTBhD4KByHeUBzGcCn4EmJH8UPRhtEQA7';
const imgRiverV = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAAROEAxQnr22AGB0xVgXcNvwfJd2bMARoKDGTTD4dGQNTsdE2RkWxQf7aAycQgB4khgmSCYAIUPqggNkh5kZQXUVZW7JDLxIJmZh8uV2EIAIADs=';
const imgRiverV2W = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARDsIzyqrUFAJMRvVcRbB/4UMWhlWaVAWzrjvIFDMBRYzCwo4bN7nQaGH4PAEIzPN1iMpGvhhpxhoFAkDP43XpQl7IQAQA7';
const imgRiverV2WMountain = 'R0lGODlhEAAQAMIHAAAAAGgAAGwAANwAAARwAKpVAP+BJ////yH5BAENAAcALAAAAAAQABAAAANBKCTX7gIMY8B6OIyhMTxBAIxa4IFjCpyHOrKPZcEQENGMMuOHQvCyFa1nYQwPhYkBxkgaNktYaQDonEqqkCekSgAAOw==';
const imgRiverV2E = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARFEBT5qrXTDHo7CIABcN1THBNwBGJRVoUxTcF7ibJ9ba6pP6OBq2eTfIg2ngpZCpF0sdCvonxeXKHARCeTCW0FpehXQAAiADs=';
const imgRiverH = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARDEAwJDjAgz2wmKkZxAcUkBpc4gCRWoIdYPDQ9lwESiEbt/8CgcEgsGo/IZHH1uzVTh8eMlLlhMCZqJ2ViYSmVEQIQAQA7';
const imgRiverHMountain = 'R0lGODlhEAAQAMIHAAAAAGgAAGwAANwAAARwAKpVAP+BJ////yH5BAENAAcALAAAAAAQABAAAANGCKS8wGAYowQRzIISxujVohVCEDxAFxyH0F4n+rA0Lc91ru987//AoNAnMRRyLhdL4jESWgcAZqMapKwYDGGhkpkajy8qAQA7';
const imgRiverHForest = 'R0lGODlhEAAQAOMLAAAAAGwAAARwAKpVAACPAAScAACqAATMACniKQD8AFX/Vf///////////////////yH5BAEKAA8ALAAAAAAQABAAAARXEAgJDiggz1xmGsVwAcMkBpcogCQ2oIc4PDQ9l0ESiEXt/8CgcEgsFjMZYsagUCAAQgCzyXzWkA8pc+vcNJ8AgsFAEDOlVCeSkGGvyWckSQRQIOnLuygCADs=';
const imgRiverH2N = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAAQ8sIzyqr2gmAEQvVYBBIDxgWB2otfKvnAsz3Rt359bZTyPZAFKQRM49EzAYAnAIZk2Sw7HUJIwAQAjVRQBADs=';
const imgRiverH2S = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAAQ7sAwwDzAAyHwnulkBIJNRBJc4FFgaoGJRPMHMrkOAzE/v9zzeb0gsGo/IpHLJbDptS5NpZdzELsfCJwIAOw==';
const imgRiverN2W = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARXEIwynr23ADNRwZgWACBYjIdWltq2mkbwvc+sHbRVHECfUwCN4fURSoaljWYAQPgwgRrT0BogddTgBsAbCVvcZi8wMgQDvFY2FjAvT1vOljmdS3o8szMCADs=';
const imgRiverN2WM = 'R0lGODlhEAAQAMICAAAAAGgAAGwAANwAAARwAKpVAP+BJ2wAACH5BAEUAAcALAAAAAAQABAAAANUCCR0/q8MY5iAsIQxNn6CEARAuQXfQZZsGhGl61yHoMgzHMsMYDepS0GhAGIUPyIAI4QtSgTjofBMwiYGJMtZEkw4FZhNSzgNAJuCFXZioUnctzsBADs=';
const imgRiverN2WRoad = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AP///yH5BAEKAAcALAAAAAAQABAAAANQCDJy/i8ANsyAkIGA8ZAT0HULII6QMqHOdYSsY5ocOwzh2V24hI8AAk6wMWE4GkLO1RKGCCAczmkqAAy07MeKC06Xik8wSFSavkoiEcANJQAAOw==';
const imgRiverN2E = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARTEBT5qq1TDnp7CYABAFhXHRJwBIV5tVvrdqIhz9UwIQNejZmbKwRg+R4xymRGBOgCtmEtJNI9hBsR8FBAjALGUAClFRVs0LOzSDRkU+/qWkX0RgAAOw==';
const imgRiverN2EM = 'R0lGODlhEAAQAMIAAAAAAGgAAGwAANwAAARwAKpVAP+BJwAAACH5BAEUAAcALAAAAAAQABAAAANQCAJ1/nAYo6A9coQBXLMaEIjadYwioHamM6LE1zrEQhCzoxaqkAMEhawVXPh4LaCqJoiZVsEbsPGRUFaKWlCRkSi3W9KGBMVuUKoAeqXGJgAAOw==';
const imgRiverS2W = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARQEAwJDjAgz2xGQRdQYMiEBaGYnqglPsUDd1KAoJesF1MhegaUbhiTaSrDZKzgAiSfPp/h+cQMplTZEuTM7kRYr1EohqGm4exI5fFOTCO1KgIAOw==';
const imgRiverS2WM = 'R0lGODlhEAAQAMIAAAAAAGgAAGwAANwAAARwAKpVAP+BJwAAACH5BAEUAAcALAAAAAAQABAAAANOCKS8wGAYI9aqysoRBijQJXBc0QVHZY1PAAhHfBTXRwgPIO+F/Fi7YA/zCBpBOILRaFEuY0PHk/dyTmORyXW2kVxPnk7PeMoBAqgg2pwAADs=';
const imgRiverS2E = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4QRwAFVV/6pVAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARWEAwJDjAgz2wmuhyATAUQgBQGlMF5lFWgdlKABMVTTBM+vZLc44GZwVaA4ZA0WhmEyqHGuYpGQTmodVndbrE6r7KA0YpJ4mjJgAt717vkm3cxWwuIQgQAOw==';
const imgRiverS2EM = 'R0lGODlhEAAQAMICAAAAAGgAAGwAANwAAARwAKpVAP+BJ2wAACH5BAEUAAcALAAAAAAQABAAAANSCKS8wGAY094iq4QxdgUCKATBA2ylco1mCxarIhytQ4RPeOzHImAA2IzHs4B8RCJjVkgmkU4nozmMHn4g605CqUYlHINg5t2hBid0FNUiOUmtBAA7';
const imgRiverS2ERoad = 'R0lGODlhEAAQAMIHAAAAAGwAAARwAKpVAAScAATMAAD8AP///yH5BAEKAAcALAAAAAAQABAAAANQCAMBBQRIIWG11tDV2lIS1xQfJxGUEBjBcHxSS5GA4B4vCMELjlclws33g0WGxEODcQAkk6CndBFRSn0MxZXo2foGwtbrSg0ItoMUxPsyDBIAOw==';
const imgWaterfall = 'R0lGODlhEAAQAOMJAAAAAAAAqqoAANwAAFVV//9VVQCqqv+BJ1X//////////////////////////////yH/C05FVFNDQVBFMi4wAwEAAAAh+QQJDQAPACwAAAAAEAAQAAAEWvCkEAihOB3AhwwIFmoDBwSeGBLHEJjn9VLWC8fXWVHnHes12y0Y5MEwNJnQJKTxlj3ns8dMIqEcTBFjEhROCMIkEaYUBLAzgBBGALxpdIK9FhMMPotez/FGAAAh+QQJDQAPACwAAAAAEAAQAAAEVvCkQAm96YA9ZCAWdgwbdwTIlY5lWSEIEMjtNl+UPNc2Xu01EE4ItIV0IFsw9CvSAEymU1chuHhUmfW5ERSgoHAyUBC4EgSEBZ0ulpFolJeHIkzUW28EACH5BAkNAA8ALAAAAAAQABAAAARX8CRCQqA2pAP6kNllbUPnHQGCUEhwlKYphrEMXFV21zIW7LzdTPer/UJFnuVmyQWHAEowmmtWgDEMk8A0CQqWVSJFSNwKgtiKRama0OQKQZzshCbjzDcCACH5BAkNAA8ALAAAAAAQABAAAARU8CQSaiU0HcCHJEiFIIQ2cN1BBRh7nCiHAWxAx7HFrjiqX5VejnALCnc6IQdpa+KaPGPO97Mpf7OYoECzkRIWQEHg+1JIICtnjMFMZtLuJDQCB7YRADs=';
const imgSawmillNW = 'R0lGODlhEAAQAIQAAAAAABAGACQAACcWADgUAEwkAEgpADQwLF8uEEQ8OGc6AERERGNAGXo7B3VDHxNwFYxNFpFRDFxwOHxkWJxoDKtpIR2cIYCAgLCAEMSUGCjMLqamptisIDL8POzIKAAAACH5BAEUAB8ALAAAAAAQABAAAAWVIPCIJAMMgGk+Y0cSAPHAI2ytQa7vAcFojwAFMywSB4uAKIAZYDLPKDKxiACEGYOHs+0iBTEmhqPocjmDhMCE3ZbP23RKfDYM7vfLgk3JeC8bCQkTExdhGGNxCxcTghsTDBZtXGkLCJeXDxp0igkIDhsXCBVBfV4Hlg0IEA4WBEwDZwMHnhANoRWSAxsDBR6VCBIOnyEAOw==';
const imgSawmillNE = 'R0lGODlhEAAQAIQcAAAAAA4AAGAAAGUAAGwAAGoDA5wQCEQ8OKgkFGw8DERERGNAGaw1GlBQULQ4HHxMGBNwFVVV/6pVAIhcLMBMLKdWFNBgPB2cISjMLuiQXDL8PNjs/P///////////////yH/C05FVFNDQVBFMi4wAwEAAAAh+QQJFAAfACwAAAAAEAAQAAAFjiCQAAbgOOSnVgBwTQACDINTRupVFcAzyS1E6RNhYVoPVEtpwH1YrgSKwbCRnB8dIKA0kShYCADDbXlTK7OCAhAIKIabJH05JCyATGbTIj4BEBcKC3wtG3g4EQAaLA0AC3hmYGmBjwAqKhFYTzwLAAUVRE5FnC5mmpiZHwWgPZ+ZiZgVYhALPKmYODoaACEAIfkECRQAHwAsAAAAABAAEAAABYwgkAAGMAxk9H0VAFwTgLiAU37qVRXAM82umUHVwrgejprDllq1XokkgZA0DFcfHSCQdHUp2A8EgOHSqlcWTUEBWCyU0lDifB0SG5qlGWlBLgoLbS4be1gAGi0NAAt7UwAUKmp/jAA4lxGSLDwLAAUVYTigOy80OJmhBZ89nqGXLGMQCzwrKpI5FRoAIQAh+QQJFAAfACwAAAAAEAAQAAAFiiCQAAZgkl/0VeY1AcjpGIb6XVUBPFPsOLHaCoAxPRwAAmFmsrEAlwTShKR9rjdWYAqoUmwfCHHb/ZWEQ5OCcmKTIpIr63JIbE6bEpYFuSgWd0oWFgA2ABosDQALhD8AX3IAfYsAWFhgOZQFFRGdnSsrOhcnllc2BZs7AAUpnqYrYhALOqVgOBoAIQAh+QQJFAAfACwAAAAAEAAQAAAFiCCQAAZgktH3VeY1AQjgzGX6XVUBPFNMEDFAioUxPRwnZEm1aiWQJqjBdmMFkDOHwUChQgCYa9I0VbFMCspJvZSYAZdDYgP4WUw2FuSiWNwtFht3NgAaLA0AficAXW97iQAfEZOTTCs6CwAFFZaSnDlwJ5KUKikFmzuanVQVXxALOqWkKjgaACEAOw==';
const imgSawmillSW = 'R0lGODlhEAAQAKUAAAAAAGoDA0sNAUwkAGQrB0Q0LF8uEG03EGU7IkRERGNAGXo7B3VDH3dFIbQ4HExcKG5RMRNwFYxNFpFRDGZiYIhcLFxwOKtpIdBgPB2cIYCAgJCQkCjMLracj6ampq+vrzL8PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEUAD8ALAAAAAAQABAAAAacQIBC8OkUB4ME5WAwMA4KgIHwKRSMmwSAwXBmuNOO1QjAACROBUfSPTAPZYe5G+k6DQhPGWM2M7cLbAZxDmWGCl1deRoAhYVzAIGBiYOFAGcGiE6LBwwWl4VPF1sWDQhgDI18WwoTgpyEhkIWgYJxfVIKEF8GDU4LhqEPABkVHF1SqY0AAQgKGQARUgAQUhGDiNHE21HVas8AIABBADs=';
const imgSawmillSE = 'R0lGODlhEAAQAIQJAAAAAGoDAysa3GNAGbQ4HHxMGExcKBNwFZFRDFlR+ohcLKdWFFxwOKtpIdBgPB2cISjMLllR+llR+llR+llR+llR+llR+llR+llR+llR+llR+llR+llR+llR+llR+llR+iH/C05FVFNDQVBFMi4wAwEAAAAh+QQJIQAfACwAAAAAEAAQAAAFgOCAAMtnnuYCAI9aomgbAIMCnARxqtCKDIFFguBwABKp1UNUGhqRyE+LxhB+Esfr6QCAFAwKa9SRXA0WjVWT6ECqHozGInDCEo6qw1IxuNWzXSoGIyUOOloJeUskV0UEUCkzfC1YWR8lcywkdFdRJwFBmgdaJp4LXFwtpZ4mLT0hACH5BAkhAB8ALAAAAAAQABAAAAWA4IAAy/clqPktAPCw5akm5hsAgwLIKL0CkBZiECglCASAj+USGQkOpezzwjEWtITUoToACwZFjOYo/1qDRaMVg3J/D0ZjEeABkgnW4ZEb7GZSQCwGI1gEPksAe35GDocqJnQACgMvWlJ5KzcPJHUnPioBRS6KU1mRXl4vkKwvQSEAIfkECSEAHwAsAAAAABAAEAAABYLggADLZ57mAgCPWqJoGwCDApwEcarQigyBRYLgcAASqdVDVBoakchPi8YQfhLH6+kAgBQMCivUkVwNFo1Vk+hAqh6MxiJwwhKOqsNSMbhpsUhdKgYjJQ4EUFd5SyRXRYhaH3MAfC1YWZKSMw8kdFdRJwFBLAAHkacLXFwtdaBSCz0hACH5BAkhAB8ALAAAAAAQABAAAAV+4IAAy2ee5gIAj1qaBIG2ATAoAOw4pwqtiEGgRNjlUquHqJQoAhIf6KdlY7wSzxP0AIAUDIprVKpaDRaNFTNGZjEai4AWQICqDkrFIOeQYaFdKgYjJTt+SHh7TIYoH3EAei1YWQkljw8kcmNaHwFDLAAHUiajC1xcLZucLT8hADs=';
const imgMountain = 'R0lGODlhEAAQAMIEAAAAAGgAANwAAP+BJ////////////////yH5BAEUAAQALAAAAAAQABAAAANCCBoy+q8NtliATFAIwu1fp3EL+QyOCQksmi4tqLHxc3mdIsh7qco5jKQHCnl6AZTGGFJJTBlHo1YhWnYbkgXTrEASADs=';
const imgMountainPeak = 'R0lGODlhEAAQAMIHAAAAACIAAEMAAGgAALMAANwAAP+BJ////yH5BAEUAAcALAAAAAAQABAAAANlCDpT+m8YAwIcSqziQjGahi2a8k2CBYRPKp2FWkbcaxTpCjRGwDAFoOfSYKQEAp6jlBwkK4Fmj+RUfQJRie9XCnJ6ydguB/xxwgHDaOCzYBsBwk1daSneQV8QEl2wH3oYGhZ/CgkAOw==';
const imgMountainFoothillsW = 'R0lGODlhEAAQAOMAAAAAAGgAAGwAANwAAARwAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEUAAgALAAAAAAQABAAAARXEBAJDCggz0zPzRgxbQFGmZMgAEEwVIJZjAKxatQ6ctKKyaTBS7M5kFwsIW+z4TkxN2aTNcEYVBRK64VSzbK83yWUcQ2rPMs2yRVYUE4W2XfZNcU7yi4CADs=';
const imgMountainFoothillsWRoad = 'R0lGODlhEAAQAOMIAAAAAGgAAGwAANwAAARwAKpVAAScAATMAP///////////////////////////////yH5BAEKAAgALAAAAAAQABAAAARaEBQgwAEGaKJ7zxhAcBwQVJO0UVUQDGqFkQIhe5Sod7aaGqUXbKVJmV6mwVBFxHVkstLIE2AeBBXpcZCaYIE7nMyQCSo7KdnFBRPKJqASVVKpZMAkzVunzUcAADs=';
const imgMountainFoothillsM = 'R0lGODlhEAAQAMIGAAAAAGgAAAI3ANwAAANZAP+BJ////////yH5BAENAAcALAAAAAAQABAAAAM0CDEF/tAtNcYjMeQJA49gJIRkuFilMnko1aQU1TqjtM0qDsPL+zoYyapS2YA0rEwxdco5EgA7';
const imgMountainFoothillsE = 'R0lGODlhEAAQAOMAAAAAAGgAAGwAANwAAARwAAScAATMAP+BJwD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEUAA8ALAAAAAAQABAAAARREIRxgCUWYFumHENGYAUgZFngmaeBai8hyNxlwvFp41+476pQMEV5GQmeiU+DaZZQQxviKOIRnrARrOQ6hTZSi+BUAFVxhfEzSiJlYzhXaRoBADs=';
const imgBridgePrim = 'R0lGODlhEAAQAOMAAAAAAGwAACMj4Xw+AARwAFVVVVVV/6pVAAScAMhvFQTMAKqqqgD8ANHR0QAAAAAAACH5BAEUAA8ALAAAAAAQABAAAARbEBBAq61oljWO9wmwUQiwNF0ydIfZVIq4XDIVBNSZri4QPMDHhuWRBYMn2ukIHB4GidaG+dB9Qkvm6DJlWhNR1xHnVElnOFzvkvRRnM9iDVCyQqGt5KREuzAAEQA7';
const imgBridgeNew = 'R0lGODlhEAAQAOMKAAAAAAAAqjcbADYzM3w+AFVVVVVV/6pVAMhvFaqqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARlEICUygEXgUJLAYriHUIGioMUekRJEKcnUUOhXQdXfWt9Yz3AozMYHF5A0eexKhgxAgJt2TSWAIjgMFEstG7anhf7mgrFGrBSSBykMURhzI3MNWcV95XU+Ux2OAIacTMigTAcShEAOw==';
const imgEarth = 'R0lGODlhEAAQAMIGAEgAAFwAAGwAAIAAAJAAAJwQCP///////yH5BAEKAAcALAAAAAAQABAAAANXCCDTTiSoJQQIDEKF69jFdEFeIylVxTlDpTFNKmjDeTWa2LGC3bmEAWpGKgk5M9HtlZLIVCFALIBhxZolQsES+HgzU2nsFquNIB/CBDO0bE+yVskj0xASADs=';
const imgEarth2 = 'R0lGODlhEAAQAOMJACQAAEgAAFwAAGwAAIAAAJAAAJwQCKgkFLQ4HP///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARskBRChgDk1CBoJQBXFMcxBqgwoMewGhbquhVd1+54BhYAdJJCSObi/Cing4p26pREBRtBgApkECuOBzTQDTyz7khZBRYE1LK0Qr0AorkJUScoAdWFaoB0+MFdVGFFThQWaEBgA3Y2F20SjwMRADs=';
const imgEarth3 = 'R0lGODlhEAAQAOMKACQAADgAAEgAAFwAAGwAAIAAAJAAAJwQCKgkFLQ4HP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAAR7UAhiDCn4mBMk+VNBGcUhGNNXVAeASAGFDMRxSVM4DIJdgpXX6kMZGBArHEGwWhkGgFxh0CR2CLvLwOehrA47DDaKLeCYE5dogkp9LGcRJgZIsMBE2m8joSa8F0ECNFRTS00HIgMBR4FPHXIBGDxmPBM0JE9iF0RvGwYRADs=';
const imgEarth4 = 'R0lGODlhEAAQAOMJACQAAEgAAFwAAGwAAIAAAJAAAJwQCKgkFLQ4HP///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARsUAhSigh4ZMIFEAUmDCQZjEQAHEdFcsQaGMFQsCfcYXX3kZUC0MWxEA68yUU0WLJKJV3L9SoWUiqeiFJJ2qAmwwp60XGgBIlkYNBMrtcm4EMJwJoTXx4Et8xHTUctbUuBB1hHCD1QNy1RBAMRADs=';
const imgEarthNW = 'R0lGODlhEAAQAOMAAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAATMAAD8ANjY2AAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARsEBgJEDggz3xmuhyQTMcwgBSGZghBVGhHJS8hb5SVhuqhFqoJYjMKZWBHCqhgMYEwqtMhcAkICtgCCYkyCBIBqiog3b4Mr4MCihELaoTtqTL4ZF3ACtn0AoStA1MbYSckJgMEgYEUBocDWQURADs=';
const imgEarthN = 'R0lGODlhEAAQAOMAAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAAR8EBgJEDggz3xmuhyQTBgwHEVBhlmVEdYRnJP3doOR5tXAowWCABMYElKywARhGIgIwmTR5wOoApfcrnkgSE2FgPhwGKZUVMRgdvAZBOKAdyAQ+I4pKMGgPxEGKUVCRwNQBSh0AQiGZ4xxgIeBYnZiVJVwM1R/d5ubPkAFEQA7';
const imgEarthNE = 'R0lGODlhEAAQAOMAAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAHR0dATMAAD8AMjIyAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAAR/EBgJEjggz3ymuhygTFhIlVhRDFZmHcHQUR83GeowtSQnwIHDgaAq7QwDwojwywQqGYDKEAjqADEkBhgQDApA4a9gOAxkrCpaIqgR3gKkDDckSA7eZGxFxbckYCsZbwoqUgQHOQkCAAgIiWBVGGpnAQgLcUEUcjIEZ54sMiIAEQA7';
const imgEarthW = 'R0lGODlhEAAQAOMKAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAATMAAD8AP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAAR+EBgJEDmkFBP6mMmlHRonDOgBUEd3CAVqERXQDsdkDsSlAzEaApUa2VaYTKHVCQgMvISBIGA6iQMgJ4AyaIg9mupkC5QFGe9EhTADsIJE50iA4rwY7FF1IHFeCAUEH0srAgFDA188GS0INkUFXAMnLRMDAQeULmB7FHZDGhoRADs=';
const imgEarthE = 'R0lGODlhEAAQAOMKAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAATMAAD8AP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAAR2kJAh5SGlmMDvCMKRZUk3DAA2cpyQDQiRCuxwGF+QVMf5DgYC4oQTzVgCySqwGVIqNBbAOchsAsQf4HJAVlmcLcDQO8HMZVQCkJoQsLbMRUae2LC9jiAmUxUGNBJVI1sZNC5ycgFiHDgfAndwBmNmghQoQyJrEQA7';
const imgEarthSW = 'R0lGODlhEAAQAOMNAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAHR0dATMAOiQXAD8ANjY2P///////////yH5BAEKAA8ALAAAAAAQABAAAAR/EBgJEjmkFBH6mQtwKMVRLEZwDOwBSGUXCNpgEZUYDN/QLYTgB1YYGAgJlmGgKYleB4zmIJtNACiCwNURJFmvicqYKLaCTwCTqjpsC4bhKtHhKcOBJ+H6cSIQcU8uURQuCAxBEy4DHAlYLxoXT44uIlNQT1eCKS4TipkUOS4hEQA7';
const imgEarthS = 'R0lGODlhEAAQAOMKAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAATMAAD8AP///////////////////////yH5BAEKAA8ALAAAAAAQABAAAAR2kEgjayki6FDJ/YURCEPpfdt4mVKmDYcxaEJXGitF3MNHCAeaBLURyDouWqlUABA0hx6iMJAdJIEDgFQIQoGhGCBaCACWJUEC4LwSZDCc+32tZ7WGMQAhAeQPVAIAZglNF3paCFlsgF2MenmPYnh+iJWRCHprEQA7';
const imgEarthSE = 'R0lGODlhEAAQAOMMAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScANBgPATMAAD8ANjY2P///////////////yH5BAEKAA8ALAAAAAAQABAAAAR3kJhhiLWlmMDPVEJWHIWyHcMAEOLYhQWQAKvABYNHBYoFoBREgUJIpAw/2kFw4AgwLgDSOLgQchzajJYhBH6URAx5SDYFgxEgcCiXDR7wNikFKGg/C/JHxsPzbmVKMn4/Q3gLd3hmMmyDdG51g3FvdZFIezNldxEAOw==';
const imgEarthSE2 = 'R0lGODlhEAAQAOMAAAAAAEgAAFwAAGwAAIAAAJAAAARwAAScAATMAAD8AAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAA8ALAAAAAAQABAAAARskMhJDinAgBDsPEVYJAFwAMBwiQd3CCGAAJLQBcNg6EFCmzmRioDI7UAFgo0jkIRanEBxWIsGBLlg0qUL6ahRbMH6Al2yAxtatwxMBFiViEJRF3gvunApGcxXUVmAXBxZV2mFgoIEOYxZIgURADs=';
const imgQuarryW = 'R0lGODlhEAAQAOMAAAAAACMAADcBAUYBAVoCAmgAAH0FBY0GBtwAAJkVD6UnGf+BJwAAAAAAAAAAAAAAACH5BAEUAA8ALAAAAAAQABAAAARrEMiClry3LjppwVTCYUDxlUWSlMhJqmpAAosFB7icIZp9W6YWj7fI4VAlCQKFUAASAdfsqQLoLiGVQkFIEK6pxJZA7nqdJkmZQOUqEhYq4K0tJw4VMnUdoBtYbAFkMnQHAn8obBIwBwMHjxEAOw==';
const imgQuarryN = 'R0lGODlhEAAQAOMAAAAAAEYBAVoCAmgAAGoDA30FBY0GBtwAAKUnGbE6Iv+BJwAAAAAAAAAAAAAAAAAAACH5BAEUAA8ALAAAAAAQABAAAARdEMhxlLy3KjrpwNTBYcDwlWcpkhOLKZaLHTQcqxUq0jWIlpKDTtiS6UoCgIBgSCQM0CTqIzAIrtiqwXSxMp9Qq1QTzV6ZggrtDIYSrlBOefmuwg2AMBQRKBQCelARADs=';
const imgQuarryE1 = 'R0lGODlhEAAQAOMAAAAAACMAAEYBAVoCAmgAANwAAJkVD/+BJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEUAAgALAAAAAAQABAAAARaEEhSjry3HjopwVTBYQDxlWcpkhMWkIfFAkIwDEUey2phGwZRTgcCGAZASQGVuyCPSRCHAAUMKLFlh3oDaglZk+T5NMwq3WMZaKkUgOTbbSIkA48Xzzhu7mAiADs=';
const imgQuarryE2 = 'R0lGODlhEAAQAOMAAAAAACMAAEYBAVoCAmgAAGoDA9wAAJkVD6UnGf+BJwAAAAAAAAAAAAAAAAAAAAAAACH5BAEUAA8ALAAAAAAQABAAAARo8IxxJLj4kkRtzoRhCBRmJCBxFeQBnAkKqFhQFHMCy1kQzKLNiRZK/AoHgtIQMoAAhQ6xmZlIKq5ZCEO4SgYi1FJb6RjAw+2lY00umU6oANvJbk8IFruuYSLyLWUDGjQIAgIsJIMaGREAOw==';
const imgQuarryE3 = 'R0lGODlhEAAQAIQTAAAAABYAAB4AACQAAC0AADMAAEgAAFwAAGwAAIAAAJAAAGAwAARwAGBgYAScALCAEATMAMSUGAD8AP///////////////////////////////////////////////////yH5BAEUAB8ALAAAAAAQABAAAAWLYJIgougkCgAY7IkYh6PMKbAACAKgNGuoi0dktzv4EA6GTdhQOXKzHCOhijSuqoSRdRDNVE0AJEcoEwSB9E8FVTBY0qju5DCkBYOCXQ1wABhPOQhjOYE6ElkjCQaFMydUgCNIjE8tBxAiOzQIRiIINCkyCkYHNKJ1fSsGDDkwk4wISqw5niQ6YzKIIQA7';
const imgQuarryBuildings = 'R0lGODlhEAAQAKUhAAAAABYAAB4AACMAACgAADABATcBAToBAUMBAUYBAUkFA1oCAmoDA08OB30FBY0GBpkVDzg0NGAwAKUnGWw8DLE6InxMGIhUCHddGmBgYIhcLLCAEKiEWKKMKMSUGLiYcOzIKP///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////yH5BAEUAD8ALAAAAAAQABAAAAahwESC8XgwHEgBYAkYMhhDB/FxWEo2gMOxCBlMhAHA1RMBCBzCYZQA2JAzZWjx6zAiAJEMPoMQ+AsCBwhSbBFlTIhLAUNseksYHpGRHAAIEAtsUgAeHSCeIByUB0NeDpsgnZ6hlVBppxcAGrKUCpdPDK8fABa8WRVEmhoXF7qIBFB1prIaug0FgggLBglSVRTXWQkLQgwLwAhsTAcFt1MQD0EAOw==';
const imgMineshaft = 'R0lGODlhEAAQAOMJAAAAADsAAGgAAFYLC9wAAG02AIBPHqpVAP+BJ////////////////////////////yH5BAENAA8ALAAAAAAQABAAAARSEEhBkLy3IjqpwBTBYYDwlWcpkhPrvsYRG7R8hVIBBDugk6kDYDAcCF9C4u54uxh4gygThTnwAlihiWUoRrsSzUWIDVkqhApopOKwgatbSo6JAAA7';

const tileFencePrimH = imgOpen + imgFencePrimH + imgClose;
const tileFencePrimV = imgOpen + imgFencePrimV + imgClose;
const tileFenceH = imgOpen + imgFenceHoriz + imgClose;
const tileFenceV = imgOpen + imgFenceVert + imgClose;
const tileFenceNW = imgOpen + imgFenceNW + imgClose;
const tileFenceNE = imgOpen + imgFenceNE + imgClose;
const tileFenceSW = imgOpen + imgFenceSW + imgClose;
const tileFenceSE = imgOpen + imgFenceSE + imgClose;
const tileFenceV2W = imgOpen + imgFenceV2W + imgClose;
const tileFenceV2E = imgOpen + imgFenceV2E + imgClose;
const tileHitchingPostH = imgOpen + imgHitchingPostH + imgClose;
const tileHitchingPostV = imgOpen + imgHitchingPostV + imgClose;
const tileLawn = imgOpen + imgLawn + imgClose;
const tilePlinth = imgOpen + imgPlinth + imgClose;
const tileShrubs1 = imgOpen + imgShrubs1 + imgClose;
const tileShrubs2 = imgOpen + imgShrubs2 + imgClose;
const tileShrubs3 = imgOpen + imgShrubs3 + imgClose;
const tileShrubs4 = imgOpen + imgShrubs4 + imgClose;
const tileTrees = imgOpen + imgTrees + imgClose;
const tileForest = imgOpen + imgForest + imgClose;
const tileBigTreeNW = imgOpen + imgBigTreeNW + imgClose;
const tileBigTreeNE = imgOpen + imgBigTreeNE + imgClose;
const tileBigTreeNW2 = imgOpen + imgBigTreeNW2 + imgClose;
const tileBigTreeNE2 = imgOpen + imgBigTreeNE2 + imgClose;
const tileBigTreeSW = imgOpen + imgBigTreeSW + imgClose;
const tileBigTreeSE = imgOpen + imgBigTreeSE + imgClose;
const tilePineTree = imgOpen + imgPineTree + imgClose;
const tileDeadTree = imgOpen + imgDeadTree + imgClose;
const tileBareTree = imgOpen + imgBareTree + imgClose;
const tileFullTree = imgOpen + imgFullTree + imgClose;
const tileBarePalm = imgOpen + imgBarePalm + imgClose;
const tileFullPalm = imgOpen + imgFullPalm + imgClose;
const tileBareFig = imgOpen + imgBareFig + imgClose;
const tileFullFig = imgOpen + imgFullFig + imgClose;
const tileBarePom = imgOpen + imgBarePom + imgClose;
const tileFullPom = imgOpen + imgFullPom + imgClose;
const tileStump = imgOpen + imgStump + imgClose;
const tileStumps = imgOpen + imgStumps + imgClose;
const tileRocks = imgOpen + imgRocks + imgClose;
const tileWell = imgOpen + imgWell + imgClose;
const tileCobblestoneW = imgOpen + imgCobblestoneW + imgClose;
const tileCobblestoneE = imgOpen + imgCobblestoneE + imgClose;
const tileCobblestoneEdgeW = imgOpen + imgCobblestoneEdgeW + imgClose;
const tileCobblestoneEdgeE = imgOpen + imgCobblestoneEdgeE + imgClose;
const tileRoughPathL = imgOpen + imgRoughPathL + imgClose;
const tileRoughPathR = imgOpen + imgRoughPathR + imgClose;
const tilePathH = imgOpen + imgPathHoriz + imgClose;
const tilePathV = imgOpen + imgPathVert + imgClose;
const tilePathCross = imgOpen + imgPathCross + imgClose;
const tilePathN2W = imgOpen + imgPathN2W + imgClose;
const tilePathN2WMountain = imgOpen + imgPathN2WMountain + imgClose;
const tilePathN2E = imgOpen + imgPathN2E + imgClose;
const tilePathS2W = imgOpen + imgPathS2W + imgClose;
const tilePathS2E = imgOpen + imgPathS2E + imgClose;
const tilePathV2W = imgOpen + imgPathV2W + imgClose;
const tilePathV2E = imgOpen + imgPathV2E + imgClose;
const tilePathH2N = imgOpen + imgPathH2N + imgClose;
const tilePathH2S = imgOpen + imgPathH2S + imgClose;
const tileGrapeTrellisFull = imgOpen + imgGrapeTrellisFull + imgClose;
const tileGrapeTrellisEmpty = imgOpen + imgGrapeTrellisEmpty + imgClose;
const tileGrapeTrellisEdgeE = imgOpen + imgGrapeTrellisEdgeE + imgClose;
const tileGrapeTrellisEdgeS = imgOpen + imgGrapeTrellisEdgeS + imgClose;
const tileGrapeTrellisPostNW = imgOpen + imgGrapeTrellisPostNW + imgClose;
const tileGrapeTrellisPostNE = imgOpen + imgGrapeTrellisPostNE + imgClose;
const tileGrapeTrellisPostSW = imgOpen + imgGrapeTrellisPostSW + imgClose;
const tileGrapeTrellisPostSE = imgOpen + imgGrapeTrellisPostSE + imgClose;
const tileGateN = imgOpen + imgGateN + imgClose;
const tileGateM = imgOpen + imgGateM + imgClose;
const tileGateS = imgOpen + imgGateS + imgClose;
const tileSignpostW = imgOpen + imgSignpostW + imgClose;
const tileSignpostE = imgOpen + imgSignpostE + imgClose;
const tileLogCampNW = imgOpen + imgLogCampNW + imgClose;
const tileLogCampN = imgOpen + imgLogCampN + imgClose;
const tileLogCampNE = imgOpen + imgLogCampNE + imgClose;
const tileLogCampW = imgOpen + imgLogCampW + imgClose;
const tileLogCampM = imgOpen + imgLogCampM + imgClose;
const tileLogCampE = imgOpen + imgLogCampE + imgClose;
const tileLogCampSW = imgOpen + imgLogCampSW + imgClose;
const tileLogCampS = imgOpen + imgLogCampS + imgClose;
const tileLogCampSE = imgOpen + imgLogCampSE + imgClose;
const tileRiverEndW = imgOpen + imgRiverEndW + imgClose;
const tileRiverEndE = imgOpen + imgRiverEndE + imgClose;
const tileRiverV = imgOpen + imgRiverV + imgClose;
const tileRiverV2W = imgOpen + imgRiverV2W + imgClose;
const tileRiverV2WMountain = imgOpen + imgRiverV2WMountain + imgClose;
const tileRiverV2E = imgOpen + imgRiverV2E + imgClose;
const tileRiverH = imgOpen + imgRiverH + imgClose;
const tileRiverHMountain = imgOpen + imgRiverHMountain + imgClose;
const tileRiverHForest = imgOpen + imgRiverHForest + imgClose;
const tileRiverH2N = imgOpen + imgRiverH2N + imgClose;
const tileRiverH2S = imgOpen + imgRiverH2S + imgClose;
const tileRiverN2W = imgOpen + imgRiverN2W + imgClose;
const tileRiverN2WMountain = imgOpen + imgRiverN2WM + imgClose;
const tileRiverN2WRoad = imgOpen + imgRiverN2WRoad + imgClose;
const tileRiverN2E = imgOpen + imgRiverN2E + imgClose;
const tileRiverN2EMountain = imgOpen + imgRiverN2EM + imgClose;
const tileRiverS2W = imgOpen + imgRiverS2W + imgClose;
const tileRiverS2WMountain = imgOpen + imgRiverS2WM + imgClose;
const tileRiverS2E = imgOpen + imgRiverS2E + imgClose;
const tileRiverS2EMountain = imgOpen + imgRiverS2EM + imgClose;
const tileRiverS2ERoad = imgOpen + imgRiverS2ERoad + imgClose;
const tileWaterfall = imgOpen + imgWaterfall + imgClose;
const tileSawmillNW = imgOpen + imgSawmillNW + imgClose;
const tileSawmillNE = imgOpen + imgSawmillNE + imgClose;
const tileSawmillSW = imgOpen + imgSawmillSW + imgClose;
const tileSawmillSE = imgOpen + imgSawmillSE + imgClose;
const tileMountain = imgOpen + imgMountain + imgClose;
const tileMountainPeak = imgOpen + imgMountainPeak + imgClose;
const tileMountainFoothillsW = imgOpen + imgMountainFoothillsW + imgClose;
const tileMountainFoothillsWRoad = imgOpen + imgMountainFoothillsWRoad + imgClose;
const tileMountainFoothillsM = imgOpen + imgMountainFoothillsM + imgClose;
const tileMountainFoothillsE = imgOpen + imgMountainFoothillsE + imgClose;
const tileBridgePrim = imgOpen + imgBridgePrim + imgClose;
const tileBridgeNew = imgOpen + imgBridgeNew + imgClose;
const tileEarth = imgOpen + imgEarth + imgClose;
const tileEarth2 = imgOpen + imgEarth2 + imgClose;
const tileEarth3 = imgOpen + imgEarth3 + imgClose;
const tileEarth4 = imgOpen + imgEarth4 + imgClose;
const tileEarthNW = imgOpen + imgEarthNW + imgClose;
const tileEarthN = imgOpen + imgEarthN + imgClose;
const tileEarthNE = imgOpen + imgEarthNE + imgClose;
const tileEarthW = imgOpen + imgEarthW + imgClose;
const tileEarthE = imgOpen + imgEarthE + imgClose;
const tileEarthSW = imgOpen + imgEarthSW + imgClose;
const tileEarthS = imgOpen + imgEarthS + imgClose;
const tileEarthSE = imgOpen + imgEarthSE + imgClose;
const tileEarthSE2 = imgOpen + imgEarthSE2 + imgClose;
const tileQuarryW = imgOpen + imgQuarryW + imgClose;
const tileQuarryN = imgOpen + imgQuarryN + imgClose;
const tileQuarryE1 = imgOpen + imgQuarryE1 + imgClose;
const tileQuarryE2 = imgOpen + imgQuarryE2 + imgClose;
const tileQuarryE3 = imgOpen + imgQuarryE3 + imgClose;
const tileQuarryBuildings = imgOpen + imgQuarryBuildings + imgClose;
const tileMineshaft = imgOpen + imgMineshaft + imgClose;



function UpdateDisplay() {
    RedrawFarm();
    if (player.seesForest) { RedrawForest(); }
    if (player.seesMountain) { RedrawMountain(); }
    RedrawVillage();

    UpdateText();
    UpdateVisibilities();
}



function UpdateText() {
    // DISMISS BUTTONS ---------------------
    buttonSystemMessageDismiss.innerHTML = displayIUnderstand;
    buttonGameEventDismiss.innerHTML = displayOK;

    // FOREWORD ----------------------------
    const stringForeword = '<div id="divForewordTitle">PRAEDIUM</div>' + displayForewordA + '<div id="divForewordScripture">' + displayForewordScripture + '<div id="divForewordSource">' + displayForewordSource + '</div></div>' + displayForewordB;
    divForewordCorpus.innerHTML = stringForeword;
    buttonForewordDismiss.innerHTML = displayForewordLabel;

    // CALENDAR ----------------------------
    const zodiacChinese = {
        monkey: 'R0lGODlhIAAQAOcAAAAvAoAzAIs4Bp9UAadWBZxeAKBfAa5jBqxlCaloAqJsAKxpAKpqALRoCLNpCLVsBalwCbNxEat3AK51DrZ1ALF3AACwALd2EsVxM7F7D8F5DbJ+DsF5E8R4LcZ5J7aAE7CDBsJ/FMN/Esh9GLmDF8SAFbqFBdCCHb+LHrmPGcWNFseMKMaNIsOVHdWQG8CZGMKZHcaZGMiZF8yaH8ybJMCfONWdLOSbKtyiJdSlI86nJM2rJtCqL9GqMcqsTNCsPtetN+apNN2sM9avOt+tPNuxKeqsM9CyUtizPtO1O921Odq2RN63LNu4ONW4Utq5Rtq6TeK6QeC7RuK8M/K3Q+W8POu7P96+UeS+Q++7Q+jBNujBOPy7R+nBSOLDTuHETOPDUu7BSuLEVO3ERPDDRubFXOPHXPjDQ+rHSejHU+PIX+bJU+nJUu7KUuzMVejPWP/JUO/PYvPQXO7SZfzRR/HTY/jTUfTTbPPWWPHXXv/UYfTYW//WWPPYbfPZYvXaV/vYWvjaVv7YWfvZW/zZW/Xaaf/aVvjcXvnba/jeZ/3kcP/lYv/lbP/lbf/ldv/vcQAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHEiwoMGDCAcCEAigYcGGDhMy/LcQABUAFsgICbOQIoAfNY74iOiRoAUuAIIAwNGx4ZiFFtywASCmDIA7UCpG6dKRYhYrDQ01tGBn0KE9GBMleVOnzxU1cTA6wjjQgh4AjACgwfgHogULAi3kUeSn0BwnQ730ZAig0RdAGAkFwvNo7VcLEM2AwbijpwVBSvgAyFERwCKSChGtSfNkiRyMVfxagAPgDMYtRZhombIWQBMpSNrwGNIDBsYZLS24AGAEpgU6VBXqeIERSwogIFrQAGAD5g0AJwCUgFkBgAm/MWTABEBkA4oPGQBA6GihwwAAHmBSALDArwoJFRU9kGAxYUUBA3YDAMCAkQDMEdRFhMDIIMGFhhEQrA1rQQDMqlU9oAFMHADgQAMH7GeSRP98BeBdDEYo4T8BAQA7',
        rooster: 'R0lGODlhIAAQAOcAAAAvAn4xB44+CZQ+BZ5GBp5RAKlOAJxeAKldAK5cBqdjArVeF7tfErRjCKloArVlArVlBqppBaJsAKpqALRoCLNxEblwEa51DrF3AACwALd2Eqd9BbV6ArF7D7R9ALJ+DsF5E7h9FcZ5J7CDBLaAE8B+BrCDBsd+GLmDF8SAFbqFBbeFFLuFGL+LHrmPGb2PF8+KFceMKMaNIr6SF8WQHsWUG8OVHcCZGMKZHcuXH8qYJ8ecEcyaH8ybJM6cF8CfOMqgNL+jT9umJs2rJtCqL9WpLNGqMcqsTNeqNdCsPtmtKtetN8yuVt2sM82wStevM9avOs6vXN+tPNuxKeqsM9iyM9CyUtizMdizPtO1O9+zNt61Odq2RNu4ONW4Uty4Pt65N9q5RuG6OeK6QeC7RuK8M+W8POe8Od6+UeDAOeS+Q+68N+TATujBNufCQOnBSOLDTuHETOfCUOfDSOnDSOTEVerDTObFXPjDQ+rHSejHU+PIX+XHZ+bJU+nJUO7KUuvNUfLMRejPWP/JUO/PSO7OX/PQXO7SZfHTY/jTUfTTbPDWW/XVZvTYW/bYVvPYbfPZYvfZYfjaVvvZW/XaafjcXvnba/3cW//fZPvga/zjZf/iZv/hdf3kcP/lbf/ldv/vcQAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHEhQIICC/wAoRMiwIQAgBw0CYBIlSMSGGDM0uZiBTZIfVo7wiaiwpEOJJhMWAnDHiaKDAOSMebMByUWJgQBkSDSpUqODGbIIQvQIzR6djD59obPlYsk8mBwB2KQww6KIGTpBonTIi05OcCKBETMDaCZPcTIAuARAEgBQADRxLFmyjp8hbs7MVXtFJ6GSaTgCstRHTxguhuZUMaNkBNZBAPCs0TkFQJsyNzN0IYPlDxEoRnAU0cIjcwkqQHfQ5XjjiR01LpaYsNEjx02BGVLA0IlBiAoPPji+qKFjhZQPLUh0CHH7XwYRACyUzJCBQ2YaLCSgkHEhxoHmGQQ50C2AQOGJ2xkmONAQQUEF8AF0DiCwQCeABM0TglBIIb9z3NQ5x4AB4D3wAAAQNOBfQwEyFGCDBAUEADs=',
        dog: 'R0lGODlhIAAQAOcAAAAvAo1BAKBfAadjAqVkCLJhD6xlE65mAqloAqJsALRoCKt3AK51DgCwAKd9BbV6AsVxM7F7D7h9FcZ5J7aAE7CDBsJ/FMd+GMSAFbmPGcWUG8OVHdWQG8KZHcWaKsecEb+cNMybJM6cF9maJtegK9yiJdSlI82rJtCqL9WpLNGqMdetN+apNN2sM9euPM2wStevM9avOt2vJuqsM9iyM+KvMtCyUtizPtO1O9+zNt61Odq2RNu4ONW4Utq5RuG6OeC7Rua8NuW8PN6+T96+UeDAOeS+Q+jBNujBOOLBWOfCQOLDTuPDUufDSOLEVOTEVerDTOzFRObFXOvGROPHXPjDP/jDQ+rHSejHU+bJU+nJUOXKV+7KUvXJRu/KVevNUfPLUejPWO/PSOzQY+vTVfPQXO7SZO7SZfzQS/zRR//RUfDWW/HWYfHXXvbYVvPYbfPZYvvYWvfZYfXaafnba//fYfzjZf/iZv/hdf3kcP/lYv/lbP/mZP/nZ//scf/4fQAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAIAALAAAAAAgABAAAAj+AAEJHEiwoMGDCA8CQLiQIICHCgE1lNhi4kAANiYCAOHCg0VADVgAKPEQQJCPD51IedFwCIAGDRxoBOBHzUM0dUpCbIAjDIA3RBbqbKCjYQMve8BcAeAGwJ0/fcisWdigTR44c870AJAEzxI5AH5MhNkgzsuhdqjCZLNljBkqTJ5oOaHko0QTL6eI0cMHQJGxX+hkweJjR5kmNISgrGHlJZKHRwBEGcsDyA0uKGKo6JAih8UGHBrMeFnlQxoZALp8hgHFSIYVFTaEsNsAAAa1MAGImKnhYW4KESR8bBBgwucRD4wuIPEywUsGLwUQGA5h+AWjFqgieDmAqgHaBxsXEBQvsMEBAAqoFrCbMKF48iDby58PKCAAOw==',
        pig: 'R0lGODlhIAAQAOcAAAAvAoAzAI4+CY1BAJ5HAJ5RAKtYAJxeAKldAKdjAqxlCbFkCqloAqJsALFoALRoCLNyCrxwEK51DrZ1ALF3AACwALV6ArF7D7J+DsF5E8R4LbaAE8B+BrCDBrx+Kch9GMd+GLmDF7qFBbeFFLuFGMiGGL+LHrmPGb2PF8+KFceMKMaNIr6SF8WQHtSNI8WUG8OVHcCZGMKZHcuXH8iZF8qYJ8ecEcybJM6cF9mcKdegK86nJNSoIdumJs2rJtCqL9WpLNGqMdeqNdetN+apNNOvNdevM9avOuWsJ+WsK/CnQeGtM9+tPNuxKdiyM+KvMtizPtO1O9+zNt21Od61Odq2RNu4ONW4Utu5NN65N9q5Rtu7NOC7RuK8M+a6P+W8POe8Od6+UeS+Q++7Q+jBNujBOOLBWOfCPefCQOLDTuHETOPDUuDDX+fDSOTEVerDTOzFROPHXPjDP+jHU+PJUOPIX+bJU+vJROnJUOnJUuXKV+7KUvXJRuvNUfLMRfPLUejPWO7OX+3QTu/PYuzQY+7RWevTVfPQXPbQU+7SZO7SZfzQS/LSWfHTY/jTUfPVWfPWWPHWYfXVZvHXXvTYW//WWPPYbfPZYvLaXvfZYffaWPjaVvXZbvzZW/XaafXcXvnba/fdYv3cW//fYfzjZf/iZv/hdf/kX/3kcP/lYv/ldv/scf/vcf/xcgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHAhgoMGDCBMaBADAQ8GCCiMmBOCiRMEKSyAyFLhRokYAOYg8BMDjYhFGACrkCcSwZUuOQlIiGgNgVUo/i0Y5YkjpYhRAjSyFqTOIkyRVDKlArMD0j8tSDA2NnITqkidFV9iYMZUmUxYALD6qAfBIVKdNkFh9IgWgEB1MoSLpIZQozho3eHygAbN0SiUvKSswTNWyQitBmgD0AWVnjpYqh9o4+QJRINMnLcs0AUCmCxwAW7CcumOFC5Q9P44EkQFESmXLHAAgSSLHBsMKfAKf2RHDyBsxJ4Z0gHFjxuuUSgCkSEmhhwgAOJbSQPGixggmGExsuPC6ggYAA1JM/qswoaWFyhV0tCDRIMQKCSoOvB4fQMDSAggifADRHQIABiklAIAC841XwUAVEBCYAd05AEAGKT0AwAIFInSgZRaOh+GFEnXo4T8BAQA7',
        rat: 'R0lGODlhIAAQAOcAAAAvAngqBn4xB4MwBIs4Bog7B55HAKdWBatYAKBfAbFdB6djArVeF6xlCbRjCLVlBqppBaxpALZnCK5rAqlwCbNxEbtyFgCwALd2Erx1DbV6ArF7D7J+DsF5E7h9FcR4LcZ5J7aAE8d+GMd/G7eFFNCCHb+LHrqQBrmPGb2PF9CNIsOVHdWQG8uXH8yaH8ybJM6cF8CfONWdLNucK7+jT9egK9ugItygJtSlI82rJtCqL9GqMdmtKuapNNevM9avOuWsJ86vXN+tPOqsM9iyM9izMdizPtu0Nd+zNtq2RNu4ONW4Uty4Pt65N9q5Rtq6TeC7RuK8M/K3Q+a8NuW8PN6+T96+UeS+Q+PAWOLBWOfCQOLDTuPDUufCUODDX+fDSOLEVOTEVerDTO3EROvGROPHXPjDP+rHSejHU+PJUOPIX+XHZ+bJU+nJUOXKV+7KUuvNUfPLUejPWP/JUO/PSO3QTu/PYuzQY+7RWevTVfPQXO/SVO7SZO7SZfzRR/nSUfHTY/TTbPHWYfXVZvHXXvPYbfLaXvvYWvfZYffaWPXZbvXaafjcXvnba/fdYv/fZP/iZv/hdf3kcP/lYv/ldv/nZ//scf/vcf/wef/4fQAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHEiwYEEAAAwqHIhwIcMgNBI6ZAhghpSECBsOvBADwIU1GSUavNDjhsd/F6b8GSPyHwAwCAM9wVKlS8uNljRmZCQRoRxAhayosaNoECUmN1HGOfPII6RMlfJgxERIEoBFfZZ4yRJpC6ImSS8cCgngUsILeNIYciTIzR0+ZbiEaZNDy02POIocIUNnksYLdRLtgdOIDRonSfR8IUKFh8gLczJe8OgxisQLmJVAMfJGx48dCJG4eMwCwBAgAMwA8APgxF0fYq6gQLjiRQsZIgGUkDxBMoy/KTySEMLBRIgNHihc/uARhAUAIwCoiABAAwAbZ2ucJZvgcQHJFw41IMQsIsNjgQAwQFhQoUHLCwEEDCDgkYEBBR4RhO0AfiTmCwL9F+BCF0jwgANJTaQgSpgZFBAAOw==',
        ox: 'R0lGODlhIAAQAOcAAAAvAqdWBZxeAKBfAa9bBaVgBbVeF7JhD7lfEbFkCq5mArVlAqJsAKpqALZnCK5rArVtB7NxEQCwALd2ErF7D7J+Drh9FbaAE7CDBreBHcd/G7eFFLuFGMiGGL+LHrmPGcWUG8OVHcKZHcuXH8qYJ8yaH8ybJNWdLNygJs2rJtCqL9WpLNGqMc2rStCsPtmtKtetN82wStevM9avOt+tPNuxKdiyM+KvMtizPtO1O9+zNuexNdq2RN63LNW4Ut65N9q5RuC7RuK8M+m6NuW8POe8OeS+Q+68N+jBNujBOOLBWOfCQOLDTuPDUuDDX+fDSOLEVOTEVerDTOzFRObFXOvGROPHXPjDP/jDQ+jHU+PIX+bJU+nJUOXKV+7KUuzMQ+vNUfLMRejPWP/JUO/PYuzQY/PQXO7SZO7SZfzQS/jTUf/RUfHWYfHXXvPZYvLaXvXaV/fZYfXZbvvZW/zZW/Xaaf/aVvjcXv/bVPnba/fdYv/fYfvga//hdf3kcP/lbP/scf/weQAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHCgQAACCAw8iXMjwoIQMCglKaBGRIUMJHQBI2FFxoAQXBjta/AcAhcEhIQ0mBACFSoyQI0kCWmMnTJo9aubcUQggh5iQWsjISYkQwB+NEiTAQSpBoIRAbfy4qYPGhxMlfZjE+RFRAp+udERKeKOHTZcyZ6w0icIlxZIiXVMCqCJXZVIwebZkAcLDzBMbRF50HXMDyxE8SWr0QCJkypeuQXB4UTGDhYgVOkpUTMr5CtOkEmVIMfIBBoYQJkacEOn0AWunIEhsoFHBwwUKFl7/k6BB924ODJACEDBAt4QAviU0ADBBYwQABYwbSA4BgAKHCQAcMB5z9wIADhwMEgCAwHf33eidpg8IADs=',
        tiger: 'R0lGODlhIAAQAMYAAAAvAngqBoAzAJQ+BY1BAKpYDpxeAKBfAa9bBaVgBadjArVhCbJjAKxlCbFkCqloArVlArVlBqpnGaJsALFoALRoCK5rArhpBLNyCrlwEbxwEK51DgCwALV6ArN5FrF7D7R9ALJ+DsF5E8F6Erh9Fbt9ELaAE7CDBraBEch9GK2EMrmDF8SAFbeFFLuFGLeHG7+LHrmPGb2PF8eMKMaNIsWQHtCNIsWUG8CZGMKZHcuXH8qYJ8ecEcyaH8ybJMmdMtyiJdSoIdumJtOvNdusQNevM9avOuGtM9+tPOqsM9izMdizPt+zNtq2RNu4ONu5NOC7Rum6Nua8NuW8PPG8OufCPefDSOrDTO3ERPjDP/jDQ+jHU+bJU+vJROXKV+7KUuvNUe/PSO3QTu/SVPLSWfzRR/nSUfPVWfHWYfTYW/PYbfPZYvLaXvXaV/faWPjaVvXaafXcXv/aVvnba//fYf/fZP/iZv/kX/3kcP/lYv/mZP/4fQAvAgAvAgAvAgAvAiH5BAEKAH8ALAAAAAAgABAAAAf+gH+Cg38cKgCIhIqLjIocL0Q/AI2UjYgAR5eXlZwcQFRRQVJmWENkk4OonIMccoh0ABwcaaqIaqqrHHUAbXZ7iBypeGtwuJ1nsW+IcagAbABoXomT1JZKsWF5eqgcYm5jYHNcWwBNAFYAU8aFWtSbghxPd11OUEtfAEYAOQBMPcYcksTKwqNMInhVAOAocgVADAAnAPjQAQAFLgAsEFkAIAQACFWyZNzY0QJJCBgmPpAA4KEWgVgZYtlA1OFiDRcTVtDYMMPAgVgSqAmgVmASBw0pcHEogQHAg1gKADRIYLRQAKMDQAYjBGAEBQAiEFUA4AAgq0ocGFwAAAECgAgPABYgWLeKVTBZhQptHRQIADs=',
        rabbit: 'R0lGODlhIAAQAOcAAAAvAngqBoAzAIQ3C41BAJ5HAKZHA6lOAKtSAKdWBatYAJxeAKBfAadjArVeF65jBrVhCbtfEqxlCbRjCLFkCqloArVlBrRmAqppBaJsAKxpAKpqALFoALZnCLRoCLNpCLhpBLVtB7NxEbNyCq51Dqd3LwCwALd2ErV6ArF7D7J+Drh9FcZ5J7aAE8B+BrCDBsd+GLmDF8d/G7eFFLuFGMSELMiGGL+LHrmPGc+KFceMKMaNIsWQHtSNI8WUG8OVHcCZGMKZHcuXH8qYJ8ecEcybJM6cF7yfT9mcKducK8alSM6nJMeoVtumJtCqL9WpLNGqMdmtKtetN82wStavOuWsJ+WsK+GtM9+tPOqsM9iyM+KvMtu0NeexNdq2RN63LNu4ONW4Utu5NNq5Rtq6TeC7Rua6P+m6NvK3Q+W8POe8Od6+T96+UeS+Q++7Q+PAWOLBWOfCPefCQOHETODDX+fDSOrDTPjDP+jHU+XHZ+bJU+vJROXKV+7KUuvNUejPWO3QTuzQY/PQXO7SZO7SZfzQS/HTY/TTbPPVWfPWWPHWYfXVZvHXXvPYbfPZYvLaXvvYWvfaWPjaVvzZW/Xaaf/bVPnba/3cW//hdf/kX/3kcP/lYgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JFAigBICBCBMSPKgwIYAaACIybCjQxBEmExsC6GEjCZouVzIqBJBHSUSKAJAAMMHyjMiBEqccIvNmzUsTbiaaKPTyH4A/hhqxkbiopwmfEpMiNMFIkyNKhMLQgYPp4MmlcyAhujRJUqKMAB4BUMQn0KCkAOSoyWjCzEouKzfpBBQJgB9LevCM8SKojpY0UdhuiVgp4hedYjLtAVMGQB8nVKAEebIyoQkXWapYuUOEIUMTcZYAAWCnDQ4pL34UEfIyYo6IJpqsNPKZpY8hM7CouNEixQqRAAiwWCljpQYAKNjyoJEhxg4SOhYwmBhRQGUTCQ6yhMF2xIYKJzA1NBAhQeeAADodFJCoACyHEBE/eHhAge3RpSYMRDiAQCeICyt1YMEEEPTUEEssWXYfgvcNFBAAOw==',
        dragon: 'R0lGODlhIAAQAMYAAAAvAn4xB44+CY1BAKRTAZxeAKBfAaldAK9bBaVgBbVhCbJjAKxlCbRjCLFkCqxlE65mAqloArVlArRmAqppBbFoAKlwCbVtB79tCbxwEKt3AK51DrZ1ALF3AACwALd2ErV6ArF7D8F5DbJ+DsF5E8F6Erh9Fbt9ELaAE7CDBsJ/FMN/Esh9GLmDF8SAFcmIEL+LHr2PF8WNFsaNIsOVHcCZGMKZHcaZGMiZF8ecEcybJM6cF7yfT9ucK76kUMalSNyiJc6nJNCqL8qsTNCsPsyuVtevM+GtM9uxKeqsM9izMdizPtO1O9+zNt21Odu4ONW4UuC7Rt6+Ue68N+jBNuHETOLEVPDDRubFXOPHXPjDP+jHU+PIX+XHZ+bJU+nJUujPWO7OX+/PYuzQY+7SZO7SZfzRR/nSUfHTY/TTbPPVWf/WWPPYbfXaV/vYWvzZW/Xaaf/aVvnba/3cW//fZP/iZv3kcP/nZ//4fQAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAH8ALAAAAAAgABAAAAf+gH+Cg4SFgh4+AIKKho1/jACMhQBFkTySjoc9AB5HV5iPRJFDXT+gjR5Aih4eZ5IeX2FWWABpp6hxkbqEHkxgaGxSXGK3hJF0AG11eHeYHnYAcGVQxYsAVW5qc2+cHobeAGNkWcUeTmucSpyKtwByXluQj4Wsj1ORSABUoABPUUsAhESyAaDJKQ9JImnJYYbdIABBahhZBSAFDR2RDAFwAeAFgA6rdqy6gSMGpBEwUIQwYcHZgFUeOOgCsUqGBkgtZmwAUMAAPwGvDmRgwcjDChUnIkX4QIETgwQPXgUAxcrbQxElKlwgAUGXAwJUMw3ygGEBgAkSJHBqoABBNbEIf+pVPVRvUCAAOw==',
        snake: 'R0lGODlhIAAQAOcAAAAvAog7B4w8CY1BAKlOAJ9UAaRTAatSAKpYDpxeAKBfAaldAK9bBa5jBrVgELVhCbRjCLFkCq5mArVlArVlBqpqALFoALZnCLRoCLNpCKlwCbVtB7NyCqt3ALtyFgCwAKd9BbF7D754CbR9AMF5E7h9Fbt9EMZ5J7aAE8B+BrCDBrqFBc9/HK+ILb+LHr2PF8+KFceMKMWQHtCNIsCZGMCXPcuXH8iZF8WaKr+cNMyaH7+dRNWdLL+jT9egK9ugIsikQ8alSM6nJNujKNumJsuoTtGqMdarO9etJdCsTNmtKtetN+apNN2sM9usQNavOvCnQeKvMtizMd+zNt21Od61Odq2RN63LNu4ONW4Ut65N+G6OeK6Qea6P+W8POe8Od6+UeC9We68N+LBWOfCQOnBSOHETOPDUufCUODDX+nDSOTEVePHXPjDQ+rHSePIX+XHZ+vJROXKV/XJRu/KVevNUfPLUf/JUO/PYvPQXO/SVO7SZfzRR/jTUfPVWfHWYfTYW/PYbfPZYvTaX/vZW/zZW/XaafjcXvfdYvzeZv/fYf/fZPvga//iZv/lYv/lbP/scQAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHEgQAMGD/wwKBMCQIcKDH5woRPihR8MdRZK0qDFxIcQmHQl+gBMESJgcAHAc6fiBycSGMAs2/PABDZcyIF4CgDRTUR9ChwAlehkIzBs8BmmqqaLwA51HdtwsYtgIAM0PgxQCEGRoT5Y0Y5Jq2dKUEQAzAPwAKNRQ4Ae3iP7IscrmzBqrZL40pQKgCwApVj84CvlBT52mVvJY9aKk6ZA7UdqISXrFoMN/H+JgafrEiNUpOibSTHH5Ax+Gc5AkFUKj6RIVDG3w6AgACgAYSYmsGGE16Y0Xol2gCFFCg1YABQac8JB0hlWBP6x28CFDdIwECpoKCBD4AwKrC7Q2ikhqgkMFmG0H0hTp1gFDFqItbCAhIQOGBhEMhHyImcABwhNMcAEFEDzAwH78YfYWRVddRVBAADs=',
        horse: 'R0lGODlhIAAQAMYAAAAvAo1BAKlOAJ9UAZxeAKBfAa5cBqVgBbFdB7VgELVhCaxlCbFkCq5mAqppBbNyCrlwEat3AK51DrZ1ALtyFgCwALF7D7J+Drh9Fbt9EMR4LcZ5J7aAE7CDBsh9GMd/G7eFFL+LHrmPGcaNItCNIsOVHcCZGMKZHcuXH8iZF8ybJM6cF8CfONmaJtyiJdSlI9SoIcqpSNCqL9WpLNGqMdCsPtetN9evM9avOuWsJ+WsK9+tPNuxKeqsM9iyM9izPtO1O9+zNtq2RN63LNu4ONu5NNq5RuC7RuK8M+m6Nuu7P+S+Q/G8OubAO+TATujBNuPDUufDSOLEVOTEVerDTOzFRObFXOPHXPjDP/jDQ+jHU+bJU+nJUOnJUuXKV+7KUvXJRuzMVevNUejPWO7OX+zQY/PQXO/SVO7SZO7SZfHTY//RUfHWYfPYbfPZYvvYWvfaWPjaVvXaafnba/fdYvjeZ//fYf/iZv3kcP/scQAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAH8ALAAAAAAgABAAAAfxgH+Cg4SFhACGiYqLADGIi4kAkpKGAE41LI+Qf5MuTEkwmoIVYV1kUlaiiRVKeWsAFRV2qhV1QGNqbaqrFY8Vd7uxeG5yaZOUq2+IFXG7nHRsXmVoV1BTXM4VL4/HyABwZ2JzW1pGQmZRPsFZkzxDT0hVy0WwREc/XzI4NCczQbQ9cujAAisWmGVNJJm4QWWJCBsdSqhAoambxRW+KqQoCGLHhRAcLGDwpWFAgA0UIHyYQAJAC1EVIlCKNUICAAIFNMXauVOSB1oZHiAC4ADWggPOBlVAkMBAsAp/KjQYyiApoVgCrEaNqkBrIaibRhEKBAA7',
        goat: 'R0lGODlhIAAQAMZqAAAvAqdWBZxeAKBfAaVgBadjArVeF65jBrJhD6xlE6pqALFoAK5rArNyCgCwALF7D7J+Drh9FbaAE8B+BrCDBsd/G7eFFLuFGL+LHrqQBrmPGb2PF8WQHsWUG8OVHdWQG8CZGNSTHcKZHcuXH8qYJ8ecEcybJNucK9SoIdCqL9WpLNGqMcqsTNetJdetN9evM9avOuWsJ+WsK92vJt+tPOqsM9iyM9izMdizPtu0Nd+zNtq2RNu4ONq5Rtq6TeC7RuW8POS+Q/G8OujBOOfCQOfDSOLEVOrDTPDDRubFXOvGRPjDP+rHSejHU+XHZ+bJU+XKV+7KUvXJRuvNUejPWO/PSOzQY/PQXPzRR/HTY/HWYfHXXvbYVvPZYvLaXvXaV/zZW/Xaafnba/fdYv/fZP/iZv/lYv/mZP/nZ//4fQBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAwBJAyH5BAEKAH8ALAAAAAAgABAAAAfVgH+Cg4SFhoeIggCDi4kAjYmDDieLAEiQhI8sTpiRAEIAKJ2KRkkADj6jho+srJlUWY0OkYIOTGRcX2VpaJAOWwBdYaOqf6xgrZJeY1pQVq2PRKoONzlKVWZnmA4OU2JPTT07V0U2QJjQAEPpsjw/OFEpMCsiKjq+IR8TNTEySyVYZmSQ0kIWiBdHgmhwQcGDiRHbuElkcErirFobOpCwQAMCBgkPIhT746DCSAccLlQ8JWDAyQAnGyhY5KDAKQIJijkwcHKBrwOnEJykdVFSLVpIaQUCADs=',
    };
    const thisCalculatedYear = year + 1200 - 200; // +12 or +1200 is the same end result, this just gets it above 12 so no errors in the first 11 years; then -200 to adjust for B.C. years
    let animalOfTheYear = zodiacChinese.goat; // if % 12 == 11
    if (thisCalculatedYear % 12 == 0) { animalOfTheYear = zodiacChinese.monkey; }
    else if (thisCalculatedYear % 12 == 1) { animalOfTheYear = zodiacChinese.rooster; }
    else if (thisCalculatedYear % 12 == 2) { animalOfTheYear = zodiacChinese.dog; }
    else if (thisCalculatedYear % 12 == 3) { animalOfTheYear = zodiacChinese.pig; }
    else if (thisCalculatedYear % 12 == 4) { animalOfTheYear = zodiacChinese.rat; }
    else if (thisCalculatedYear % 12 == 5) { animalOfTheYear = zodiacChinese.ox; }
    else if (thisCalculatedYear % 12 == 6) { animalOfTheYear = zodiacChinese.tiger; }
    else if (thisCalculatedYear % 12 == 7) { animalOfTheYear = zodiacChinese.rabbit; }
    else if (thisCalculatedYear % 12 == 8) { animalOfTheYear = zodiacChinese.dragon; }
    else if (thisCalculatedYear % 12 == 9) { animalOfTheYear = zodiacChinese.snake; }
    else if (thisCalculatedYear % 12 == 10) { animalOfTheYear = zodiacChinese.horse; }
    animalOfTheYear = iconOpen + animalOfTheYear + imgClose;

    const seasonStones = {
        alpha: 'R0lGODlhEAAQAMIEAAAAAFVVVYODg6qqqv///////////////yH5BAEKAAcALAAAAAAQABAAAAMheLrc/jDKSau9WIJNwRgEoAWDEIQREAjlIKar+abbnDkJADs=',
        beta: 'R0lGODlhEAAQAOMHAAAAAGwAANwAAFVVVYODg/+BJ6qqqv///////////////////////////////////yH5BAEKAAgALAAAAAAQABAAAAQwEMlJq704682750AIBkIBZCFQlqcFGMahFkJLAYNBDDLrDgSdARCwVXCEnQiV+mwiADs=',
        gamma: 'R0lGODlhEAAQAOMHAAAAAGwAANwAAFVVVYODg/+BJ6qqqv///////////////////////////////////yH5BAEKAAgALAAAAAAQABAAAAQ7EMlJq704682750AIBkIBZCFQlmc6AYZxqIUQHng7GMQws4NdDjAg8AyAQMgn1BF6ImLz5XoFTyAsIgIAOw==',
        delta: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARE8MlJq7046803+BxAEED2AYEwlhYwFIiostMJw+hZJ4kC3B+FsAQwJA4GH85gHBYPx4Trk2wSDQckqGit6WpMmgYkiQAAOw==',
        epsilon: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARM8MlJq704680p+B7oFQgCSABBnN5QFB8QCCo7AQNOprSNfqRdIHZLJBSA4EfBPAEMiYMBuTNAm89DNIH7TK9Ow0EKeoJvxJvVlxE9IgA7',
        zeta: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARR8MlJq704Z8C1BMqhABgHGEYidhRQIOeRJuwEDIUJHABBkK3B7dUT/CqmFzFgsiUSIyVHQSWdVIYoDAUdxVQ04UmRGj1iss6pDDw3bai2phYBADs=',
        eta: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARa8MlJawXYWoBQAdrEFV8WAsUAKIcCahhgGElrigUiH3RyS4BBCXMAEAgvkUqoIwiQF0wuBwjERImEa4pReEGymmGrm2ldu5pPJVPQXI8dLyN7J2PJ+CwfiicjADs=',
        theta: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARi8MlJawVYYmAfQEiBJYnCUV8hjodhosUAKIeZHMmpYYZxmwCDDlBABFukDWqwwhwABIJOI2MaCQLpBVMsAgJKDcnUxSjOnODNRTT2SkADDgeQBRW+17GVCeaHYRo9Ux07ExEAOw==',
        iota: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARn8MlJawVYYmAfQEiBJYnCUV8hjodhosUAKIeZHMmpYYZxm5sToIAAGFokDIEgHKwwB0xAsGwCnEVmgEAVYohEQGDD9JBMYIxizTHeXMNirwQ83nIyo8L3Mh5aGUZ8OkEoPTodExkSEQA7',
        kappa: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARk8MlJawVYYmAfQEiBJYnCUV8hjodhosUAKIeZHMmpYYZxm5tT0NAiYQgEITJ4wAQES8BzWUAAkgEC1BkMWQObpIdkqq4UaA7A1ypbeyUg8ZaTrRW+1/rQyqzzOkEoPTodExkSEQA7',
        lambda: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARo8Mk5gaXUggdGQRsGIEjRfV8ojYVpeaXKFQOgHMoJZpZhJLiOZqUxHH4JC4EQAiw1gIMlIHgCqM8UM0CoTqElUEDD5CQSOZRFwd4Afsc0yIfOvQ/AZO2t+OU4RkcXb34qUBk+Mhg8ExEAOw==',
        mu: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARl8MkJqp342aRAQUCmIUgBGN0XUqVZJUC5St4AKEfngZhlGIkcwFah+Q5AGIBAWC2blkMlIGBOq01VM0CoTi0xVcDS1CQ4O5diHToFUbsTkH06BGFE1LxtOCCLcmgUFxQ/MyI9MxEAOw==',
        nu: 'R0lGODlhEAAQAOMKAAAAADsAFlQAAGwAAIAAANwAAFVVVYODg/+BJ6qqqv///////////////////////yH5BAEKAA8ALAAAAAAQABAAAARl8MkJqp342aRAQUCmIUgBGN0XUqVZJUC5St4AKIelYpZheLKLphcbfEyEFYCQrBiNIGYlIJC6BjZCdWqJqbpJTYIDdCnOoVPigAKeDJzO6bCG2U4KeEdjOLArfHozXTw+MyI8MxEAOw==',
    }
    let chosenSeasonStone = seasonStones.mu;
    if (week % 13 == 0) { chosenSeasonStone = seasonStones.nu; }
    else if (week % 13 == 1) { chosenSeasonStone = seasonStones.alpha; }
    else if (week % 13 == 2) { chosenSeasonStone = seasonStones.beta; }
    else if (week % 13 == 3) { chosenSeasonStone = seasonStones.gamma; }
    else if (week % 13 == 4) { chosenSeasonStone = seasonStones.delta; }
    else if (week % 13 == 5) { chosenSeasonStone = seasonStones.epsilon; }
    else if (week % 13 == 6) { chosenSeasonStone = seasonStones.zeta; }
    else if (week % 13 == 7) { chosenSeasonStone = seasonStones.eta; }
    else if (week % 13 == 8) { chosenSeasonStone = seasonStones.theta; }
    else if (week % 13 == 9) { chosenSeasonStone = seasonStones.iota; }
    else if (week % 13 == 10) { chosenSeasonStone = seasonStones.kappa; }
    else if (week % 13 == 11) { chosenSeasonStone = seasonStones.lambda; }

    const seasonalGods = {
        venus: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANCeLrcDhA6BoYlBMxThfeF1nTCBYoKEHjDV3jZosIfwaKz8LK3vIKEVs/3EQ5Tv6BNEEARS57mRhWoSjeciBPL7TISADs=',
        ceres: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANGeLrcfiC+BgYp8sUhBPmAU3FW0WEMEHREJ5hvqKiu28YLXQscPq8nQs8j+7mGxBRwYDkWjbza4AntBALU3PUayea6k3AjAQA7',
        bacchus: 'R0lGODlhEAAQAMIHAAAAAERERHR0dKioqLi4uNjY2Pz8/ACwACH5BAEKAAcALAAAAAAQABAAAANJeLrcDjC6BcK4xcBnhfcZwFTDZxYiFXhE23qayroEmB4VTHvDneuFT0/2CQp9q6JpqPgZDIUXs5k08W7UQFUQwFIgWq33IWEkAAA7',
        æeolus: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANPeLoHDiwqMAYhUDZAhBdFxgDB4BGFF47BZ4JqRn50F88fYb4dNlc218fRolloHqLnqFp2lC5batgo5k5LWWCL3Ik2uEpWg/MEvhHS9rxIAAA7',
    };
    let chosenGod = seasonalGods.venus;
    if (week > 39) { chosenGod = seasonalGods.æeolus; }
    else if (week > 26) { chosenGod = seasonalGods.bacchus; }
    else if (week > 13) { chosenGod = seasonalGods.ceres; }

    const seasonalEmboss = {
        spring: 'R0lGODlhIAAQAOcAAAAvAnEdAHgqBn0qCoYuBn4xB4kwBIg7B44+CZ5GBp5HAKZHA55RAKlOAKtSAKtYAKpYDpxeAK5jBrtfEqxlCbFkCq5mAqJsALFoALRoCK5rArNpCKlwCbVtB7NyCqN1KK51DgCwALx1Dad9BbF7D8F5E8R4LcB+BrCDBryABrx+KayCNreBHch9GK2EMrmDF8d/G7uFGM9/HNCCHciGGLqQBrmPGceMKMaNIsWQHsWUG8OVHcCZGMKZHcuXH8iZF8ybJM6cF9ygJsikQ9ujKNmtKtetN92sM9usQM2wStevM+WsJ92vJtuxKeqsM9iyM9izPuexNdq2RNW4Ut65N9q5Rtq6TeK6QeW8POu7P96+T+S+Q++7Q+PAWOLBWOnBSOLDTufCUODDX+fDSOLEVOrDTOzFRObFXOvGRPjDP+jHU+bJU+zMQ+/KVevNUf/JUO7OX+/PYu7RWfPQXO/SVO7SZO7SZfzRR/nSUfjTUf/RUe/WWPTTbPDVZP/UYfTYW/PZYvTaX/fZYfjaVv7YWfvZW/Xaaf/aVvjcXv/bVPnba/3cW/zeZv/fZPzjZf/hdf/lbf/scf/xcv/4fQAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHAjgwwoXAAYqXMiw4T8AKgCwAIAkoUOCFwWGoAEgRJSORywSBECS5JCSJBWWFJIwxEM8JTXCIXMmCR8rXbSEufJlhEUAXLJE0nOoZZ5CiP4wshgCZRyUHTX6adMxRKOEACZ1BBBoT0tAhuxMEePlERhBVJj2AQCp5SIAg1o6AiAHa8k6UFP+C0FI70M0IklK6kjHjaI1aqpImTPmCZYiTIm8KZkIQJOSZtgwJQkFZQ+SLgc2PeFkCYA0AO4wqRFVIAAeSspssWEExQ4gPkQ+nFE1hIbeQZj+CKEjLwkAHJiaaB0Cxs8QKZiGyBHjwgscIG5EaL33AAAEHSFAAGDQsQUAESJDeMhLQXcIAQVKJgCgoOQDGekxdChhYUMGCRXottcAARBgQEsLTNCAAwKG4OCDDjYEoWgPZuRQQAA7',
        summer: 'R0lGODlhIAAQAOcAAAAvAnEdAH0qCoYuBokwBIs4BpQ2ApQ+BaBCBZ5GBqZHA6FNDaRTAa1QDapYDq5jBrJhD7VgELFkCqloAqppBapqALFoALRoCLVsBblwEa51DrtyFgCwALd2EsVxM7F7D8F5DbJ+DsF6EsZ5J7aAE6yCNreBHch9GMSAFbqFBbeFFMmIEL+LHsOJKL2PF8WNFs+KFceMKMWQHtCNIsWUG8KZHciZF8qYJ8WaKr+cNMCfONmaJtucK8ikQ8alSNyiJdSlI82rJtCqL9WpLNGqMcqsTNCsPtarO9euPNevM9avOuWsJ+WsK9+tPOqsM9iyM9CyUtizMeqtONizPtu0NeexNdu4ONy4PuC7RvK3Q96+UeC9We68N/G8OuTATuPDUuTEVevGROPHXPjDP/jDQ+PIX+XHZ+vJROnJUOXKV+zIWu7KUujPWO/PYuzQY+/SVO7SZPHTY/TTbPPVWfHWYfXVZvPYbfvYWvfZYfXZbvzZW//bVPfdYv3cW//fZP3kcP/ldgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAP8ALAAAAAAgABAAAAj+AP8JHPgPQAkABBMqXKgQQAsTCBMCmEixYsWFHHhkqRJxIAc1XozogFLEjI8eW3IgwXGko8cfXVx65FBRjkUOHBgCyMmQA5s4drSUaZOnDqArMgcC8DOx5x+LFPEk/cfhzpw+eqZy4EMnjRs4Yr6AQRNEK5AoVMJofQN14hOtZLjsmUr1jBUsU9YIUUKkxhCtTpYwGYMw6cQkbXuigLGicIqOE224oHFDRZMQLEh80DpiQ4adMwDsQMhByoudMipqiEGXg4cFDkgDOBGRJsUKEzpQsCgRQIEDCShG6MgBAwgRFnbivPBAAgMIxAUEGEDAAIIGCmTixElwO/fu3rcFMxxPMCAAOw==',
        autumn: 'R0lGODlhIAAQAMYLAAAvAngqBn0pB4AzAJQ+BY1BAJ5GBqFNDZxeAKVgBbJhDwCwALd2EsVxM7F7D8F5E8F6Ert9EMZ5J7CDBsSAFdCCHb+LHr2PF8WNFs+KFcaNIruWLsOVHdWQG8CZGNSTHcaZGNegK86nJNujKNWpLNGqMcqsTNOvNdavOuWsJ+WsK/CnQeqsM9CyUtizPtu0Ndu4ONW4Utq5RuG6OeC7RuW7Q+W8POe8OeK8T96+T+C9WeS+Q+68N+jBOO7BSuLEVOjCV+TEVe3EROvGROPHXOXHZ+nJUuXKV+vNUe/PSO7OX+zQY/PQXPnSUfHTY/jTUfPWWPHWYfXVZvPZYvLaXvjaVvvZW/zZW/jcXv/bVPfdYv/iZv/hdf/nZ//4fQCwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwAACwACH5BAEKAH8ALAAAAAAgABAAAAfggH+Cg4SDAIeFiYqLggA4GwCEh5F/lIyJAD41QJGTLSZFAAs6lpeNTUInkQtGSj+iC38LOaWXAE9WWJYLC06dslKUtYUAW15dpYdThzGiXKszw41XVVClC1RaUUdLAEQAQZ03luQvQ0nDvEiHCzIATIc2uyOdPFk90pUwNC6iKCUASFz70AEAixQq8gEQ4UHUDlETOKSrsIJChnwLQAC4sKqSBQAOhgEoICGfLAwAQgjTIApBLQADADQ4YJJXhE4MKC1IQC7AKgIGakIQ9eCaglUCdsW6tHQpIadOTUklFAgAOw==',
        winter: 'R0lGODlhIAAQAMYAAAAvApQ2AqBCBaFNDZ5RAKdWBapYDqldAK5jBqloAqppBapqALRoCK5rArF3AACwALd2EsVxM7J+DreBHcmIEL+LHsOJKM+KFcWQHsKZHcecEcyaH9egK9ygJtyiJdSoIdWpLM2wStevM+WsJ+WsK9+tPNuxKdCyUtizMdu0Nd+zNtq2RNu5NNq6TeK6Qem6Nua8Nt6+T+S+Q+68N/G8OujBOOPAWOLBWOfCUOLEVOrDTObFXOvGROPHXPjDP+bJU+vJROvNUejPWO/PSPPQXO7SZO7SZfHTY/TTbPPVWfHXXvbYVvXaV/jaVvzZW/Xaaf/bVPnba/3cW//fZP/iZv/hdf/kX//ldgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAgAvAiH5BAEKAH8ALAAAAAAgABAAAAfIgH+Cg38AAISIiYqKDxYTh4uFkYqGlZCJACeWlYsPHR40Lx8wl4MAOTshSC02MTgupYQPlg+YQkeGD7MAV7GyU0tMVLEPSgAPT0aGN1W+sklSTk2+tZVFPYaTfw8oKTxDsZVBUT/HK0SWjDNQNSalDyxWQOm6GSAqG9QjJD4axLoPROiQUQlgrUQPLlBo4MBZoWMPSkio4FDQJmcPOGCgNelBhAEGChA4gPHBggQQFGSLpCvXwU4AGSCouC2AAJqIdGnb9nLnokAAOw==',
    };
    let chosenEmboss = seasonalEmboss.spring;
    if (week > 39) { chosenEmboss = seasonalEmboss.winter; }
    else if (week > 26) { chosenEmboss = seasonalEmboss.autumn; }
    else if (week > 13) { chosenEmboss = seasonalEmboss.summer; }
    chosenEmboss = iconOpen + chosenEmboss + imgClose;

    const weekStones = {
        alpha: 'R0lGODlhEAAQAMIEAAAAADsAFlQAAIAAAP///////////////yH5BAEKAAQALAAAAAAQABAAAAMeSLrc/jBGQKUCYwALgsjbFAxfKI7mVFls675wLCsJADs=',
        beta: 'R0lGODlhEAAQAMIHAAAAADsAFlQAAGwAAIAAANwAAP+BJ////yH5BAEKAAcALAAAAAAQABAAAAMteLrc/vCBCSc4oBhzGyDEBQyF1ilAIIDiQJ5YQKyd5aQyXFFR7//AoHBIPCQAADs=',
        gamma: 'R0lGODlhEAAQAMIHAAAAADsAFlQAAGwAAIAAANwAAP+BJ////yH5BAEKAAcALAAAAAAQABAAAAM4eLrc/vCBCSc4oBhzGyDEBQyF1ilAIIDiQJ4WsXbWMppBKJGGeXoGXuHnIfGIntEAKWFGntBoJAEAOw==',
        delta: 'R0lGODlhEAAQAOMJAAAAADsAFlQAAGwAAIAAANwAAFVVVf+BJ6qqqv///////////////////////////yH5BAEKAA8ALAAAAAAQABAAAARH8MlJq734go03eEBxHF8FEMQHDIVYSkAgoN5avB4xA0nPwSxSAGAwIHxAkYuYMCZKgEPwRnTiWEFV8QVbDXBcyi9DLpvPjwgAOw==',
    }
    let chosenWeekStone = weekStones.gamma;
    if (week % 4 == 0) { chosenWeekStone = weekStones.delta; }
    else if (week % 4 == 1) { chosenWeekStone = weekStones.alpha; }
    else if (week % 4 == 2) { chosenWeekStone = weekStones.beta; }

    const classicalElements = {
        earth: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANIeLrc/vCASSubIw9Cii+AAmxCaZqgNJxsCQJBSWjbJ7xxuZ47MeWZWW0m8EkCOcFqpwtJYCZm84KMapwXqJISgQWwkWd4fEgAADs=',
        water: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANHeLrcfiC+BgYpUdIqBPkFxlRDZ5oiFJxsJwLrIM8yIbyrx5Y3oKImW4fg+7l0wSLsVNgVjS3B4AkVBK4BqgKGzWgX3om4kQAAOw==',
        air: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANHeLrcfgC8FseI8gErBPkZs3VkV4TQUBLlqQBBqRarBHsDYRGF7tkxgarVuUBilmSSZTyWnsIQLBCUoSARqjZwFWEik7A4nAAAOw==',
        fire: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANCeLrc/vCACaICI48JsfgCUVQNEIAEODImOAiFSkqn8H5xSLY2iH8bWkhDTAV5vmSQFqglAzPJpEltRlkUimXLXSQAADs=',
        æther: 'R0lGODlhEAAQAOMMAAAAACsBATMBAVwAAFEFBXYHB6IAALEAANwAAIg4APpyEv+XTQCwAACwAACwAACwACH5BAEKAA8ALAAAAAAQABAAAARU8MlJq30gg0vBQcqycV5hDslYleAyBOJ6FHOBDoWiAgR9BoNFAbHrIX4DxbCYswEDx4MK01sACwactEMYoBaKV2EqAQiuJgJ5Yia41ZyyZh2v2yURADs=',
    };
    const zodiacSidereal = {
        jan: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANGeLrc/g/ICQ8YmJQCYhBgyDnAVwgDAY7MBaoCzFofONhip5Svna46muAU6814IhwhSAsEVAXYgGlBhqaQktNJbUwklfAhAQA7',
        feb: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANGeLrc/hDISRsYeBBSegHLJYwk+SlAMA5C0ZpgOhICS9MCEatlfx6yVe7VAqFUNBbLpQvxeivjERq1BK7YwEDKoFQg4DAkAQA7',
        mar: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANEeLrc/lCBGRcYg0wAr/hEUXCN953CyAABeBKfKrXfINgxebAgRuAaC00Aw910vNQJN9DthqimgxUYBpyrSfVakVC6kQQAOw==',
        apr: 'R0lGODlhEAAQAMIGAAAAAERERHR0dLi4uNjY2P///wCwAACwACH5BAEKAAcALAAAAAAQABAAAANKeLoLzu0dQEgBkFo3hL9N9xFeCQKBR5ZC8WGoQLpq28Jprd9K7HU0FWaSE3RWwl6RJDIOlSbW4AmVlaaQ6pXK8Dmz3cAAC+5KGAkAOw==',
        may: 'R0lGODlhEAAQAOMJAAAAAERERHR0dKioqLi4uMjIyNjY2Pz8/P///wCwAACwAACwAACwAACwAACwAACwACH5BAEKAA8ALAAAAAAQABAAAARS8MlJqwU4A/vw+F9xbBTwCWgqkt2AGoQAo2sXpC8urMCdEgaEroDxCWIoYWpQzOGUAmYvqTOgpD0fFBlgSrLJmSAQYNmMqLL5myWXORPNGk6PAAA7',
        jun: 'R0lGODlhEAAQAMIHAAAAAFRUVHR0dKioqLi4uNjY2Pz8/ACwACH5BAEKAAcALAAAAAAQABAAAANCeLrc/jBGQCtwdehRirkLsAlkOXyKKBRlyRYgEJAFYXd0PJMEb+ouH2kAFBg6t6EuwGqtiAxZYEqdgqIWi2TLXSQAADs=',
        jul: 'R0lGODlhEAAQAOMKAAAAAAgICERERHR0dKioqLi4uMjIyNjY2Pz8/P///wCwAACwAACwAACwAACwAACwACH5BAEKAA8ALAAAAAAQABAAAART8MlJq714gs1r4AAhGgYCaGKaHENbngHRDkXSFuxQfkKbF7OZYdMb2Gg3oA4QKBpzvwGBF5wdgQSi86BcDQTZR1NA9iXIgs3kA0CTOxfQKUOvXyIAOw==',
        aug: 'R0lGODlhEAAQAOMJAAAAAAgICERERHR0dKioqLi4uNjY2Pz8/P///wCwAACwAACwAACwAACwAACwAACwACH5BAEKAA8ALAAAAAAQABAAAARL8MlJq70Y6I0fICB4aBYgDIOBDCJAmWiBruw4wYM8o4QrBScVKsXzPYA6mq43QaIMuSFTAivoZCujR3AaEgVaj4lLBmc2nI56bYkAADs=',
        sep: 'R0lGODlhEAAQAOMIAAAAAERERHR0dKioqLi4uNjY2Pz8/P///wCwAACwAACwAACwAACwAACwAACwAACwACH5BAEKAAcALAAAAAAQABAAAARM8MhJqwUYWwqGLwawHZ1gCkMocoEhEC8KrhIQCEUMo+Fk6zFTYfUDFnYD4g3HhMGSvpvLlXvSiicmNLo0UbfcLIrGsQXOAfIlox6NIgA7',
        oct: 'R0lGODlhEAAQAOMJAAAAAERERHR0dKioqLi4uMjIyNjY2Ozs7P///wCwAACwAACwAACwAACwAACwAACwACH5BAEKAA8ALAAAAAAQABAAAARR8MlJq5UggzvzGMWRXcAnnKBYlSdBGGexdUF7CogwqFgN3ziBrHfKAWGDGaBWvBFQSqbBkHMho0zgLUkLIKYuF5eyDGShlox5HZiRNCOOXBIBADs=',
        nov: 'R0lGODlhEAAQAOMIAAAAAERERHR0dKioqLi4uNjY2Pz8/P///wCwAACwAACwAACwAACwAACwAACwAACwACH5BAEKAAcALAAAAAAQABAAAARO8MhJ6wQ4ZwuG/0NhYBQQCGgqFCIgmatAyGp7wPE8py2u0zXMifZTDYSoAjGJOppOhphSVDi+AoGolmm9DlEGpaDrxZoD5ItGY2m735UIADs=',
        qwf: 'R0lGODlhEAAQAOMKAAAAAERERHR0dKioqLi4uMjIyNjY2Ozs7Pz8/P///wCwAACwAACwAACwAACwAACwACH5BAEKAA8ALAAAAAAQABAAAART8EkJqp2Yjj0KApkmjONwgBgQkGyBTupoyMLwwetI6KOLkztBcPCKCQ0JoSBB/O12CcOsSQnkZsra62FMZqlVUrS05VpZgkC5am2vYZZKaE5/RAAAOw==',
        dec: 'R0lGODlhEAAQAOMJAAAAAERERHR0dKioqLi4uMjIyOzs7Pz8/P///wCwAACwAACwAACwAACwAACwAACwACH5BAEKAA8ALAAAAAAQABAAAARO8MlJq5Ug64uHH8UBXMAgnOdgjBQQnEWMCAU7uahAzHX7ogTBbGDDCXWnIcv1Q6KIt8AvWHjaHrhqTgCNblNXrHQbCGOk6DIHq8ms35MIADs=',
    };
    let chosenElement = classicalElements.earth;
    let chosenSign = zodiacSidereal.jan;
    if (week > 48) {
        chosenElement = classicalElements.fire;
        chosenSign = zodiacSidereal.dec;
    }
    else if (week > 44) {
        chosenElement = classicalElements.æther;
        chosenSign = zodiacSidereal.qwf;
    }
    else if (week > 40) {
        chosenElement = classicalElements.water;
        chosenSign = zodiacSidereal.nov;
    }
    else if (week > 36) {
        chosenElement = classicalElements.air;
        chosenSign = zodiacSidereal.oct;
    }
    else if (week > 32) {
        chosenElement = classicalElements.earth;
        chosenSign = zodiacSidereal.sep;
    }
    else if (week > 28) {
        chosenElement = classicalElements.fire;
        chosenSign = zodiacSidereal.aug;
    }
    else if (week > 24) {
        chosenElement = classicalElements.water;
        chosenSign = zodiacSidereal.jul;
    }
    else if (week > 20) {
        chosenElement = classicalElements.air;
        chosenSign = zodiacSidereal.jun;
    }
    else if (week > 16) {
        chosenElement = classicalElements.earth;
        chosenSign = zodiacSidereal.may;
    }
    else if (week > 12) {
        chosenElement = classicalElements.fire;
        chosenSign = zodiacSidereal.apr;
    }
    else if (week > 8) {
        chosenElement = classicalElements.water;
        chosenSign = zodiacSidereal.mar;
    }
    else if (week > 4) {
        chosenElement = classicalElements.air;
        chosenSign = zodiacSidereal.feb;
    }

    let messageYear = year;
    if (year > 9999) { messageYear = formatterStandard.format(year); }
    messageYear = displayYear + '&nbsp;' + messageYear;

    let messageWeek = displayWeek + '&nbsp;' + week;

    let messageHourglass = iconGlassP;
    if (!player.seesForeword) { messageHourglass = currentGlassIcon; } // this syncs the hourglass animation to the game clock at game start

    const stringStones1 = iconOpen + chosenGod + imgClose + iconOpen + chosenSeasonStone + imgClose;
    const stringStones2 = iconOpen + chosenWeekStone + imgClose + iconOpen + chosenElement + imgClose + iconOpen + chosenSign + imgClose;

    let stringCalendarTable = '<table>';
    stringCalendarTable += '<tr>';
    stringCalendarTable += '<td>' + messageYear + '<br>' + stringStones1 + '</td>';
    stringCalendarTable += '<td>' + animalOfTheYear + '&nbsp;&nbsp;' + messageHourglass + '&nbsp;&nbsp;' + chosenEmboss + '</td>';
    stringCalendarTable += '<td>' + messageWeek + '<br>' + stringStones2 + '</td>';
    stringCalendarTable += '</tr>';
    stringCalendarTable += '</table>';

    divCalendar.innerHTML = stringCalendarTable;

    // CONTROLS ----------------------------
    buttonTill.innerHTML = iconButtonTill;
    buttonPlant.innerHTML = iconButtonSeed;
    buttonWater.innerHTML = iconButtonWater;
    buttonHarvest.innerHTML = iconButtonHarvest;

    let messagePriority = iconButtonHarvest;
    if (priority == 'Sow') { messagePriority = iconButtonTill; }
    else if (priority == '🤪') { messagePriority = iconButtonPizza; }
    buttonPriority.innerHTML = iconFarmer + ': ' + messagePriority;

    // BUY LAND BUTTON ---------------------
    if (farmStage == 0) { buttonBuyLand.innerHTML = displayLabelBuyLand0 + '<br>(' + priceStage1 + iconWheat + ')'; }
    else if (farmStage == 1) { buttonBuyLand.innerHTML = displayLabelBuyLand1 + '<br>(' + priceStage2 + iconWheat + ')'; }
    else if (farmStage == 2) { buttonBuyLand.innerHTML = displayLabelBuyLand2 + '<br>(' + priceStage3 + iconWheat + ')'; }
    else if (farmStage == 3) { buttonBuyLand.innerHTML = displayLabelBuyLand3 + '<br>(' + priceStage4 + iconWheat + ')'; }
    else if (farmStage == 4) { buttonBuyLand.innerHTML = displayLabelBuyLand4 + '<br>(' + priceStage5 + iconWheat + ')'; }
    else if (farmStage == 5) { buttonBuyLand.innerHTML = displayLabelBuyLand5 + '<br>(' + priceStage6 + iconWheat + ')'; }
    else if (farmStage == 6) { buttonBuyLand.innerHTML = displayLabelBuyLand6; }
    else if (farmStage == 7) { buttonBuyLand.innerHTML = displayLabelBuyLand7; }
    else if (farmStage == 8) { buttonBuyLand.innerHTML = displayLabelBuyLand8; }
    else if (farmStage == 9) { buttonBuyLand.innerHTML = displayLabelBuyLand9; }
    else if (farmStage == 10) { buttonBuyLand.innerHTML = displayLabelBuyLand10 + '<br>(' + priceStage11 + iconWheat + ')'; }
    else if (farmStage == 11) { buttonBuyLand.innerHTML = displayLabelBuyLand11 + '<br>(' + priceStage12[0] + iconWheat + ' + ' + formatterStandard.format(priceStage12[1]) + iconBoard + ')'; }
    else if (farmStage == 12) { buttonBuyLand.innerHTML = displayLabelBuyLand12 + '<br>(' + priceStage13 + iconWheat + ')'; }
    else if (farmStage == 13) { buttonBuyLand.innerHTML = displayLabelBuyLand13 + '<br>(' + priceStage14[0] + iconWheat + ' + ' + formatterStandard.format(priceStage14[1]) + iconBoard + ')'; }
    else if (farmStage == 14) { buttonBuyLand.innerHTML = displayLabelBuyLand14 + '<br>(' + priceStage15[0] + iconWheat + ' + ' + formatterStandard.format(priceStage15[1]) + iconStone + ')'; }
    else if (farmStage == 15) { buttonBuyLand.innerHTML = displayLabelBuyLand15 + '<br>(' + priceStage16[0] + iconWheat + ' + ' + priceStage16[1] + iconStone + ')'; }
    else if (farmStage == 16) { buttonBuyLand.innerHTML = displayLabelBuyLand16 + '<br>(' + priceStage17[0] + iconWheat + ' + ' + formatterStandard.format(priceStage17[1]) + iconBoard + ')'; }
    else if (farmStage == 17) { buttonBuyLand.innerHTML = displayLabelBuyLand17 + '<br>(' + priceStage18[0] + iconWheat + ' + ' + priceStage18[1] + iconBarley + ')'; }

    // HIRE BUTTONS ------------------------
    buttonHire.innerHTML = displayHireHand + '&nbsp;' + iconFarmer + '<br>(' + handsAvailable + ' ' + displayLabelAvailable + ')';
    buttonAudit.innerHTML = displayHireAccountant + '&nbsp;' + iconAbacus + '<br>(' + priceAccountant + iconWheat + ')';

    // BARTER BUTTONS ----------------------
    const barterInventoryOlive = (bushelCount[2] < barterMaxBulkCount) ? bushelCount[2] : barterMaxBulkCount;
    const barterInventoryDate = (bushelCount[3] < barterMaxBulkCount) ? bushelCount[3] : barterMaxBulkCount;
    const barterInventoryFig = (bushelCount[4] < barterMaxBulkCount) ? bushelCount[4] : barterMaxBulkCount;
    const barterInventoryPom = (bushelCount[5] < barterMaxBulkCount) ? bushelCount[5] : barterMaxBulkCount;
    const barterInventoryGrape = (bushelCount[6] < barterMaxBulkCount) ? bushelCount[6] : barterMaxBulkCount;
    const barterValueOlive = barterInventoryOlive * barterExchangeRate[2];
    const barterValueDate = barterInventoryDate * barterExchangeRate[3];
    const barterValueFig = barterInventoryFig * barterExchangeRate[4];
    const barterValuePom = barterInventoryPom * barterExchangeRate[5];
    const barterValueGrape = barterInventoryGrape * barterExchangeRate[6];
    buttonBarterOlive.innerHTML = barterInventoryOlive + iconOlive + ' ' + iconSell + ' ' + formatterStandard.format(barterValueOlive) + iconWheat;
    buttonBarterDate.innerHTML = barterInventoryDate + iconDate + ' ' + iconSell + ' ' + formatterStandard.format(barterValueDate) + iconWheat;
    buttonBarterFig.innerHTML = barterInventoryFig + iconFig + ' ' + iconSell + ' ' + formatterStandard.format(barterValueFig) + iconWheat;
    buttonBarterPom.innerHTML = barterInventoryPom + iconPom + ' ' + iconSell + ' ' + formatterStandard.format(barterValuePom) + iconWheat;
    buttonBarterGrape.innerHTML = barterInventoryGrape + iconGrape + ' ' + iconSell + ' ' + formatterStandard.format(barterValueGrape) + iconWheat;

    // NEW VIEW BUTTONS --------------------
    buttonBuyForest.innerHTML = displayLabelForest + '<br>(' + priceForest + iconWheat + ')';
    buttonBuyMountain.innerHTML = displayLabelQuarry + '<br>(' + priceQuarry + iconWheat + ')';
    buttonFound.innerHTML = displayLabelFound + '<br>(' + formatterStandard.format(priceVillage) + iconWheat + ')';

    // FARM INFO ---------------------------
    let tableString = '<table><tr><td>' + displayWheat + '&nbsp;' + iconWheat + ':&nbsp;</td><td>' + formatterStandard.format(bushelCount[0]) + '</td></tr>';
    if (farmStage > 16) { tableString += '<tr><td>' + displayBarley + '&nbsp;' + iconBarley + ':&nbsp;</td><td>' + formatterStandard.format(bushelCount[1]) + '</td></tr>'; }
    if (player.seesOlives) { tableString += '<tr><td>' + displayOlive + '&nbsp;' + iconOlive + ':&nbsp;</td><td>' + formatterStandard.format(bushelCount[2]) + '</td></tr>'; }
    if (farmStage > 17) {
        tableString += '<tr><td>' + displayDate + '&nbsp;' + iconDate + ':&nbsp;</td><td>' + formatterStandard.format(bushelCount[3]) + '</td></tr>';
        tableString += '<tr><td>' + displayFig + '&nbsp;' + iconFig + ':&nbsp;</td><td>' + formatterStandard.format(bushelCount[4]) + '</td></tr>';
        tableString += '<tr><td>' + displayPomegranate + '&nbsp;' + iconPom + ':&nbsp;</td><td>' + formatterStandard.format(bushelCount[5]) + '</td></tr>';
        tableString += '<tr><td>' + displayGrape + '&nbsp;' + iconGrape + ':&nbsp;</td><td>' + formatterStandard.format(bushelCount[6]) + '</td></tr>';
    }
    tableString += '</table>';
    const inStockDivider = '<br>-----------------<br>';
    divBushelCount.innerHTML = displayInStock + inStockDivider + tableString;

    let messageHandsHired = '<br>' + displayFieldhands + '&nbsp;' + iconFarmer + ': ' + formatterStandard.format(handsHired);
    if (starving[0]) { messageHandsHired += ' <span class=starving>' + displayStarving + '</span>'; }
    else { messageHandsHired += ' (-' + formatterStandard.format(handsHired) + iconWheat + '/' + displayWeek + ')'; }
    spanHandsCount.innerHTML = messageHandsHired + '<br><br>';

    tableString = '<table><tr><td><br>' + displayCrop + '</td><td>' + displayAcresFarmed + '</td><td>' + displayHarvested + '</td><td>' + displaySpent + '</td></tr>';
    tableString += '<tr><td>' + '----' + '</td><td>' + '----------' + '</td><td>' + '----------' + '</td><td>' + '--------' + '</td></tr>';
    const totalEaten = handsEaten + loggersEaten + sawyersEaten + masonsEaten + minersEaten + smeltersEaten;
    tableString += '<tr><td>' + iconWheat + '</td><td>' + formatterStandard.format(farmedCount[0]) + '</td><td>' + formatterStandard.format(harvestedCount[0]) + '</td><td>' + formatterStandard.format(spentCount[0] + soldCount[0] + seededCount[0] + totalEaten) + '</td></tr>';
    if (farmStage > 16) { tableString += '<tr><td>' + iconBarley + '</td><td>' + formatterStandard.format(farmedCount[1]) + '</td><td>' + formatterStandard.format(harvestedCount[1]) + '</td><td>' + formatterStandard.format(spentCount[1] + soldCount[1] + seededCount[1]) + '</td></tr>'; }
    if (player.seesOlives) { tableString += '<tr><td>' + iconOlive + '</td><td>' + formatterStandard.format(farmedCount[2]) + '</td><td>' + formatterStandard.format(harvestedCount[2]) + '</td><td>' + formatterStandard.format(spentCount[2] + soldCount[2]) + '</td></tr>'; }
    if (farmStage > 17) {
        tableString += '<tr><td>' + iconDate + '</td><td>' + formatterStandard.format(farmedCount[3]) + '</td><td>' + formatterStandard.format(harvestedCount[3]) + '</td><td>' + formatterStandard.format(spentCount[3] + soldCount[3]) + '</td></tr>';
        tableString += '<tr><td>' + iconFig + '</td><td>' + formatterStandard.format(farmedCount[4]) + '</td><td>' + formatterStandard.format(harvestedCount[4]) + '</td><td>' + formatterStandard.format(spentCount[4] + soldCount[4]) + '</td></tr>';
        tableString += '<tr><td>' + iconPom + '</td><td>' + formatterStandard.format(farmedCount[5]) + '</td><td>' + formatterStandard.format(harvestedCount[5]) + '</td><td>' + formatterStandard.format(spentCount[5] + soldCount[5]) + '</td></tr>';
        tableString += '<tr><td>' + iconGrape + '</td><td>' + formatterStandard.format(farmedCount[6]) + '</td><td>' + formatterStandard.format(harvestedCount[6]) + '</td><td>' + formatterStandard.format(spentCount[6] + soldCount[6]) + '</td></tr>';
    }
    tableString += '</table>';
    spanFarmReport.innerHTML = tableString;

    // FOREST ------------------------------
    tableString = '';
    let loggerCost = '(-' + formatterStandard.format(sawyersHired) + iconWheat + '/' + displayWeek + ')';
    let sawyerCost = '(-' + formatterStandard.format(sawyersHired) + iconWheat + '/' + displayWeek + ')';
    if (starving[1]) { loggerCost = '<span class=starving>' + displayStarving + '</span>'; }
    if (starving[2]) { sawyerCost = '<span class=starving>' + displayStarving + '</span>'; }

    if (player.canLog) { tableString += displayInStock + inStockDivider + '<table><tr><td>' + displayLogs + '&nbsp;' + iconLog + ':&nbsp;</td><td>' + formatterStandard.format(logsCount) + '</td><td>' + '' + '</td></tr>'; }
    if (player.canSaw) { tableString += '<tr><td>' + displayBoards + '&nbsp;' + iconBoard + ':&nbsp;</td><td>' + formatterStandard.format(boardsCount) + '</td><td>&nbsp;(-' + (sawyersHired * logsSawnPerWeek) + iconLog + '/' + displayWeek + ')</td></tr>'; }
    if (player.canLog) { tableString += '</table>'; }
    if (player.canLog) { tableString += '<br><table><tr><td>' + displayLumberjacks + '&nbsp;' + iconLogger + ':&nbsp;</td><td>' + formatterStandard.format(loggersHired) + '&nbsp;</td><td>' + loggerCost + '</td></tr>'; }
    if (player.canSaw) { tableString += '<tr><td>' + displaySawyers + '&nbsp;' + iconSawyer + ':&nbsp;</td><td>' + formatterStandard.format(sawyersHired) + '&nbsp;</td><td>' + sawyerCost + '</td></tr>'; }
    if (player.canLog) { tableString += '</table>'; }

    if (player.seesReport) {
        if (player.canLog) tableString += '<table>';
        if (player.canLog) { tableString += '<tr><td><br>' + displayGood + '</td><td>' + displayScoreProduced + '</td><td>' + displayScoreSpent + '</td></tr>'; }
        if (player.canLog) { tableString += '<tr><td>----</td><td>---------</td><td>------</td></tr>'; }
        if (player.canLog) { tableString += '<tr><td>' + iconLog + '</td><td>' + formatterStandard.format(forestProducedCount[0]) + '</td><td>' + formatterStandard.format(forestSpentCount[0]) + '</td></tr>'; }
        if (player.canSaw) { tableString += '<tr><td>' + iconBoard + '</td><td>' + formatterStandard.format(forestProducedCount[1]) + '</td><td>' + formatterStandard.format(forestSpentCount[1]) + '</td></tr>'; }
        if (player.canLog) tableString += '</table>';
    }

    spanForestReport.innerHTML = tableString;

    if (!player.canLog) { buttonForest.innerHTML = displayLabelLogCamp + '<br>(' + priceLoggingCamp + iconWheat + ')'; }
    else if (!player.canSaw) { buttonForest.innerHTML = displayLabelSawmill + '<br>(' + priceSawmill + iconWheat + ')'; }

    // MOUNTAIN ----------------------------
    if (player.seesMountain) {
        let masonCost = '(-' + formatterStandard.format(masonsHired) + iconWheat + '/' + displayWeek + ')';
        let minerCost = '(-' + formatterStandard.format(minersHired) + iconWheat + '/' + displayWeek + ')';
        let smelterCost = '(-' + formatterStandard.format(smeltersHired) + iconWheat + '/' + displayWeek + ')';
        if (starving[3]) { masonCost = '<span class=starving>' + displayStarving + '</span>'; }
        if (starving[4]) { minerCost = '<span class=starving>' + displayStarving + '</span>'; }
        if (starving[5]) { smelterCost = '<span class=starving>' + displayStarving + '</span>'; }

        tableString = '<table>';
        tableString += '<tr><td>' + displayStone + '&nbsp;' + iconStone + ':&nbsp;</td><td>' + formatterStandard.format(stoneCount) + '</td><td>' + '' + '</td></tr>';
        if (player.canMine) { tableString += '<tr><td>' + displayOre + '&nbsp;' + iconOre + ':&nbsp;</td><td>' + formatterStandard.format(oreCount) + '</td><td>' + '' + '</td></tr>'; }
        if (player.canSmelt) { tableString += '<tr><td>' + displayCopper + '&nbsp;' + iconCopper + ':&nbsp;</td><td>' + formatterStandard.format(copperCount) + '</td><td>&nbsp;(-' + (0 * 0) + iconOre + '/' + displayWeek + ')</td></tr>'; }
        tableString += '</table><br><table>';
        tableString += '<tr><td>' + displayMasons + '&nbsp;' + iconMason + ':&nbsp;</td><td>' + formatterStandard.format(masonsHired) + '</td><td>&nbsp;' + masonCost + '</td></tr>';
        if (player.canMine) { tableString += '<tr><td>' + displayMiners + '&nbsp;' + iconMiner + ':&nbsp;</td><td>' + formatterStandard.format(minersHired) + '</td><td>&nbsp;' + minerCost + '</td></tr>'; }
        if (player.canSmelt) { tableString += '<tr><td>' + displayCindermen + '&nbsp;' + iconSmelter + ':&nbsp;</td><td>' + formatterStandard.format(smeltersHired) + '</td><td>&nbsp;' + smelterCost + '</td></tr>'; }
        tableString += '</table>';

        if (player.seesReport) {
            tableString += '<br><table>';
            tableString += '<tr><td><br>' + displayGood + '</td><td>' + displayHomersProduced + '</td><td>' + displayHomersSpent + '</td></tr>';
            tableString += '<tr><td>----</td><td>---------</td><td>-------</td></tr>';
            tableString += '<tr><td>' + iconStone + '</td><td>' + formatterStandard.format(mountainProducedCount[0]) + '</td><td>' + formatterStandard.format(mountainSpentCount[0]) + '</td></tr>';
            if (player.canMine) { tableString += '<tr><td>' + iconOre + '</td><td>' + formatterStandard.format(mountainProducedCount[1]) + '</td><td>' + formatterStandard.format(mountainSpentCount[1]) + '</td></tr>'; }
            if (player.canSmelt) { tableString += '<tr><td>' + iconCopper + '</td><td>' + formatterStandard.format(mountainProducedCount[2]) + '</td><td>' + formatterStandard.format(mountainSpentCount[2]) + '</td></tr>'; }
            tableString += '</table>';
        }

        divViewMountain.innerHTML += '<br><div class=rowCentered>' + displayInStock + inStockDivider + tableString + '</div>';
    }

    // VILLAGE INFO ------------------------
    let messageResidents = '';
    let messageRent = '';
    let messageTreasury = '';
    let messageHorses = '';
    let messageBeads = '';
    let messageTrophies = '';
    let messageScrolls = '';
    let messageRats = '';
    let messageDefense = '';
    if (villageStage > 3) {
        messageResidents = displayResidents + ': ' + residentsCount + '/' + residentsMax + '<br>';
        messageRent = displayRent + ': ' + currencySymbol + rentPrice + '/' + displayResidents + '/' + displayWeek + '<br>';
        messageTreasury = displayTreasury + ': ' + currencySymbol + formatterStandard.format(asCount) + '<br><br>';
        if (horsesSpawn) {
            let tempHorseIcon = displayHorses;
            if (trophiesSpawn) { tempHorseIcon = '🏇'; }
            messageHorses = '<br>' + tempHorseIcon + ': ' + formatterStandard.format(horsesCount);
            messageRent += '🐴: +' + horsesIncAmount + displayHorses + '/' + displayYear + '<br>';
            if (cityWalls) {
                messageDefense = '<br>' + iconSword + ': 3 ' + iconShield + ': 100';
                const knightsMax = Math.floor(residentsCount / 2);
                let knightsCount = horsesCount;
                if (knightsCount > knightsMax) { knightsCount = knightsMax; }
                messageHorses += ' 🏹: ' + formatterStandard.format(knightsCount) + '/' + knightsMax;
            }
            messageHorses += '<br>';
        }
        if (beadsSpawn) {
            messageBeads = displayBeads + ': ' + formatterStandard.format(beadsCount) + '<br>';
            messageRent += '🙏: +' + beadsIncAmount + displayBeads + '/' + displayMonth + '<br>';
        }
        if (trophiesSpawn) { messageTrophies = iconTrophy + ': ' + formatterStandard.format(trophiesCount) + '<br>'; }
        if (scrollsSpawn) {
            messageScrolls = iconScroll + ': ' + formatterStandard.format(scrollsCount) + '<br>';
            messageRent += '🧙‍♂️:  +' + scrollsIncAmount + iconScroll + '/' + displaySeason + '<br>';
        }
        if (ratsSpawn) {
            messageRats = iconRattata + ': ' + formatterStandard.format(ratsCount);
            if (ratsOutbreak) { messageRats += ' <span class=starving>' + displayRatPlague + '</span>' }
            messageRats += '<br>';
        }
    }
    divVillageStatistics.innerHTML = messageResidents + messageTreasury + messageRent + messageHorses + messageBeads + messageTrophies + messageScrolls + messageRats + messageDefense;

    // BUILD BUTTON ------------------------
    if (villageStage == 0) { buttonBuild.innerHTML = displayLabelBuild0 + '<br>(' + priceBuild0 + iconWheat + ')'; }
    else if (villageStage == 1) { buttonBuild.innerHTML = displayLabelBuild1 + '<br>(' + priceBuild1 + iconWheat + ')'; }
    else if (villageStage == 2) { buttonBuild.innerHTML = displayLabelBuild2 + '<br>(' + priceBuild2 + iconWheat + ')'; }
    else if (villageStage == 3) { buttonBuild.innerHTML = displayLabelBuild3 + '<br>(' + priceBuild3 + iconWheat + ')'; }
    else if (villageStage == 4) { buttonBuild.innerHTML = displayLabelBuild4 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild4) + ')'; }
    else if (villageStage == 5) { buttonBuild.innerHTML = displayLabelBuild5 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild5[0]) + ' + ' + priceBuild5[1] + iconWheat + ')'; }
    else if (villageStage == 6) { buttonBuild.innerHTML = displayLabelBuild6 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild6) + ')'; }
    else if (villageStage == 7) { buttonBuild.innerHTML = displayLabelBuild7 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild7) + ')'; }
    else if (villageStage == 8) { buttonBuild.innerHTML = displayLabelBuild8 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild8[0]) + ' + ' + priceBuild8[1] + iconWheat + ')'; }
    else if (villageStage == 9) { buttonBuild.innerHTML = displayLabelBuild9 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild9) + ')'; }
    else if (villageStage == 10) { buttonBuild.innerHTML = displayLabelBuild10 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild10[0]) + ' + ' + priceBuild10[1] + iconWheat + ')'; }
    else if (villageStage == 11) { buttonBuild.innerHTML = displayLabelBuild11 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild11[0]) + ' + ' + priceBuild11[1] + iconWheat + ' + ' + priceBuild11[2] + displayHorses + ')'; }
    else if (villageStage == 12) { buttonBuild.innerHTML = displayLabelBuild12 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild12[0]) + ' + ' + priceBuild12[1] + displayHorses + ')'; }
    else if (villageStage == 13) { buttonBuild.innerHTML = displayLabelBuild13 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild13) + ')'; }
    else if (villageStage == 14) { buttonBuild.innerHTML = displayLabelBuild14 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild14[0]) + ' + ' + priceBuild14[1] + displayBeads + ')'; }
    else if (villageStage == 15) { buttonBuild.innerHTML = displayLabelBuild15 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild15) + ')'; }
    else if (villageStage == 16) { buttonBuild.innerHTML = displayLabelBuild16 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild16) + ')'; }
    else if (villageStage == 17) { buttonBuild.innerHTML = displayLabelBuild17 + '<br>(' + currencySymbol + formatterStandard.format(priceBuild17[0]) + ' + ' + priceBuild17[1] + displayBeads + ' + ' + priceBuild17[2] + iconScroll + ')'; }

    // SELL BUTTON -------------------------
    buttonSellGrain.innerHTML = bushelBulkCount + iconWheat + ' ' + iconSell + ' ' + currencySymbol + currentBushelPrice;
}



function UpdateVisibilities() {
    divOverlaySystemMessage.style.display = player.seesSystemMessage ? 'block' : '';
    divOverlayForeword.style.display = player.seesForeword ? 'block' : '';
    divBushelCount.style.display = player.seesStock ? 'block' : '';
    divOverlayGameEvent.style.display = player.seesGameEvent ? 'block' : '';
    spanFarmReport.style.display = player.seesReport ? 'block' : '';
    spanHandsCount.style.display = player.seesFarmers ? 'block' : '';
    divViewForest.style.display = player.seesForest ? 'block' : '';
    divViewMountain.style.display = player.seesMountain ? 'block' : '';

    buttonTill.style.display = player.canTill ? 'inline-block' : '';
    buttonPlant.style.display = player.canPlant ? 'inline-block' : '';
    buttonWater.style.display = player.canWater ? 'inline-block' : '';
    buttonHarvest.style.display = player.canHarvest ? 'inline-block' : '';
    buttonBuyLand.style.display = player.canBuyLand ? 'inline-block' : '';
    buttonBuyForest.style.display = player.canBuyForest ? 'inline-block' : '';
    buttonBuyMountain.style.display = player.canBuyMountain ? 'inline-block' : '';
    buttonForest.style.display = !player.canSaw ? 'inline-block' : '';
    buttonHire.style.display = player.canHire ? 'block' : '';
    buttonAudit.style.display = player.canAudit ? 'inline-block' : '';
    buttonPriority.style.display = player.canDelegate ? 'inline-block' : '';
    buttonFound.style.display = player.canFound ? 'inline-block' : '';
    buttonBuild.style.display = player.canBuild ? 'inline-block' : '';
    buttonSellGrain.style.display = player.canSell ? 'block' : '';
    buttonBarterOlive.style.display = player.canBarter ? 'inline-block' : '';
    buttonBarterDate.style.display = (player.canBarter && farmStage > 17) ? 'inline-block' : '';
    buttonBarterFig.style.display = (player.canBarter && farmStage > 17) ? 'inline-block' : '';
    buttonBarterPom.style.display = (player.canBarter && farmStage > 17) ? 'inline-block' : '';
    buttonBarterGrape.style.display = (player.canBarter && farmStage > 17) ? 'inline-block' : '';
}



function RedrawFarm() {
    function PickCropTile(row, col) {
        let imageChoice = '';
        const arrayCropTiles = [
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAAD8ACD8IPITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR5EBQShBgYW0FOAVdGEIrSCQBwYIc5GIchlymAYF11WHHqAYOKJTPYEFSqjGlEIwgQn0GJaVDEDJQULrDrCmSxg0rIylgIBQ+ByCRgnbUBgNSuHkbp5KAl6LplRx8UfXsaXz5jIQMjTAocelaLU1eBc0B7PH0wBgkAEQA7             alt=0raw',
            'R0lGODlhEAAQAOMKAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAAD8APITAPITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAARoEBQShBgYW0FOAVdGjOMhAMCBFQMxGIQhwyiAYG61yagHDLqQxkJIpTItUpEgQHxEI9iMgsIFd4ZDNqVDDgkFjwsaHZ2qAFd5Cj4cW9eYrPihWJAWQ48rVDI5byJJUxJpP0AbeVoJABEAOw==                                 alt=1tilled',
            'R0lGODlhEAAQAOMMAAAAADgAAFwAAIAAAJwQCARwALQ4HAScANZ4HgTMAOKXTwD8APITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR5EBQShBhDYSvIKcCVDUSJeAIAHFhBDgZhGEqsAglGDBU3qx8Aj4NBDDiE1WpgVJSeAIIgAcKQSjEDIhZQ6XocwexgOKwqGubIQih8dlYn9pTyAoxY2czpXpLAHTM2IBQWaUdiQGciJHIKbH4jeHpaElFCQ2FlBgsAEQA7             alt=2seeded',
            'R0lGODlhEAAQAOMPAAAAADgAAFwAAIAAAJwQCABEhABQnABYtARwALQ4HAScALlwaATMAMOJdwD8APITACH5BAEKAA8ALAAAAAAQABAAAASCECAShBijYSuIQsCVDUS5eAIAKBhCDsZRGE1CqACDGUXFFQXVB9DjYBYDS+GmWA2QjZIUQBAwQDvZQWZY2AIqTJGjLCgSzaLmOVIiPgQMJlpKnFJhwIK3BRoSUW9OQD5KfzYSRD5rSQJBK4oiJHQNFkxyDTwFfQl2iTc8hRYJQA4AEQA7 alt=3watered',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAARsEBQShBgYW0FOAVdGjOMhAMCBFQMxGIQhwyiAYG61yagHDLqQxkJIpTItUpEgQHwyiZEhMaOgcMGd4bBN6ZBDQsHjEpFgzNoA4JISqOjxsZWNyYofigVpMfS8QkpMHHNQSVUSbD9AG31cCgARADs=                             alt=4growing0',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR1EBQShBgYW0FOAVdGjOMhAMCBFQORGIRhvAQKIBgxVJuMeoDdJjPY1A6pQSLnGgEIAsQnkxjNZLAAKsfbCGQHA/LAI2o4BY9ONKJBbYOnMuaSjdLJVpeDrX0oFkQWBj8pFUotJFAceVQtL3YST0FCXmIGCgARADs=                 alt=5growing1',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR0EBQShBgYW0FOAdeQDERJJIcAAAdWkIlBGEZMrACCEUO10SsPoLfJDDa3A0u0O5UABAHik0mUajRZYLXzbQS0g0F58FU1nIKHxzTZorgBVDQ70UrqJcnLyd4+FBZGFgZBLBVtViUWSUaJfhJQQ0RfYwYKABEAOw==                 alt=6growing2',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR2EBQShBh4JCvIKcClDURJJIcAAAdWkIlBGEZMrACCEUPF0asPoMcZDTi3A8tYSpQABAEClHHOYjTKaucTbAS0g0F5qCSqGAuh8OGNTLYobgDVzE7ZNZnL6dBkElA+GGcWBkEsFW9WUR1LGYt/NyA3GF2GYgoAEQA7                 alt=7growing3',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR4EBQShBh4JCvIKcClDURJJIcAAAdWkIlBGEZMrACCEUPF0asPQMMZDTi3A8tYSpQABAEClHHOYjTKaucTbAS0g0F5qCSqGAuh8OGNTLYobgDVzE7ZNZnrVdNkElABGxhnFgZBLBVvVlEdSxmMfzcgNxhdFigGCgARADs=             alt=8growing4',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR3EBQShBh4JCvIKcClDURJJIcAAAdWkIlBGEZMrACCEUO1CbTVB6DhjAac24F1LCVKAIIAAco8ZzEaZYVJVCw/2sGwPPisGAuh8OGNTDYpbhDVnE7addnuU9NkElEBG11IQEIsFW9XUh1MGYt/NyA3GF8cKAYKABEAOw==             alt=9growing5',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR5EBQSkhh4WCHIKcClDURJJIcAAAdWkIlBGEZMrACCEUMgbLTVB6DhXBIY4+3AGpFOJQBBgABlEqcaTRZYYRI+DtBwILN8yG+yU/jwRibbFDeQaqAxGaHdxKI5MzQ3IBQWahwGQmdHMCaATRlweTISUgBIYUYoBgoAEQA7             alt=10growing6',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR3EBQSkhh4WCHIKcClDURJJIcAAAdWkIkRywaxAghGDIGwGYbVB6DhXBIYo+3AGpFOJQBBgACNEicakLLCJHqcn+EwZvWQ3mSn8NmNTLGSqivVQGcldhN75hCANRJSFSJIHEEsZkcwJn5NGW8zgSA2SGBGKAYKABEAOw==             alt=11growing7',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR3EBQSkhh4WCHIKcClDURJJIcAAAdWkIkRywaxAghGDIGwGYbVB6DhXBIYo+3AGpFOJQBBgACNEicakLLCJHqcn+EwZvWQ3mSn8NmNTLGSqivVQGcldhN75hCANRJSFSJIHEEsZkcwJn5NGW8xcYI2SGBGKAYKABEAOw==             alt=12growing8',
            'R0lGODlhEAAQAOMLAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAAD8APITAPITAPITAPITAPITACH5BAEKAA8ALAAAAAAQABAAAAR3EBQSkhh4WCHIKcClDURJJIcAAAdWkIkRywaxAkhCDoGwGYbVB6DhXHQDo+3AGpFOJQBBgACNEicakLLCJHqcn+EwZvWQTg6h8CF4n9mSqivVQGcldhN7VgNrElIVIjocQSxmRzAmak0ZI1kxNiA2OmBGKAYKABEAOw==             alt=13growing9',
        ];
        if (arrayFarmPlots[row][col] == 14) {
            if (row > 5) {
                const arrayBarleyTiles = [
                    'R0lGODlhEAAQAOMMAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAP9c4wTMAOiQAAD8AMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAAR8EBQSlBhoDCsEOQhybRhCEMohAAA4FANqKMZsECyQKPEQCJwa61AAIDgZ3qDjaRmPJdQJQBAkiiSFjFajsDSKXydoOJRbP15S0yEUiCFSSHZafU0bKff0buXTbTU3ElQVI2oCBkNPFzxSIW1+GWAxNDQ4RTg8YkwpBgsAEQA7',
                    'R0lGODlhEAAQAOMMAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAPJY2ATMAOiQAAD8AMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAAR8EBQSlBhoDCsEOQhybRhCEMohAAA4FANqKMZsECyQKPEQCJwa61AAIDgZ3qDjaRmPJdQJQBAkiiSFjFajsDSKXydoOJRbP15S0yEUiCFSSHZafU0bKff0buXTbTU3ElQVI2oCBkNPFzxSIW1+GWAxNDQ4RTg8YkwpBgsAEQA7',
                    'R0lGODlhEAAQAOMMAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAOVTzQTMAOiQAAD8AMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAAR8EBQSlBhoDCsEOQhybRhCEMohAAA4FANqKMZsECyQKPEQCJwa61AAIDgZ3qDjaRmPJdQJQBAkiiSFjFajsDSKXydoOJRbP15S0yEUiCFSSHZafU0bKff0buXTbTU3ElQVI2oCBkNPFzxSIW1+GWAxNDQ4RTg8YkwpBgsAEQA7',
                    'R0lGODlhEAAQAOMMAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAP926AD8AMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAAR8EBQSkhhqDCsEOYpybZhCEMkhAAA4FANqJMZsECyAJPEQCJwa61AAKDgZ3qDjaRmPJdQJQBAgiqSEjFajsDSJXydoOJRbP15S0yEUiCFSSHZafU0bKff0buXTbTU3ElQVI2oCBkNPFzxSIW1+GWAxNDQ4RTg8YkwpBgsAEQA7',
                    'R0lGODlhEAAQAOMMAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAP+P7AD8AMysAMysAMysAMysACH5BAEKAA8ALAAAAAAQABAAAAR8EBQSkhhqDCsEOYpybZhCEMkhAAA4FANqJMZsECyAJPEQCJwa61AAKDgZ3qDjaRmPJdQJQBAgiqSEjFajsDSJXydoOJRbP15S0yEUiCFSSHZafU0bKff0buXTbTU3ElQVI2oCBkNPFzxSIW1+GWAxNDQ4RTg8YkwpBgsAEQA7',
                ];
                imageChoice = arrayBarleyTiles[FindWholeRandom(0, 4)];
            }
            else {
                const arrayWheatTiles = [
                    'R0lGODlhEAAQAIQAAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAMysAAD8AOXBAPzIFP/dJv/jTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKABAALAAAAAAQABAAAAWIIFAQQSIMyjCYgkAcDHOuqEIQySEAADwUA5whYRgaCDwAIhEcBASsIu9QADRYDNqg5epZr4MY7gYgCBBVWkJILJJ4qsSzFTUc7L0ns6FtEQpUDg40DQ1CNztwDgQrY203gD2Nen5FRyJlJTNMDgIGUwAPDydMY4J+kg8qNGyXVUhMc1w5BgsAIQA7',
                    'R0lGODlhEAAQAIQAAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAMysAAD8AOXBAPzIFP/dJv/jTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKABAALAAAAAAQABAAAAWIIFAQQSIMzDCYgkAcTXOuKEMQySEAADwUA5whYRgaCDwAIhEcBASsIu9QADhYDdqg5epZr4MY7gYgCBBVWkJILJJ4qsSzFTUc7L0n06FtEQpUDw80Dg5CNztwDwQrY203gD2Nen5FRyJlJTNMDwIGUwAKCidMY4J+kgoqNGyXVUhMc1w5BgsAIQA7',
                    'R0lGODlhEAAQAIQAAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAMysAAD8AOXBAPzIFP/dJv/jTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKABAALAAAAAAQABAAAAWIIFAQQSIMzTCYgkAcjnOuaEMQySEAADwUA5whYRgaCDwAIhEcBASsIu9QADxYDtqg5epZr4MY7gYgCBBVWkJILJJ4qsSzFTUc7L0n86FtEQpUCgo0Dw9CNztwCgQrY203gD2Nen5FRyJlJTNMCgIGUwAMDCdMY4J+kgwqNGyXVUhMc1w5BgsAIQA7',
                    'R0lGODlhEAAQAIQAAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAMysAAD8AOXBAPzIFP/dJv/jTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKABAALAAAAAAQABAAAAWIIFAQQSIMzjCYgkAcz3OuqEMQySEAADwUA5whYRgaCDwAIhEcBASsIu9QAChYD9qg5epZr4MY7gYgCBBVWkJILJJ4qsSzFTUc7L0nU6FtEQpUDAw0CgpCNztwDAQrY203gD2Nen5FRyJlJTNMDAIGUwANDSdMY4J+kg0qNGyXVUhMc1w5BgsAIQA7',
                    'R0lGODlhEAAQAIQAAAAAADgAAFwAAIAAAJwQCARwALQ4HAScAATMAOiQAMysAAD8AOXBAPzIFP/dJv/jTQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKABAALAAAAAAQABAAAAWIIFAQQSIMzzCYgkAcinKu6EMQySEAADwUA5whYRgaCDwAIhEcBASsIu9QADBYCtqg5epZr4MY7gYgCBBVWkJILJJ4qsSzFTUc7L0nk6FtEQpUDQ00DAxCNztwDQQrY203gD2Nen5FRyJlJTNMDQIGUwAODidMY4J+kg4qNGyXVUhMc1w5BgsAIQA7',
                ];
                imageChoice = arrayWheatTiles[FindWholeRandom(0, 4)];
            }
        }
        else { imageChoice = arrayCropTiles[arrayFarmPlots[row][col]]; }
        return imgOpen + imageChoice + imgClose;
    }

    function PickOliveTile(tree) {
        return (arrayOlivar[tree] == 0) ? tileBareTree : tileFullTree;
    }

    function PickDatePalmTile(palm) {
        return (arrayDatePalmGrove[palm] == 0) ? tileBarePalm : tileFullPalm;
    }

    function PickFigTile(fig) {
        return (arrayFigOrchard[fig] == 0) ? tileBareFig : tileFullFig;
    }

    function PickPomTile(pom) {
        return (arrayPomOrchard[pom] == 0) ? tileBarePom : tileFullPom;
    }

    function PickGrapeTile(grape, post) {
        let tileChoice = tileGrapeTrellisEmpty;
        if (post) { tileChoice = tileGrapeTrellisPostNW; }
        return (arrayVineyard[grape] == 0) ? tileChoice : tileGrapeTrellisFull;
    }

    const arrayFarmGraph = [
        [
            PickCropTile(0, 0),
        ],
    ];

    if (farmStage > 0) {
        document.documentElement.style.setProperty('--farm-margin-top', '80px');
        document.documentElement.style.setProperty('--farm-margin-bottom', '48px');
        document.documentElement.style.setProperty('--farm-width', '256px');
        document.documentElement.style.setProperty('--tileResolution', '128px');

        arrayFarmGraph[0].push(
            PickCropTile(0, 1),
        );
    }

    if (farmStage > 1) {
        document.documentElement.style.setProperty('--farm-margin-top', '104px');
        document.documentElement.style.setProperty('--farm-margin-bottom', '72px');
        document.documentElement.style.setProperty('--farm-width', '320px');
        document.documentElement.style.setProperty('--tileResolution', '80px');

        arrayFarmGraph[0].push(
            PickCropTile(0, 2),
            PickCropTile(0, 3),
        );
    }

    if (farmStage > 2) {
        document.documentElement.style.setProperty('--farm-margin-top', '80px');
        document.documentElement.style.setProperty('--farm-margin-bottom', '48px');
        document.documentElement.style.setProperty('--farm-width', '256px');
        document.documentElement.style.setProperty('--tileResolution', '64px');

        arrayFarmGraph.push(
            [
                PickCropTile(1, 0),
                PickCropTile(1, 1),
                PickCropTile(1, 2),
                PickCropTile(1, 3),
            ],
        );
    }

    if (farmStage > 3) {
        document.documentElement.style.setProperty('--farm-margin-top', '80px');
        document.documentElement.style.setProperty('--farm-margin-bottom', '50px');
        document.documentElement.style.setProperty('--farm-width', '294px');
        document.documentElement.style.setProperty('--tileResolution', '42px');

        arrayFarmGraph[0].push(
            PickCropTile(0, 4),
            PickCropTile(0, 5),
            PickCropTile(0, 6),
        );

        arrayFarmGraph[1].push(
            PickCropTile(1, 4),
            PickCropTile(1, 5),
            PickCropTile(1, 6),
        );

        arrayFarmGraph.push(
            [
                PickCropTile(2, 0),
                PickCropTile(2, 1),
                PickCropTile(2, 2),
                PickCropTile(2, 3),
                PickCropTile(2, 4),
                PickCropTile(2, 5),
                PickCropTile(2, 6),
            ],
        );
    }

    if (farmStage > 4) {
        document.documentElement.style.setProperty('--farm-margin-top', '64px');
        document.documentElement.style.setProperty('--farm-margin-bottom', '32px');
        document.documentElement.style.setProperty('--farm-width', '288px');
        document.documentElement.style.setProperty('--tileResolution', '32px');

        arrayFarmGraph.unshift(
            [
                tileLawn,
                tileFencePrimH,
                tileFencePrimH,
                tileFencePrimH,
                tileFencePrimH,
                tileFencePrimH,
                tileFencePrimH,
                tileFencePrimH,
                tileLawn,
            ],
        );

        arrayFarmGraph[1].unshift(tileFencePrimV,);
        arrayFarmGraph[1].push(tileFencePrimV,);

        arrayFarmGraph[2].unshift(tileFencePrimV,);
        arrayFarmGraph[2].push(tileFencePrimV,);

        arrayFarmGraph[3].unshift(tileFencePrimV,);
        arrayFarmGraph[3].push(tileFencePrimV,);

        arrayFarmGraph.push(
            [
                tileLawn,
                tileFencePrimH,
                tileFencePrimH,
                tileFencePrimH,
                tileLawn,
                tileFencePrimH,
                tileFencePrimH,
                tileFencePrimH,
                tileLawn,
            ],
        );
    }

    if (farmStage > 5) {
        arrayFarmGraph.unshift(
            [
                tileForest,
                tileTrees,
                tileForest,
                tileForest,
                tileTrees,
                tileForest,
                tileTrees,
                tileForest,
                tileForest,
            ],
            [
                tileForest,
                tileTrees,
                tileTrees,
                tileTrees,
                tileTrees,
                tileTrees,
                tileTrees,
                tileForest,
                tileForest,
            ],
            [
                tileTrees,
                tileTrees,
                tileTrees,
                tileShrubs4,
                tileShrubs4,
                tileTrees,
                tileTrees,
                tileTrees,
                tileForest,
            ],
            [
                tileTrees,
                tileShrubs4,
                tileShrubs3,
                tileDeadTree,
                tileShrubs4,
                tileShrubs3,
                tileShrubs4,
                tileTrees,
                tileTrees,
            ],
            [
                tileShrubs3,
                tileStump,
                tileShrubs2,
                tileLawn,
                tileLawn,
                tileShrubs2,
                tileFullTree,
                tileShrubs4,
                tileTrees,
            ],
            [
                tileShrubs1,
                tileLawn,
                tileDeadTree,
                tileLawn,
                tileStump,
                tileLawn,
                tileLawn,
                tileLawn,
                tileShrubs2,
            ],
        );
    }

    if (farmStage > 6) {
        arrayFarmGraph[4][1] = tileLawn;
        arrayFarmGraph[5][4] = tileLawn;
    }

    if (farmStage > 7) {
        arrayFarmGraph[3][3] = tileLawn;
        arrayFarmGraph[5][2] = tileLawn;
    }

    if (farmStage > 8) {
        arrayFarmGraph[0][0] = tileShrubs4;
        arrayFarmGraph[0][1] = tileLawn;
        arrayFarmGraph[0][2] = tileLawn;
        arrayFarmGraph[0][3] = tileLawn;
        arrayFarmGraph[0][4] = tileLawn;
        arrayFarmGraph[0][5] = tileLawn;
        arrayFarmGraph[0][6] = tileLawn;
        arrayFarmGraph[0][7] = tileLawn;
        arrayFarmGraph[0][8] = tileShrubs3;

        arrayFarmGraph[1][0] = tileShrubs1;
        arrayFarmGraph[1][1] = tileShrubs2;
        arrayFarmGraph[1][2] = tileLawn;
        arrayFarmGraph[1][3] = tileLawn;
        arrayFarmGraph[1][4] = tileLawn;
        arrayFarmGraph[1][5] = tileLawn;
        arrayFarmGraph[1][6] = tileLawn;
        arrayFarmGraph[1][7] = tileShrubs2;
        arrayFarmGraph[1][8] = tileTrees;

        arrayFarmGraph[2][0] = tileShrubs3;
        arrayFarmGraph[2][1] = tileLawn;
        arrayFarmGraph[2][2] = tileLawn;
        arrayFarmGraph[2][3] = tileLawn;
        arrayFarmGraph[2][4] = tileLawn;
        arrayFarmGraph[2][5] = tileLawn;
        arrayFarmGraph[2][6] = tileLawn;
        arrayFarmGraph[2][7] = tileShrubs1;
        arrayFarmGraph[2][8] = tileShrubs4;

        arrayFarmGraph[3][0] = tileLawn;
        arrayFarmGraph[3][1] = tileLawn;
        arrayFarmGraph[3][2] = tileLawn;
        arrayFarmGraph[3][3] = tileLawn;
        arrayFarmGraph[3][4] = tileLawn;
        arrayFarmGraph[3][5] = tileLawn;
        arrayFarmGraph[3][6] = tileLawn;
        arrayFarmGraph[3][7] = tileLawn;
        arrayFarmGraph[3][8] = tileShrubs3;

        arrayFarmGraph[4][0] = tileLawn;
        arrayFarmGraph[4][1] = tileLawn;
        arrayFarmGraph[4][2] = tileLawn;
        arrayFarmGraph[4][3] = tileLawn;
        arrayFarmGraph[4][4] = tileLawn;
        arrayFarmGraph[4][5] = tileShrubs2;
        arrayFarmGraph[4][7] = tileLawn;
        arrayFarmGraph[4][8] = tileLawn;

        arrayFarmGraph[5][0] = tileLawn;
    }

    if (farmStage > 9) {
        arrayFarmGraph[2][2] = PickOliveTile(0);
        arrayFarmGraph[3][2] = PickOliveTile(1);
        arrayFarmGraph[4][2] = PickOliveTile(2);

        arrayFarmGraph[2][4] = PickOliveTile(3);
        arrayFarmGraph[3][4] = PickOliveTile(4);
        arrayFarmGraph[4][4] = PickOliveTile(5);

        arrayFarmGraph[2][6] = PickOliveTile(6);
        arrayFarmGraph[3][6] = PickOliveTile(7);
        arrayFarmGraph[4][6] = PickOliveTile(8);

        arrayFarmGraph[1][1] = tileLawn;
        arrayFarmGraph[1][7] = tileLawn;
        arrayFarmGraph[2][7] = tileLawn;
        arrayFarmGraph[4][5] = tileLawn;
    }

    if (farmStage > 10) {
        document.documentElement.style.setProperty('--farm-margin-top', '112px');
        document.documentElement.style.setProperty('--tileResolution', '16px');

        arrayFarmGraph[8][1] = PickCropTile(0, 7);
        arrayFarmGraph[8][2] = PickCropTile(0, 8);
        arrayFarmGraph[8][3] = PickCropTile(0, 9);
        arrayFarmGraph[8][4] = PickCropTile(0, 10);
        arrayFarmGraph[8][5] = PickCropTile(0, 11);
        arrayFarmGraph[8][6] = PickCropTile(0, 12);
        arrayFarmGraph[8][7] = PickCropTile(0, 13);

        arrayFarmGraph[9][1] = PickCropTile(1, 0);
        arrayFarmGraph[9][2] = PickCropTile(1, 1);
        arrayFarmGraph[9][3] = PickCropTile(1, 2);
        arrayFarmGraph[9][4] = PickCropTile(1, 3);
        arrayFarmGraph[9][5] = PickCropTile(1, 4);
        arrayFarmGraph[9][6] = PickCropTile(1, 5);
        arrayFarmGraph[9][7] = PickCropTile(1, 6);

        arrayFarmGraph[0].push(
            tileShrubs4,
            tileShrubs2,
            tileLawn,
            tileShrubs1,
            tileLawn,
            tileLawn,
            tileShrubs3,
            tileLawn,
            tileShrubs4,
        );

        arrayFarmGraph[1].push(
            tileForest,
            tileShrubs3,
            tileShrubs2,
            tileShrubs1,
            tileLawn,
            tileRocks,
            tileShrubs2,
            tileShrubs4,
            tileTrees,
        );

        arrayFarmGraph[2].push(
            tileTrees,
            tileShrubs2,
            tileRocks,
            tileLawn,
            tileLawn,
            tileLawn,
            tileShrubs2,
            tileLawn,
            tileTrees,
        );

        arrayFarmGraph[3].push(
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileShrubs2,
            tileShrubs4,
            tileLawn,
            tileLawn,
            tileShrubs3,
        );

        arrayFarmGraph[4].push(
            tileLawn,
            tileShrubs2,
            tileLawn,
            tileLawn,
            tileWell,
            tileShrubs2,
            tileLawn,
            tileShrubs3,
            tileRocks,
        );

        arrayFarmGraph[5].push(
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileShrubs1,
            tileShrubs2,
        );

        arrayFarmGraph[6].push(
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
        );

        arrayFarmGraph[7].push(
            tileLawn,
            PickCropTile(1, 7),
            PickCropTile(1, 8),
            PickCropTile(1, 9),
            PickCropTile(1, 10),
            PickCropTile(1, 11),
            PickCropTile(1, 12),
            PickCropTile(1, 13),
            tileLawn,
        );

        arrayFarmGraph[8].push(
            tileLawn,
            PickCropTile(2, 0),
            PickCropTile(2, 1),
            PickCropTile(2, 2),
            PickCropTile(2, 3),
            PickCropTile(2, 4),
            PickCropTile(2, 5),
            PickCropTile(2, 6),
            tileShrubs2,
        );

        arrayFarmGraph[9].push(
            tileLawn,
            PickCropTile(2, 7),
            PickCropTile(2, 8),
            PickCropTile(2, 9),
            PickCropTile(2, 10),
            PickCropTile(2, 11),
            PickCropTile(2, 12),
            PickCropTile(2, 13),
            tileLawn,
        );

        arrayFarmGraph[10].push(
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
        );
    }

    if (farmStage > 11) {
        arrayFarmGraph[0][0] = tileFenceNW;
        arrayFarmGraph[0][1] = tileFenceH;
        arrayFarmGraph[0][2] = tileFenceH;
        arrayFarmGraph[0][3] = tileFenceH;
        arrayFarmGraph[0][4] = tileFenceH;
        arrayFarmGraph[0][5] = tileFenceH;
        arrayFarmGraph[0][6] = tileFenceH;
        arrayFarmGraph[0][10] = tileLawn;
        arrayFarmGraph[0][11] = tileFenceH;
        arrayFarmGraph[0][12] = tileFenceH;
        arrayFarmGraph[0][13] = tileFenceH;
        arrayFarmGraph[0][14] = tileFenceH;
        arrayFarmGraph[0][15] = tileFenceH;
        arrayFarmGraph[0][16] = tileFenceH;
        arrayFarmGraph[0][17] = tileFenceNE;

        arrayFarmGraph[1][0] = tileFenceV;
        arrayFarmGraph[1][8] = tileLawn;
        arrayFarmGraph[1][9] = tileLawn;
        arrayFarmGraph[1][17] = tileFenceV;

        arrayFarmGraph[2][0] = tileFenceV;
        arrayFarmGraph[2][17] = tileFenceV;

        arrayFarmGraph[3][0] = tileFenceV;
        arrayFarmGraph[3][17] = tileFenceV;

        arrayFarmGraph[4][0] = tileFenceV;

        arrayFarmGraph[5][0] = tileFenceV;
        arrayFarmGraph[5][17] = tileFenceV;

        arrayFarmGraph[6][0] = tileFenceV2E;
        arrayFarmGraph[6][1] = tileFenceH;
        arrayFarmGraph[6][2] = tileFenceH;
        arrayFarmGraph[6][3] = tileFenceH;
        arrayFarmGraph[6][4] = tileLawn;
        arrayFarmGraph[6][5] = tileFenceH;
        arrayFarmGraph[6][6] = tileFenceH;
        arrayFarmGraph[6][7] = tileFenceH;
        arrayFarmGraph[6][10] = tileFenceH;
        arrayFarmGraph[6][11] = tileFenceH;
        arrayFarmGraph[6][12] = tileFenceH;
        arrayFarmGraph[6][14] = tileFenceH;
        arrayFarmGraph[6][15] = tileFenceH;
        arrayFarmGraph[6][16] = tileFenceH;
        arrayFarmGraph[6][17] = tileFenceV2W;

        arrayFarmGraph[7][0] = tileFenceV;
        arrayFarmGraph[7][8] = tileLawn;
        arrayFarmGraph[7][17] = tileFenceV;

        arrayFarmGraph[8][0] = tileFenceV;
        arrayFarmGraph[8][8] = tileLawn;
        arrayFarmGraph[8][17] = tileFenceV;

        arrayFarmGraph[9][0] = tileFenceV;
        arrayFarmGraph[9][8] = tileLawn;
        arrayFarmGraph[9][17] = tileFenceV;

        arrayFarmGraph[10][0] = tileFenceSW;
        arrayFarmGraph[10][1] = tileFenceH;
        arrayFarmGraph[10][2] = tileFenceH;
        arrayFarmGraph[10][3] = tileFenceH;
        arrayFarmGraph[10][5] = tileFenceH;
        arrayFarmGraph[10][6] = tileFenceH;
        arrayFarmGraph[10][7] = tileFenceH;
        arrayFarmGraph[10][10] = tileFenceH;
        arrayFarmGraph[10][11] = tileFenceH;
        arrayFarmGraph[10][12] = tileFenceH;
        arrayFarmGraph[10][14] = tileFenceH;
        arrayFarmGraph[10][15] = tileFenceH;
        arrayFarmGraph[10][16] = tileFenceH;
        arrayFarmGraph[10][17] = tileFenceSE;
    }

    if (farmStage > 12) {
        document.documentElement.style.setProperty('--farm-margin-top', '96px');
        document.documentElement.style.setProperty('--farm-width', '320px');

        arrayFarmGraph[0].unshift(tileShrubs1,);
        arrayFarmGraph[0].push(tileTrees,);

        arrayFarmGraph[1].unshift(tileTrees,);
        arrayFarmGraph[1].push(tileShrubs4,);

        arrayFarmGraph[2].unshift(tileShrubs4,);
        arrayFarmGraph[2].push(tileShrubs2,);

        arrayFarmGraph[3].unshift(tileShrubs2,);
        arrayFarmGraph[3].push(tileShrubs4,);

        arrayFarmGraph[4].unshift(tileLawn,);
        arrayFarmGraph[4].push(tileShrubs2,);

        arrayFarmGraph[5].unshift(tileShrubs2,);
        arrayFarmGraph[5].push(tileLawn,);

        arrayFarmGraph[6].unshift(tileLawn,);
        arrayFarmGraph[6].push(tileLawn,);

        arrayFarmGraph[7].unshift(tileLawn,);
        arrayFarmGraph[7].push(tileLawn,);

        arrayFarmGraph[8].unshift(tileLawn,);
        arrayFarmGraph[8].push(tileLawn,);

        arrayFarmGraph[9].unshift(tileLawn,);
        arrayFarmGraph[9].push(tileLawn,);

        arrayFarmGraph[10].unshift(tileLawn,);
        arrayFarmGraph[10].push(tileLawn,);

        arrayFarmGraph.unshift(
            [
                tileForest,
                tileTrees,
                tileShrubs4,
                tileShrubs3,
                tileStump,
                tileShrubs2,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileShrubs1,
                tileLawn,
                tilePathN2E,
                tilePathH,
                tilePathN2W,
                tileShrubs3,
            ],
        );

        arrayFarmGraph.push(
            [
                tileShrubs1,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                PickCropTile(3, 0),
                PickCropTile(3, 1),
                PickCropTile(3, 2),
                PickCropTile(3, 3),
                PickCropTile(3, 4),
                PickCropTile(3, 5),
                PickCropTile(3, 6),
                tileLawn,
                tileLawn,
                PickCropTile(4, 7),
                PickCropTile(4, 8),
                PickCropTile(4, 9),
                PickCropTile(4, 10),
                PickCropTile(4, 11),
                PickCropTile(4, 12),
                PickCropTile(4, 13),
                tileLawn,
                tileDeadTree,
            ],
            [
                tileLawn,
                tileLawn,
                PickCropTile(3, 7),
                PickCropTile(3, 8),
                PickCropTile(3, 9),
                PickCropTile(3, 10),
                PickCropTile(3, 11),
                PickCropTile(3, 12),
                PickCropTile(3, 13),
                tileLawn,
                tileLawn,
                PickCropTile(5, 0),
                PickCropTile(5, 1),
                PickCropTile(5, 2),
                PickCropTile(5, 3),
                PickCropTile(5, 4),
                PickCropTile(5, 5),
                PickCropTile(5, 6),
                tileShrubs3,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                PickCropTile(4, 0),
                PickCropTile(4, 1),
                PickCropTile(4, 2),
                PickCropTile(4, 3),
                PickCropTile(4, 4),
                PickCropTile(4, 5),
                PickCropTile(4, 6),
                tileLawn,
                tileLawn,
                PickCropTile(5, 7),
                PickCropTile(5, 8),
                PickCropTile(5, 9),
                PickCropTile(5, 10),
                PickCropTile(5, 11),
                PickCropTile(5, 12),
                PickCropTile(5, 13),
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                tileLawn,
                tileShrubs2,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tilePathH,
            ],
        );
    }

    if (farmStage > 13) {
        arrayFarmGraph[0][9] = tilePathV;
        arrayFarmGraph[0][10] = tilePathV;

        arrayFarmGraph[1][9] = tilePathV;
        arrayFarmGraph[1][10] = tilePathV;

        arrayFarmGraph[2][9] = tilePathV;
        arrayFarmGraph[2][10] = tilePathV;

        arrayFarmGraph[3][9] = tilePathV;
        arrayFarmGraph[3][10] = tilePathV;

        arrayFarmGraph[4][9] = tilePathV;
        arrayFarmGraph[4][10] = tilePathV;

        arrayFarmGraph[5][9] = tilePathV2E;
        arrayFarmGraph[5][10] = tilePathCross;
        arrayFarmGraph[5][11] = tilePathH;
        arrayFarmGraph[5][12] = tilePathH;
        arrayFarmGraph[5][13] = tilePathH;

        arrayFarmGraph[6][9] = tilePathV;
        arrayFarmGraph[6][10] = tilePathV;
        arrayFarmGraph[6][14] = tilePathV;

        arrayFarmGraph[7][9] = tilePathV;
        arrayFarmGraph[7][10] = tilePathV;
        arrayFarmGraph[7][14] = tilePathV;

        arrayFarmGraph[8][9] = tilePathV;
        arrayFarmGraph[8][10] = tilePathV;

        arrayFarmGraph[9][9] = tilePathV;
        arrayFarmGraph[9][10] = tilePathV;

        arrayFarmGraph[10][9] = tilePathV;
        arrayFarmGraph[10][10] = tilePathV;

        arrayFarmGraph[11][1] = tileFenceV;
        arrayFarmGraph[11][2] = tileLawn;
        arrayFarmGraph[11][3] = tileLawn;
        arrayFarmGraph[11][4] = tileLawn;
        arrayFarmGraph[11][6] = tilePathH;
        arrayFarmGraph[11][7] = tilePathH;
        arrayFarmGraph[11][8] = tilePathH;
        arrayFarmGraph[11][9] = tilePathCross;
        arrayFarmGraph[11][10] = tilePathCross;
        arrayFarmGraph[11][11] = tilePathH;
        arrayFarmGraph[11][12] = tilePathH;
        arrayFarmGraph[11][13] = tileLawn;
        arrayFarmGraph[11][14] = tilePathH;
        arrayFarmGraph[11][15] = tilePathH;
        arrayFarmGraph[11][16] = tilePathH;
        arrayFarmGraph[11][17] = tilePathH;
        arrayFarmGraph[11][18] = tileFenceV;

        arrayFarmGraph[12][1] = tileFenceV;
        arrayFarmGraph[12][3] = tilePathH;
        arrayFarmGraph[12][4] = tilePathH;
        arrayFarmGraph[12][5] = tilePathH;
        arrayFarmGraph[12][7] = tilePathH;
        arrayFarmGraph[12][8] = tilePathH;
        arrayFarmGraph[12][9] = tilePathCross;
        arrayFarmGraph[12][10] = tilePathCross;
        arrayFarmGraph[12][11] = tilePathH;
        arrayFarmGraph[12][13] = tilePathH;
        arrayFarmGraph[12][14] = tilePathH;
        arrayFarmGraph[12][16] = tilePathH;
        arrayFarmGraph[12][18] = tileFenceV;

        arrayFarmGraph[13][1] = tileFenceV;
        arrayFarmGraph[13][10] = tilePathV;
        arrayFarmGraph[13][18] = tileFenceV;

        arrayFarmGraph[14][1] = tileFenceV;
        arrayFarmGraph[14][10] = tilePathV;
        arrayFarmGraph[14][18] = tileFenceV;

        arrayFarmGraph[15][1] = tileFenceV;
        arrayFarmGraph[15][18] = tileFenceV;

        arrayFarmGraph[16][1] = tileFenceSW;
        arrayFarmGraph[16][2] = tileFenceH;
        arrayFarmGraph[16][3] = tileFenceH;
        arrayFarmGraph[16][4] = tileFenceH;
        arrayFarmGraph[16][6] = tileFenceH;
        arrayFarmGraph[16][7] = tileFenceH;
        arrayFarmGraph[16][8] = tileFenceH;
        arrayFarmGraph[16][11] = tileFenceH;
        arrayFarmGraph[16][12] = tileFenceH;
        arrayFarmGraph[16][13] = tileFenceH;
        arrayFarmGraph[16][15] = tileFenceH;
        arrayFarmGraph[16][16] = tileFenceH;
        arrayFarmGraph[16][17] = tileFenceH;
        arrayFarmGraph[16][18] = tileFenceSE;
    }

    if (farmStage > 14) {
        arrayFarmGraph[0][8] = tileRoughPathR;
        arrayFarmGraph[0][9] = tileCobblestoneW;
        arrayFarmGraph[0][10] = tileCobblestoneE;
        arrayFarmGraph[0][11] = tileRoughPathL;

        arrayFarmGraph[1][7] = tilePlinth;
        arrayFarmGraph[1][8] = tileRoughPathR;
        arrayFarmGraph[1][9] = tileCobblestoneW;
        arrayFarmGraph[1][10] = tileCobblestoneE;
        arrayFarmGraph[1][11] = tileRoughPathL;
        arrayFarmGraph[1][12] = tilePlinth;

        arrayFarmGraph[2][8] = tileRoughPathR;
        arrayFarmGraph[2][9] = tileCobblestoneW;
        arrayFarmGraph[2][10] = tileCobblestoneE;
        arrayFarmGraph[2][11] = tileRoughPathL;

        arrayFarmGraph[3][8] = tileRoughPathR;
        arrayFarmGraph[3][9] = tileCobblestoneEdgeW;
        arrayFarmGraph[3][10] = tileCobblestoneEdgeE;
        arrayFarmGraph[3][11] = tileRoughPathL;
    }

    if (farmStage > 15) {
        arrayFarmGraph[3][4] = tilePathV;

        arrayFarmGraph[4][2] = tileWell;
        arrayFarmGraph[4][4] = tilePathV;
        arrayFarmGraph[4][6] = tilePathV;

        arrayFarmGraph[5][2] = tilePathV;
        arrayFarmGraph[5][4] = tilePathV;

        arrayFarmGraph[6][2] = tilePathN2E;
        arrayFarmGraph[6][3] = tilePathH;
        arrayFarmGraph[6][4] = tilePathH2N;
        arrayFarmGraph[6][5] = tilePathH2S;
        arrayFarmGraph[6][6] = tilePathH2N;
        arrayFarmGraph[6][7] = tilePathH;
        arrayFarmGraph[6][8] = tilePathH;
        arrayFarmGraph[6][9] = tilePathCross;
        arrayFarmGraph[6][10] = tilePathV2W;

        arrayFarmGraph[7][5] = tilePathV;
    }

    if (farmStage > 16) {
        arrayFarmGraph.push(
            [
                tileLawn,
                tileFenceV,
                PickCropTile(6, 0),
                PickCropTile(6, 1),
                PickCropTile(6, 2),
                PickCropTile(6, 3),
                PickCropTile(6, 4),
                PickCropTile(6, 5),
                PickCropTile(6, 6),
                PickCropTile(6, 7),
                PickCropTile(6, 8),
                PickCropTile(6, 9),
                PickCropTile(6, 10),
                PickCropTile(6, 11),
                PickCropTile(6, 12),
                PickCropTile(6, 13),
                tileLawn,
                tileLawn,
                tileFenceV,
                tileLawn,
            ],
            [
                tileLawn,
                tileFenceV,
                PickCropTile(7, 0),
                PickCropTile(7, 1),
                PickCropTile(7, 2),
                PickCropTile(7, 3),
                PickCropTile(7, 4),
                PickCropTile(7, 5),
                PickCropTile(7, 6),
                PickCropTile(7, 7),
                PickCropTile(7, 8),
                PickCropTile(7, 9),
                PickCropTile(7, 10),
                PickCropTile(7, 11),
                PickCropTile(7, 12),
                PickCropTile(7, 13),
                tilePathH,
                tilePathS2W,
                tileFenceV,
                tileLawn,
            ],
            [
                tileLawn,
                tileFenceV,
                PickCropTile(8, 0),
                PickCropTile(8, 1),
                PickCropTile(8, 2),
                PickCropTile(8, 3),
                PickCropTile(8, 4),
                PickCropTile(8, 5),
                PickCropTile(8, 6),
                PickCropTile(8, 7),
                PickCropTile(8, 8),
                PickCropTile(8, 9),
                PickCropTile(8, 10),
                PickCropTile(8, 11),
                PickCropTile(8, 12),
                PickCropTile(8, 13),
                tileRocks,
                tileWell,
                tileFenceV,
                tileShrubs2,
            ],
            [
                tileShrubs4,
                tileFenceSW,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileLawn,
                tileShrubs2,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceSE,
                tileShrubs4,
            ],
            [
                tileTrees,
                tileShrubs3,
                tileShrubs4,
                tileShrubs2,
                tileLawn,
                tileShrubs1,
                tileLawn,
                tileShrubs2,
                tileShrubs3,
                tileLawn,
                tileLawn,
                tileLawn,
                tileShrubs1,
                tileLawn,
                tileShrubs2,
                tileShrubs4,
                tileShrubs3,
                tileShrubs4,
                tileTrees,
                tileForest,
            ],
        );
    }

    if (farmStage > 17) {
        document.documentElement.style.setProperty('--farm-margin-top', '64px');
        document.documentElement.style.setProperty('--farm-width', '384px');

        arrayFarmGraph[0].unshift(tileTrees, tileShrubs4,);
        arrayFarmGraph[0].push(tilePathV, tileRocks,);

        arrayFarmGraph[1].unshift(tileForest, tileTrees,);
        arrayFarmGraph[1].push(tilePathV, tileLawn,);

        arrayFarmGraph[2].unshift(tileForest, tileShrubs3,);
        arrayFarmGraph[2].push(tilePathV, tileLawn,);

        arrayFarmGraph[3].unshift(tileTrees, tileLawn,);
        arrayFarmGraph[3].push(tilePathV, tileLawn,);

        arrayFarmGraph[4].unshift(tileShrubs4, tilePathV,);
        arrayFarmGraph[4].push(tilePathV, tileLawn,);

        arrayFarmGraph[5].unshift(tileShrubs2, tileLawn,);
        arrayFarmGraph[5].push(tilePathV, tileLawn,);

        arrayFarmGraph[6].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[6].push(tilePathV, tileLawn,);

        arrayFarmGraph[7].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[7].push(tilePathV, tileLawn,);

        arrayFarmGraph[8].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[8].push(tilePathV, tileLawn,);

        arrayFarmGraph[9].unshift(tileLawn, tileLawn,);
        arrayFarmGraph[9].push(tilePathV, tileLawn,);

        arrayFarmGraph[10].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[10].push(tilePathN2E, tilePathS2W,);

        arrayFarmGraph[11].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[11].push(tileRocks, tilePathV,);

        arrayFarmGraph[12].unshift(tileLawn, tileLawn,);
        arrayFarmGraph[12].push(tilePathS2E, tilePathN2W,);

        arrayFarmGraph[13].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[13].push(tilePathV, tileLawn,);

        arrayFarmGraph[14].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[14].push(tilePathV, tileLawn,);

        arrayFarmGraph[15].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[15].push(tilePathV, tileLawn,);

        arrayFarmGraph[16].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[16].push(tilePathV, tileLawn,);

        arrayFarmGraph[17].unshift(tileLawn, tilePathV2E,);
        arrayFarmGraph[17].push(tilePathV2W, tileLawn,);

        arrayFarmGraph[18].unshift(tileLawn, tilePathV,);
        arrayFarmGraph[18].push(tilePathV, tileLawn,);

        arrayFarmGraph[19].unshift(tileLawn, tileLawn,);
        arrayFarmGraph[19].push(tilePathV, tileLawn,);

        arrayFarmGraph[20].unshift(tileLawn, tileLawn,);
        arrayFarmGraph[20].push(tilePathV, tileLawn,);

        arrayFarmGraph[21].unshift(tileLawn, tileLawn,);
        arrayFarmGraph[21].push(tilePathV, tileLawn,);

        arrayFarmGraph[22].unshift(tileLawn, tileLawn,);
        arrayFarmGraph[22].push(tilePathV, tileLawn,);

        arrayFarmGraph.unshift(
            [
                tileForest,
                tileForest,
                tileForest,
                tileTrees,
                tileBigTreeSW,
                tileBigTreeSE,
                tileTrees,
                tileShrubs4,
                tileShrubs1,
                tileLawn,
                tileRoughPathR,
                tileCobblestoneW,
                tileCobblestoneE,
                tileRoughPathL,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileRiverN2E,
                tileRiverH,
                tileRiverN2W,
            ],
            [
                tileForest,
                tileForest,
                tileTrees,
                tileForest,
                tileTrees,
                tileShrubs4,
                tileShrubs3,
                tileLawn,
                tileHitchingPostV,
                tileLawn,
                tileRoughPathR,
                tileCobblestoneW,
                tileCobblestoneE,
                tileRoughPathL,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathS2W,
                tileRocks,
                tilePathS2E,
                tilePathH,
                tilePathS2W,
                tileLawn,
            ],
        );

        arrayFarmGraph.push(
            [
                tileLawn,
                tileLawn,
                tileShrubs1,
                tileFenceNW,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceNE,
                tileTrees,
                tilePathV,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                tileLawn,
                tileFenceV,
                PickDatePalmTile(0),
                PickDatePalmTile(1),
                tilePathV,
                PickDatePalmTile(2),
                PickDatePalmTile(3),
                tilePathV,
                PickFigTile(0),
                PickFigTile(1),
                PickFigTile(2),
                PickFigTile(3),
                tilePathV,
                PickFigTile(8),
                PickFigTile(9),
                tilePathV,
                PickOliveTile(9),
                PickOliveTile(10),
                tileFenceV,
                tileShrubs3,
                tilePathV,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceV,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH2S,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tileFenceV,
                tileShrubs2,
                tilePathV,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceV,
                PickDatePalmTile(4),
                PickDatePalmTile(5),
                tilePathV,
                PickDatePalmTile(6),
                PickDatePalmTile(7),
                tilePathV,
                tileLawn,
                tilePathV2E,
                tileWell,
                tileLawn,
                tilePathV,
                PickFigTile(10),
                PickFigTile(11),
                tilePathV,
                PickOliveTile(11),
                PickOliveTile(12),
                tileFenceV,
                tileLawn,
                tilePathV,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                tileLawn,
                tileFenceV,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH2N,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tileFenceV,
                tileLawn,
                tilePathV,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceV,
                PickDatePalmTile(8),
                PickDatePalmTile(9),
                tilePathV,
                PickDatePalmTile(10),
                PickDatePalmTile(11),
                tilePathV,
                PickFigTile(4),
                PickFigTile(5),
                PickFigTile(6),
                PickFigTile(7),
                tilePathV,
                PickFigTile(12),
                PickFigTile(13),
                tileLawn,
                PickOliveTile(13),
                PickOliveTile(14),
                tileFenceV,
                tileSignpostE,
                tilePathV,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceSW,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tilePathV,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tilePathV,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileGateN,
                tileLawn,
                tilePathV,
                tileLawn,
            ],
            [
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tileGateM,
                tilePathH,
                tilePathH2N,
                tilePathH,
            ],
            [
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tileGateM,
                tilePathH,
                tilePathH,
                tilePathH,
            ],
            [
                tileLawn,
                tilePathV,
                tileSignpostW,
                tileFenceNW,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tilePathV,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tilePathV,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileGateS,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceV,
                PickPomTile(0),
                PickPomTile(1),
                tilePathV,
                PickPomTile(2),
                tilePathS2E,
                tilePathH2N,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH2N,
                tilePathS2W,
                tileLawn,
                tilePathV,
                PickPomTile(9),
                PickPomTile(10),
                tileFenceV,
                tileShrubs3,
                tileHitchingPostH,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceV,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathV2W,
                PickGrapeTile(0, true),
                PickGrapeTile(1, false),
                tileGrapeTrellisPostNE,
                PickGrapeTile(4, true),
                PickGrapeTile(5, false),
                tileGrapeTrellisPostNE,
                tileLawn,
                tileLawn,
                tilePathCross,
                tilePathH,
                tilePathH,
                tileFenceV,
                tileShrubs2,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                tileLawn,
                tileFenceV,
                PickPomTile(3),
                PickPomTile(4),
                tilePathV,
                PickPomTile(5),
                tilePathV,
                PickGrapeTile(2, false),
                PickGrapeTile(3, false),
                tileGrapeTrellisEdgeE,
                PickGrapeTile(6, false),
                PickGrapeTile(7, false),
                tileGrapeTrellisEdgeE,
                tileLawn,
                tileWell,
                tileLawn,
                PickPomTile(11),
                PickPomTile(12),
                tileFenceV,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceV,
                tilePathH,
                tilePathH,
                tilePathCross,
                tilePathH,
                tilePathV2W,
                tileGrapeTrellisPostSW,
                tileGrapeTrellisEdgeS,
                tileGrapeTrellisPostSE,
                tileGrapeTrellisPostSW,
                tileGrapeTrellisEdgeS,
                tileGrapeTrellisPostSE,
                tileLawn,
                tileLawn,
                tilePathCross,
                tilePathH,
                tilePathH,
                tileFenceV,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceV,
                PickPomTile(6),
                PickPomTile(7),
                tilePathV,
                PickPomTile(8),
                tilePathN2E,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathH,
                tilePathN2W,
                tileLawn,
                tilePathV,
                PickPomTile(13),
                PickPomTile(14),
                tileFenceV,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileFenceSW,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceH,
                tileFenceSE,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathV,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tilePathN2E,
                tilePathH,
                tilePathH,
                tileLawn,
                tilePathH,
                tilePathH,
                tileLawn,
                tilePathH,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
            [
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
                tileLawn,
            ],
        );
    }
    ////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////

    let finalFarmString = '';
    let rowCount = 0;
    for (let i = 0; i < arrayFarmGraph.length; i++) {
        let tileCount = 0;
        for (let i = 0; i < arrayFarmGraph[rowCount].length; i++) {
            finalFarmString += arrayFarmGraph[rowCount][tileCount];
            tileCount++;
        }
        finalFarmString += '<br>'
        rowCount++;
    }
    divFarm.innerHTML = finalFarmString;
}



function RedrawForest() {
    const arrayForestGraph = [
        [
            tilePineTree,
            tileRiverV,
            tileBigTreeSW,
            tileBigTreeSE,
            tileRiverV,
            tilePineTree,
            tilePineTree,
            tileTrees,
            tilePineTree,
            tileBigTreeSW,
            tileBigTreeSE,
            tilePathV,
            tilePathV,
            tilePineTree,
            tileShrubs4,
            tilePineTree,
            tileBigTreeSW,
            tileBigTreeSE,
            tileRiverS2E,
            tileRiverH,
            tileRiverH,
            tileRiverV2W,
            tilePineTree,
            tileRiverS2E,
        ],
        [
            tileRiverS2E,
            tileRiverN2W,
            tilePineTree,
            tileTrees,
            tileRiverV,
            tilePineTree,
            tileTrees,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tileShrubs2,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tilePineTree,
            tileShrubs4,
            tileRiverS2E,
            tileRiverN2W,
            tileBigTreeNW,
            tileBigTreeNE,
            tileRiverN2E,
            tileRiverH,
            tileRiverN2W,
        ],
        [
            tileRiverN2W,
            tilePineTree,
            tileForest,
            tileRiverS2E,
            tileRiverN2W,
            tileTrees,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tileShrubs3,
            tileLawn,
            tilePathV,
            tilePathV,
            tileLawn,
            tilePineTree,
            tileShrubs4,
            tileRiverS2E,
            tileRiverN2W,
            tileBigTreeNW,
            tileBigTreeNE2,
            tileBigTreeNW2,
            tileBigTreeNE,
            tileTrees,
            tilePineTree,
        ],
        [
            tilePineTree,
            tileForest,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tilePineTree,
            tileTrees,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tileLawn,
            tilePathV,
            tilePathV,
            tilePineTree,
            tileShrubs4,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tileBigTreeSW,
            tileBigTreeNW2,
            tileBigTreeNE2,
            tileBigTreeSE,
            tilePineTree,
            tilePineTree,
        ],
        [
            tileForest,
            tilePineTree,
            tileForest,
            tileRiverV,
            tileForest,
            tilePineTree,
            tilePineTree,
            tileTrees,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tilePathV,
            tilePathV,
            tileLawn,
            tilePineTree,
            tileRiverS2E,
            tileRiverN2W,
            tilePineTree,
            tilePineTree,
            tileBigTreeSW,
            tileBigTreeSE,
            tilePineTree,
            tileTrees,
            tilePineTree,
        ],
        [
            tilePineTree,
            tileForest,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tileBigTreeNW,
            tileBigTreeNE,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tilePineTree,
            tilePathV,
            tilePathV,
            tileLawn,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tileShrubs4,
            tileRocks,
            tilePineTree,
            tilePineTree,
            tileForest,
            tilePineTree,
            tileTrees,
        ],
        [
            tilePineTree,
            tileForest,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tileBigTreeSW,
            tileBigTreeSE,
            tilePineTree,
            tileShrubs4,
            tileShrubs2,
            tilePineTree,
            tilePathV,
            tilePathV,
            tileLawn,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tileShrubs3,
            tilePineTree,
            tileBigTreeNW,
            tileBigTreeNE,
            tileTrees,
            tileRocks,
            tileForest,
        ],
        [
            tilePineTree,
            tileForest,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tileForest,
            tilePineTree,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tilePineTree,
            tilePathV,
            tilePathV,
            tileLawn,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tileShrubs4,
            tilePineTree,
            tileBigTreeSW,
            tileBigTreeSE,
            tileForest,
            tilePineTree,
            tileTrees,
        ],
        [
            tileForest,
            tilePineTree,
            tileForest,
            tileRiverN2E,
            tileRiverHForest,
            tileRiverS2W,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tileShrubs3,
            tileShrubs4,
            tilePathV,
            tilePathV,
            tileLawn,
            tilePineTree,
            tileRiverV,
            tilePineTree,
            tilePineTree,
            tileLawn,
            tilePineTree,
            tileShrubs4,
            tilePineTree,
            tileRiverS2E,
            tileRiverH,
        ],
        [
            tileForest,
            tileForest,
            tilePineTree,
            tileForest,
            tileForest,
            tileRiverN2E,
            tileRiverH,
            tileRiverH,
            tileRiverH,
            tileRiverH,
            tileRiverH,
            tileBridgePrim,
            tileBridgePrim,
            tileRiverH,
            tileRiverH,
            tileRiverV2W,
            tileLawn,
            tilePineTree,
            tileLawn,
            tilePineTree,
            tileLawn,
            tilePineTree,
            tileRiverV,
            tilePineTree,
        ],
        [
            tileForest,
            tileForest,
            tileBigTreeNW,
            tileBigTreeNE,
            tileForest,
            tileTrees,
            tileTrees,
            tileTrees,
            tileShrubs4,
            tileShrubs2,
            tileShrubs4,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileRiverN2E,
            tileRiverS2W,
            tileBigTreeNW,
            tileBigTreeNE,
            tileLawn,
            tilePineTree,
            tileRiverS2E,
            tileRiverH2N,
            tileRiverH,
        ],
        [
            tilePineTree,
            tileBigTreeNW,
            tileBigTreeNE2,
            tileBigTreeSE,
            tilePineTree,
            tileTrees,
            tileShrubs4,
            tileShrubs2,
            tileLawn,
            tileLawn,
            tileLawn,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRiverV,
            tileBigTreeSW,
            tileBigTreeSE,
            tileRiverS2E,
            tileRiverH,
            tileRiverV2W,
            tileShrubs4,
            tilePineTree,
        ],
        [
            tileForest,
            tileBigTreeSW,
            tileBigTreeSE,
            tileForest,
            tileTrees,
            tileShrubs4,
            tileShrubs2,
            tileLawn,
            tileLawn,
            tilePineTree,
            tileLawn,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRiverN2E,
            tileRiverH,
            tileRiverH,
            tileRiverN2W,
            tileLawn,
            tileRiverV,
            tilePineTree,
            tileShrubs4,
        ],
        [
            tileForest,
            tilePineTree,
            tileForest,
            tilePineTree,
            tileBigTreeNW,
            tileBigTreeNE,
            tileShrubs4,
            tileShrubs2,
            tileLawn,
            tileLawn,
            tileLawn,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRocks,
            tileRiverV,
            tileRocks,
            tileRiverS2E,
        ],
    ];

    if (player.canLog) {
        arrayForestGraph[3][11] = tilePathCross;
        arrayForestGraph[3][12] = tilePathCross;

        arrayForestGraph[8][11] = tilePathV2W;
    }

    if (player.canSaw) {
        arrayForestGraph[7][11] = tilePathV2E;
        arrayForestGraph[7][12] = tilePathCross;
    }

    if (farmStage > 14) {
        arrayForestGraph[0][11] = tileCobblestoneW;
        arrayForestGraph[0][12] = tileCobblestoneE;
        arrayForestGraph[0][13] = tileRoughPathL;

        arrayForestGraph[1][10] = tileRoughPathR;
        arrayForestGraph[1][11] = tileCobblestoneW;
        arrayForestGraph[1][12] = tileCobblestoneE;
        arrayForestGraph[1][13] = tileRoughPathL;

        arrayForestGraph[2][10] = tileRoughPathR;
        arrayForestGraph[2][11] = tileCobblestoneW;
        arrayForestGraph[2][12] = tileCobblestoneE;
        arrayForestGraph[2][13] = tileRoughPathL;

        arrayForestGraph[3][10] = tileRoughPathR;
        arrayForestGraph[3][11] = tileCobblestoneW;
        arrayForestGraph[3][12] = tileCobblestoneE;
        arrayForestGraph[3][13] = tileRoughPathL;

        arrayForestGraph[4][10] = tileRoughPathR;
        arrayForestGraph[4][11] = tileCobblestoneW;
        arrayForestGraph[4][12] = tileCobblestoneE;
        arrayForestGraph[4][13] = tileRoughPathL;

        arrayForestGraph[5][10] = tileRoughPathR;
        arrayForestGraph[5][11] = tileCobblestoneW;
        arrayForestGraph[5][12] = tileCobblestoneE;
        arrayForestGraph[5][13] = tileRoughPathL;

        arrayForestGraph[6][10] = tileRoughPathR;
        arrayForestGraph[6][11] = tileCobblestoneW;
        arrayForestGraph[6][12] = tileCobblestoneE;
        arrayForestGraph[6][13] = tileRoughPathL;

        arrayForestGraph[7][10] = tileRoughPathR;
        arrayForestGraph[7][11] = tileCobblestoneW;
        arrayForestGraph[7][12] = tileCobblestoneE;
        arrayForestGraph[7][13] = tileRoughPathL;

        arrayForestGraph[8][10] = tileRoughPathR;
        arrayForestGraph[8][11] = tileCobblestoneW;
        arrayForestGraph[8][12] = tileCobblestoneE;
        arrayForestGraph[8][13] = tileRoughPathL;

        arrayForestGraph[9][11] = tileBridgeNew;
        arrayForestGraph[9][12] = tileBridgeNew;

        arrayForestGraph[10][10] = tileRoughPathR;
        arrayForestGraph[10][11] = tileCobblestoneW;
        arrayForestGraph[10][12] = tileCobblestoneE;
        arrayForestGraph[10][13] = tileRoughPathL;

        arrayForestGraph[11][10] = tileRoughPathR;
        arrayForestGraph[11][11] = tileCobblestoneW;
        arrayForestGraph[11][12] = tileCobblestoneE;
        arrayForestGraph[11][13] = tileRoughPathL;

        arrayForestGraph[12][10] = tileRoughPathR;
        arrayForestGraph[12][11] = tileCobblestoneW;
        arrayForestGraph[12][12] = tileCobblestoneE;
        arrayForestGraph[12][13] = tileRoughPathL;

        arrayForestGraph[13][10] = tileRoughPathR;
        arrayForestGraph[13][11] = tileCobblestoneW;
        arrayForestGraph[13][12] = tileCobblestoneE;
        arrayForestGraph[13][13] = tileRoughPathL;
    }

    if (player.canLog) {
        arrayForestGraph[1][5] = tileStumps;
        arrayForestGraph[1][15] = tileStumps;

        arrayForestGraph[2][5] = tilePathV;
        arrayForestGraph[2][14] = tileStumps;

        arrayForestGraph[3][5] = tilePathV2E;
        arrayForestGraph[3][6] = tilePathH;
        arrayForestGraph[3][7] = tilePathH;
        arrayForestGraph[3][8] = tilePathH;
        arrayForestGraph[3][9] = tilePathH;
        arrayForestGraph[3][10] = tilePathH;
        arrayForestGraph[3][13] = tilePathH;
        arrayForestGraph[3][14] = tilePathH;
        arrayForestGraph[3][15] = tilePathH;

        arrayForestGraph[4][4] = tileStumps;
        arrayForestGraph[4][5] = tilePathV;
        arrayForestGraph[4][8] = tileStumps;
        arrayForestGraph[4][14] = tileStumps;

        arrayForestGraph[5][2] = tileStumps;
        arrayForestGraph[5][4] = tileLogCampNW;
        arrayForestGraph[5][5] = tileLogCampN;
        arrayForestGraph[5][6] = tileLogCampNE;

        arrayForestGraph[6][1] = tileStumps;
        arrayForestGraph[6][2] = tileStumps;
        arrayForestGraph[6][4] = tileLogCampW;
        arrayForestGraph[6][5] = tileLogCampM;
        arrayForestGraph[6][6] = tileLogCampE;

        arrayForestGraph[7][1] = tileStumps;
        arrayForestGraph[7][4] = tileLogCampSW;
        arrayForestGraph[7][5] = tileLogCampS;
        arrayForestGraph[7][6] = tileLogCampSE;
        arrayForestGraph[7][7] = tileStumps;

        arrayForestGraph[8][6] = tilePathN2E;
        arrayForestGraph[8][7] = tilePathH;
        arrayForestGraph[8][8] = tilePathH;
        arrayForestGraph[8][9] = tilePathH;
        arrayForestGraph[8][10] = tilePathH;

        arrayForestGraph[9][3] = tileStumps;

        arrayForestGraph[10][5] = tileStumps;
    }

    if (player.canSaw) {
        arrayForestGraph[5][14] = tileStumps;
        arrayForestGraph[5][16] = tileStumps;

        arrayForestGraph[6][14] = tileStumps;
        arrayForestGraph[6][16] = tileLogCampNE;

        arrayForestGraph[7][13] = tilePathH;
        arrayForestGraph[7][14] = tileSawmillNW;
        arrayForestGraph[7][15] = tileSawmillNE;
        arrayForestGraph[7][16] = tileLogCampNE;

        arrayForestGraph[8][14] = tileSawmillSW;
        arrayForestGraph[8][15] = tileSawmillSE;
        arrayForestGraph[8][16] = tileStumps;
    }

    let finalForestString = '';
    let rowCount = 0;
    for (let i = 0; i < arrayForestGraph.length; i++) {
        let tileCount = 0;
        for (let i = 0; i < arrayForestGraph[rowCount].length; i++) {
            finalForestString += arrayForestGraph[rowCount][tileCount];
            tileCount++;
        }
        finalForestString += '<br>'
        rowCount++;
    }
    divForest.innerHTML = finalForestString;
}



function RedrawMountain() {
    const arrayMountainGraph = [
        [
            tileMountain,
            tileMountainPeak,
            tileMountain,
            tileMountain,
            tileMountainPeak,
            tileMountain,
            tileMountainFoothillsM,
            tileMountainPeak,
            tileMountain,
            tileMountainFoothillsE,
            tileShrubs3,
            tilePathV,
            tilePathV,
            tileLawn,
            tileMountainFoothillsW,
            tileMountain,
            tileMountainFoothillsM,
            tileMountain,
            tileMountainPeak,
            tileMountain,
            tileRiverS2EMountain,
            tileRiverN2WMountain,
            tileMountain,
            tileMountain,
        ],
        [
            tileMountainPeak,
            tileMountain,
            tileMountain,
            tileMountainFoothillsM,
            tileMountainPeak,
            tileQuarryN,
            tileMountain,
            tileMountain,
            tileMountainFoothillsE,
            tileLawn,
            tileLawn,
            tilePathV,
            tilePathV,
            tileMountainFoothillsW,
            tileMountain,
            tileMountainFoothillsE,
            tileMountain,
            tileMountainPeak,
            tileMountain,
            tileMountain,
            tileWaterfall,
            tileMountainPeak,
            tileMountain,
            tileMountain,
        ],
        [
            tileMountain,
            tileMountain,
            tileMountainPeak,
            tileMountain,
            tileQuarryW,
            tileEarth3,
            tileQuarryE1,
            tileMountainFoothillsM,
            tileMountain,
            tileMountainFoothillsE,
            tileLawn,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileMountainFoothillsW,
            tileMountainFoothillsM,
            tileMountainFoothillsM,
            tileMountain,
            tileMountainPeak,
            tileRiverN2EMountain,
            tileRiverS2WMountain,
            tileMountain,
            tileMountainPeak,
        ],
        [
            tileMountain,
            tileMountainFoothillsM,
            tileMountainPeak,
            tileQuarryW,
            tileEarth3,
            tileEarth,
            tileQuarryE2,
            tileMountain,
            tileMountainFoothillsE,
            tileLawn,
            tilePineTree,
            tilePathV,
            tilePathV,
            tileLawn,
            tileMountainFoothillsW,
            tileMountainFoothillsE,
            tileMountainFoothillsW,
            tileMountainFoothillsE,
            tileMountainFoothillsW,
            tileMountainFoothillsM,
            tileMountain,
            tileWaterfall,
            tileMountainFoothillsM,
            tileMountain,
        ],
        [
            tileMountainFoothillsM,
            tileMountain,
            tileMountainFoothillsE,
            tileEarthW,
            tileQuarryBuildings,
            tileEarth2,
            tileEarth4,
            tileQuarryE3,
            tilePathH,
            tilePathH,
            tilePathH,
            tilePathCross,
            tilePathV2W,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileMountainFoothillsW,
            tileRiverS2EMountain,
            tileRiverHMountain,
            tileRiverHMountain,
            tileRiverV2WMountain,
            tileMountainPeak,
            tileMountainFoothillsM,
        ],
        [
            tileMountain,
            tileMountainFoothillsM,
            tileMountainFoothillsE,
            tileEarthSW,
            tileEarthS,
            tileEarthS,
            tileEarthS,
            tileEarthSE,
            tileMountainFoothillsW,
            tileMountainFoothillsE,
            tileShrubs3,
            tilePathV,
            tilePathV,
            tileRiverS2E,
            tileRiverH,
            tileRiverS2W,
            tileRocks,
            tileRiverS2E,
            tileRiverN2WMountain,
            tileMountain,
            tileMountainPeak,
            tileRiverV,
            tileMountainFoothillsW,
            tileMountain,
        ],
        [
            tileMountain,
            tileMountain,
            tileMountainPeak,
            tileMountainFoothillsE,
            tileLawn,
            tileMountainFoothillsW,
            tileMountainFoothillsM,
            tileMountainFoothillsE,
            tileShrubs3,
            tileShrubs4,
            tileRiverS2E,
            tileBridgePrim,
            tileBridgePrim,
            tileRiverN2W,
            tileRocks,
            tileRiverN2E,
            tileRiverH,
            tileRiverN2W,
            tileMountainFoothillsW,
            tileMountainFoothillsE,
            tileRiverS2E,
            tileRiverH2N,
            tileRiverEndE,
            tileMountainFoothillsW,
        ],
        [
            tileMountainPeak,
            tileMountain,
            tileMountainFoothillsM,
            tileMountainFoothillsM,
            tileMountainFoothillsE,
            tileLawn,
            tileLawn,
            tileShrubs3,
            tileShrubs4,
            tileRiverS2E,
            tileRiverN2W,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRiverV,
            tileLawn,
            tileLawn,
            tileLawn,
        ],
        [
            tileMountainFoothillsM,
            tileMountainFoothillsE,
            tileLawn,
            tileLawn,
            tileLawn,
            tileShrubs3,
            tileShrubs4,
            tileRiverS2E,
            tileRiverH,
            tileRiverN2W,
            tileShrubs2,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRiverEndW,
            tileRiverV2W,
            tileLawn,
            tileLawn,
            tileLawn,
        ],
        [
            tileMountainFoothillsE,
            tileLawn,
            tileShrubs4,
            tilePineTree,
            tileShrubs4,
            tileRiverS2E,
            tileRiverH,
            tileRiverN2W,
            tileShrubs2,
            tileShrubs3,
            tileShrubs1,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRiverV,
            tileLawn,
            tileLawn,
            tileRiverS2E,
        ],
        [
            tileShrubs4,
            tileTrees,
            tileRiverS2E,
            tileRiverHForest,
            tileRiverHForest,
            tileRiverV2W,
            tileTrees,
            tileShrubs4,
            tileShrubs4,
            tileShrubs2,
            tileLawn,
            tilePathV,
            tilePathV,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRiverN2E,
            tileRiverH,
            tileRiverH2S,
            tileRiverN2W,
        ],
        [
            tileTrees,
            tileRiverS2E,
            tileRiverN2W,
            tileForest,
            tileForest,
            tileRiverV,
            tilePineTree,
            tileTrees,
            tileTrees,
            tileShrubs4,
            tileShrubs2,
            tilePathV,
            tilePathV,
            tileShrubs2,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRocks,
            tileRiverV,
            tileShrubs4,
        ],
        [
            tileForest,
            tileRiverV,
            tilePineTree,
            tileForest,
            tileRiverS2E,
            tileRiverN2W,
            tileForest,
            tileForest,
            tileBigTreeNW,
            tileBigTreeNE,
            tileShrubs4,
            tilePathV,
            tilePathV,
            tileShrubs3,
            tileShrubs2,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileLawn,
            tileRiverS2E,
            tileRiverN2W,
            tileShrubs3,
        ],
        [
            tilePineTree,
            tileRiverV,
            tileBigTreeNW,
            tileBigTreeNE,
            tileRiverV,
            tilePineTree,
            tileTrees,
            tilePineTree,
            tileBigTreeSW,
            tileBigTreeNW2,
            tileBigTreeNE,
            tilePathV,
            tilePathV,
            tileShrubs4,
            tilePineTree,
            tilePineTree,
            tileBigTreeNW,
            tileBigTreeNE,
            tileLawn,
            tilePineTree,
            tileShrubs3,
            tileRiverV,
            tilePineTree,
            tileShrubs2,
        ],
    ];

    if (player.canMine) {
        arrayMountainGraph[4][12] = tilePathCross;
    }

    if (player.canSmelt) {
        arrayMountainGraph[10][12] = tilePathV2E;
    }

    if (farmStage > 14) {
        arrayMountainGraph[0][10] = tileRoughPathR;
        arrayMountainGraph[0][11] = tileCobblestoneW;
        arrayMountainGraph[0][12] = tileCobblestoneE;
        arrayMountainGraph[0][13] = tileRoughPathL;

        arrayMountainGraph[1][10] = tileRoughPathR;
        arrayMountainGraph[1][11] = tileCobblestoneW;
        arrayMountainGraph[1][12] = tileCobblestoneE;
        arrayMountainGraph[1][13] = tileMountainFoothillsWRoad;

        arrayMountainGraph[2][10] = tileRoughPathR;
        arrayMountainGraph[2][11] = tileCobblestoneW;
        arrayMountainGraph[2][12] = tileCobblestoneE;
        arrayMountainGraph[2][13] = tileRoughPathL;

        arrayMountainGraph[3][11] = tileCobblestoneW;
        arrayMountainGraph[3][12] = tileCobblestoneE;
        arrayMountainGraph[3][13] = tileRoughPathL;

        arrayMountainGraph[4][11] = tileCobblestoneW;
        arrayMountainGraph[4][12] = tileCobblestoneE;
        arrayMountainGraph[4][13] = tileRoughPathL;

        arrayMountainGraph[5][10] = tileRoughPathR;
        arrayMountainGraph[5][11] = tileCobblestoneW;
        arrayMountainGraph[5][12] = tileCobblestoneE;
        arrayMountainGraph[5][13] = tileRiverS2ERoad;

        arrayMountainGraph[6][11] = tileBridgeNew;
        arrayMountainGraph[6][12] = tileBridgeNew;

        arrayMountainGraph[7][10] = tileRiverN2WRoad;
        arrayMountainGraph[7][11] = tileCobblestoneW;
        arrayMountainGraph[7][12] = tileCobblestoneE;
        arrayMountainGraph[7][13] = tileRoughPathL;

        arrayMountainGraph[8][10] = tileRoughPathR;
        arrayMountainGraph[8][11] = tileCobblestoneW;
        arrayMountainGraph[8][12] = tileCobblestoneE;
        arrayMountainGraph[8][13] = tileRoughPathL;

        arrayMountainGraph[9][10] = tileRoughPathR;
        arrayMountainGraph[9][11] = tileCobblestoneW;
        arrayMountainGraph[9][12] = tileCobblestoneE;
        arrayMountainGraph[9][13] = tileRoughPathL;

        arrayMountainGraph[10][10] = tileRoughPathR;
        arrayMountainGraph[10][11] = tileCobblestoneW;
        arrayMountainGraph[10][12] = tileCobblestoneE;
        arrayMountainGraph[10][13] = tileRoughPathL;

        arrayMountainGraph[11][10] = tileRoughPathR;
        arrayMountainGraph[11][11] = tileCobblestoneW;
        arrayMountainGraph[11][12] = tileCobblestoneE;
        arrayMountainGraph[11][13] = tileRoughPathL;

        arrayMountainGraph[12][10] = tileRoughPathR;
        arrayMountainGraph[12][11] = tileCobblestoneW;
        arrayMountainGraph[12][12] = tileCobblestoneE;
        arrayMountainGraph[12][13] = tileRoughPathL;

        arrayMountainGraph[13][11] = tileCobblestoneW;
        arrayMountainGraph[13][12] = tileCobblestoneE;
        arrayMountainGraph[13][13] = tileRoughPathL;
    }

    if (player.canMine) {
        arrayMountainGraph[2][18] = tileMineshaft;

        arrayMountainGraph[3][18] = tilePathN2WMountain;

        arrayMountainGraph[4][13] = tilePathH;
        arrayMountainGraph[4][14] = tilePathH;
        arrayMountainGraph[4][15] = tilePathH;
        arrayMountainGraph[4][16] = tilePathH;
        arrayMountainGraph[4][17] = tilePathN2WMountain;
    }

    if (player.canSmelt) {
        arrayMountainGraph[4][16] = tilePathH2S;

        arrayMountainGraph[5][16] = tilePathV;

        arrayMountainGraph[6][16] = tileBridgePrim;

        arrayMountainGraph[7][16] = tilePathV;

        arrayMountainGraph[8][14] = tileEarthNW;
        arrayMountainGraph[8][15] = tileEarthN;
        arrayMountainGraph[8][16] = tileEarthN;
        arrayMountainGraph[8][17] = tileEarthN;
        arrayMountainGraph[8][18] = tileEarthNE;

        arrayMountainGraph[10][13] = tilePathH;
        arrayMountainGraph[9][14] = tileEarthW;
        arrayMountainGraph[9][15] = tileEarth;
        arrayMountainGraph[9][16] = tileEarth;
        arrayMountainGraph[9][17] = tileEarth;
        arrayMountainGraph[9][18] = tileEarthSE2;
        arrayMountainGraph[9][19] = tileEarthNE;

        arrayMountainGraph[10][14] = tileEarthW;
        arrayMountainGraph[10][15] = tileEarth;
        arrayMountainGraph[10][16] = tileEarth;
        arrayMountainGraph[10][17] = tileEarth;
        arrayMountainGraph[10][18] = tileEarth;
        arrayMountainGraph[10][19] = tileEarthE;

        arrayMountainGraph[11][14] = tileEarthSW;
        arrayMountainGraph[11][15] = tileEarthS;
        arrayMountainGraph[11][16] = tileEarthS;
        arrayMountainGraph[11][17] = tileEarthS;
        arrayMountainGraph[11][18] = tileEarthS;
        arrayMountainGraph[11][19] = tileEarthSE;
    }

    let finalMountainString = '';
    let rowCount = 0;
    for (let i = 0; i < arrayMountainGraph.length; i++) {
        let tileCount = 0;
        for (let i = 0; i < arrayMountainGraph[rowCount].length; i++) {
            finalMountainString += arrayMountainGraph[rowCount][tileCount];
            tileCount++;
        }
        finalMountainString += '<br>'
        rowCount++;
    }
    divViewMountain.innerHTML = '<div class=rowCentered><div id=divMountain>' + finalMountainString + '</div></div>';
}



function RedrawVillage() {
    const timestamp = '<br><br><span id=spanVillageEstDate>Est. ' + RomanceNumber(estDate[1]) + '</span>';
    if (villageStage == 0) {
        spanVillageName.innerHTML = displayVillageTitle0 + ' ' + nameVillage;
        divVillage.innerHTML = '&nbsp;<br>&nbsp;<br>&nbsp;<br>~~~~~~~~~~~~~~~~~~~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .<br><br><br>';
    }
    else if (villageStage == 1) {
        divVillage.innerHTML = '&nbsp;<br>&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; __<br>~~~~~~~~~~~~||~~~~~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .<br><br><br>';
    }
    else if (villageStage == 2) {
        divVillage.innerHTML = '&nbsp;<br>&nbsp;<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ____<br>~~~~~~~~~~~~||.|~~~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .<br><br><br>';
    }
    else if (villageStage == 3) {
        spanVillageName.innerHTML = displayVillageTitle1 + ' ' + nameVillage;
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/.\\__<br>~~~~~~~~~~~|.|.|~~~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 4) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/.\\___<br>~~~~~~~~~~~|.|.|.|~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 5) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;/.\\_|.|<br>~~~~~~~~~~~|.|.|.|~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 6) {
        spanVillageName.innerHTML = displayVillageTitle2 + ' ' + nameVillage;
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br>&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; x &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp;/.\\ /.\\_|.|<br>~~~~~~~|.|~|.|.|.|~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 7) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; x &nbsp;|.|<br>&nbsp; &nbsp; &nbsp; &nbsp;/.\\ /.\\_|.|<br>~~~~~~~|.|~|.|.|.|~~~~~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 8) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; x &nbsp;|.| |.|<br>&nbsp; &nbsp; &nbsp; &nbsp;/.\\ /.\\_|.| |.|<br>~~~~~~~|.|~|.|.|.|~|.|~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 9) {
        spanVillageName.innerHTML = displayVillageTitle3 + ' ' + nameVillage;
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; x &nbsp;|.| |.|<br>&nbsp; &nbsp;|\\ &nbsp;/.\\ /.\\_|.| |.|<br>~~~|.|~|.|~|.|.|.|~|.|~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 10) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; x &nbsp;|.|-|.|<br>&nbsp; &nbsp;|\\ &nbsp;/.\\ /.\\_|.|.|.|<br>~~~|.|~|.|~|.|.|.|_|.|~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 11) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp; | . x &nbsp;|.|-|.|<br>&nbsp; &nbsp;|\\ &nbsp;/.\\-/.\\_|.|.|.|<br>~~~|.|~|.|_|.|.|.|_|.|~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 12) {
        spanVillageName.innerHTML = displayVillageTitle4 + ' ' + nameVillage;
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; &nbsp; | . x /|.|-|.|<br>&nbsp; &nbsp;|\\ &nbsp;/.\\-/.\\_|.|.|.|<br>~~~|.|~|.|_|.|.|.|_|.|~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 13) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; . | . x /|.|-|.|<br>&nbsp; &nbsp;|\\ ./.\\-/.\\_|.|.|.|<br>~~~|.|_|.|_|.|.|.|_|.|~~~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 14) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; . | . x /|.|-|.|_<br>&nbsp; &nbsp;|\\ ./.\\-/.\\_|.|.|.|+\\<br>~~~|.|_|.|_|.|.|.|_|.|+|~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 15) {
        spanVillageName.innerHTML = displayVillageTitle5 + ' ' + nameVillage;
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; . | . x /|.|-|.|_<br>&nbsp; &nbsp;|\\ ./.\\-/.\\-|.|.|.|+\\<br>~~~|.|_|.|_|.|=|.|_|.|+|~<br> &nbsp; &nbsp; &nbsp; .&nbsp; &nbsp; _&nbsp; &nbsp; &nbsp; .' + timestamp;
    }
    else if (villageStage == 16) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; . | . x /|.|-|.|_<br>&nbsp; &nbsp;|\\ ./.\\-/.\\-|.|.|.|+\\<br>~~~|.|_|.|_|.|=|.|_|.|+|~<br>═════╩══╩═══╩═══╩═╩═╩════' + timestamp;
    }
    else if (villageStage == 17) {
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; . | . x /|.|-|.|_<br>&nbsp; _|\\ ./.\\-/.\\-|.|.|.|+\\<br>-▓#▓▓▒▓▒▓▓▓▓▓▓▓▓▒▓▓▒▓▓#▓-<br>═════╩══╩═══╩═══╩═╩═╩════' + timestamp;
    }
    else if (villageStage == 18) {
        spanVillageName.innerHTML = displayVillageTitle6 + ' ' + nameVillage;
        divVillage.innerHTML = '&nbsp; &nbsp; &nbsp; <span class=monument>♠</span> &nbsp; &nbsp; | &nbsp; _ &nbsp; _<br>&nbsp; &nbsp; &nbsp; <span class=monument>§</span> | . x /|.|-|.|_<br>&nbsp; _|\\ <span class=monument>§</span>/.\\-/.\\-|.|.|.|+\\<br>-▓#▓<span class=monument>♣♣¶♣♣</span>▓▓▓▓▓▓▓▒▓▓▒▓▓#▓-<br>═════╩══╩═══╩═══╩═╩═╩════' + timestamp;
    }
}



function AnimateWinButton() {
    clearInterval(animatedWinButton);
    winButtonFrame += 1;
    if (winButtonFrame == 12) { winButtonFrame = 0; }

    const arrayWinFrames = [
        '🏵️🏵️🏵️💮🏵️🏵️🏵️<br>🏵️🏵️💮👑💮🏵️🏵️<br>🏵️🏵️🏵️💮🏵️🏵️🏵️',
        '🏵️🏵️💮💮💮🏵️🏵️<br>🏵️💮💮👑💮💮🏵️<br>🏵️🏵️💮💮💮🏵️🏵️',
        '🏵️💮💮💮💮💮🏵️<br>💮💮💮👑💮💮💮<br>🏵️💮💮💮💮💮🏵️',
        '💮💮💮💮💮💮💮<br>💮💮💮👑💮💮💮<br>💮💮💮💮💮💮💮',
        '💮💮💮🪷💮💮💮<br>💮💮🪷👑🪷💮💮<br>💮💮💮🪷💮💮💮',
        '💮💮🪷🪷🪷💮💮<br>💮🪷🪷👑🪷🪷💮<br>💮💮🪷🪷🪷💮💮',
        '💮🪷🪷🪷🪷🪷💮<br>🪷🪷🪷👑🪷🪷🪷<br>💮🪷🪷🪷🪷🪷💮',
        '🪷🪷🪷🪷🪷🪷🪷<br>🪷🪷🪷👑🪷🪷🪷<br>🪷🪷🪷🪷🪷🪷🪷',
        '🪷🪷🪷🏵️🪷🪷🪷<br>🪷🪷🏵️👑🏵️🪷🪷<br>🪷🪷🪷🏵️🪷🪷🪷',
        '🪷🪷🏵️🏵️🏵️🪷🪷<br>🪷🏵️🏵️👑🏵️🏵️🪷<br>🪷🪷🏵️🏵️🏵️🪷🪷',
        '🪷🏵️🏵️🏵️🏵️🏵️🪷<br>🏵️🏵️🏵️👑🏵️🏵️🏵️<br>🪷🏵️🏵️🏵️🏵️🏵️🪷',
        '🏵️🏵️🏵️🏵️🏵️🏵️🏵️<br>🏵️🏵️🏵️👑🏵️🏵️🏵️<br>🏵️🏵️🏵️🏵️🏵️🏵️🏵️',
    ];
    buttonWin.innerHTML = arrayWinFrames[winButtonFrame];

    const speed1 = 30;
    const speed2 = 80;
    const speed3 = 140;
    const speed4 = 200;
    if (winButtonFrame == 0) { animatedWinButton = setInterval(AnimateWinButton, speed1); }
    else if (winButtonFrame == 1) { animatedWinButton = setInterval(AnimateWinButton, speed2); }
    else if (winButtonFrame == 2) { animatedWinButton = setInterval(AnimateWinButton, speed3); }
    else if (winButtonFrame == 3) { animatedWinButton = setInterval(AnimateWinButton, speed4); }
    else if (winButtonFrame == 4) { animatedWinButton = setInterval(AnimateWinButton, speed1); }
    else if (winButtonFrame == 5) { animatedWinButton = setInterval(AnimateWinButton, speed2); }
    else if (winButtonFrame == 6) { animatedWinButton = setInterval(AnimateWinButton, speed3); }
    else if (winButtonFrame == 7) { animatedWinButton = setInterval(AnimateWinButton, speed4); }
    else if (winButtonFrame == 8) { animatedWinButton = setInterval(AnimateWinButton, speed1); }
    else if (winButtonFrame == 9) { animatedWinButton = setInterval(AnimateWinButton, speed2); }
    else if (winButtonFrame == 10) { animatedWinButton = setInterval(AnimateWinButton, speed3); }
    else { animatedWinButton = setInterval(AnimateWinButton, speed4); }
}



// End of Document